
zAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800100  00001800  00001894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001800  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000074  0080022e  0080022e  000019c2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000109c  00000000  00000000  00001ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084e  00000000  00000000  00002b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c2e  00000000  00000000  000033c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00003ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056e  00000000  00000000  000042e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f8e  00000000  00000000  00004856  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000057e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e0       	ldi	r30, 0x00	; 0
      7c:	f8 e1       	ldi	r31, 0x18	; 24
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 32       	cpi	r26, 0x2E	; 46
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	ae e2       	ldi	r26, 0x2E	; 46
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 3a       	cpi	r26, 0xA2	; 162
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 66 02 	call	0x4cc	; 0x4cc <main>
      9e:	0c 94 fe 0b 	jmp	0x17fc	; 0x17fc <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initializeKeyPress>:

int button;


void initializeKeyPress(void){
	BUTTON_DIR = 0x00;
      a6:	14 b8       	out	0x04, r1	; 4
      a8:	08 95       	ret

000000aa <keyPressed>:
}

int keyPressed(void){
	
	if (BUTTON_PORT & (1<<SELECT_PIN)) button = SELECT;
      aa:	18 9b       	sbis	0x03, 0	; 3
      ac:	07 c0       	rjmp	.+14     	; 0xbc <keyPressed+0x12>
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <button+0x1>
      b6:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <button>
      ba:	1a c0       	rjmp	.+52     	; 0xf0 <keyPressed+0x46>
	else if (BUTTON_PORT & (1<<DOWN_PIN)) button = DOWN;
      bc:	19 9b       	sbis	0x03, 1	; 3
      be:	07 c0       	rjmp	.+14     	; 0xce <keyPressed+0x24>
      c0:	82 e0       	ldi	r24, 0x02	; 2
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <button+0x1>
      c8:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <button>
      cc:	11 c0       	rjmp	.+34     	; 0xf0 <keyPressed+0x46>
	else if (BUTTON_PORT & (1<<UP_PIN)) button = UP;
      ce:	1a 9b       	sbis	0x03, 2	; 3
      d0:	07 c0       	rjmp	.+14     	; 0xe0 <keyPressed+0x36>
      d2:	83 e0       	ldi	r24, 0x03	; 3
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <button+0x1>
      da:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <button>
      de:	08 c0       	rjmp	.+16     	; 0xf0 <keyPressed+0x46>
	else if (BUTTON_PORT & (1<<DESELECT_PIN)) button = DESELECT;
      e0:	1b 9b       	sbis	0x03, 3	; 3
      e2:	0b c0       	rjmp	.+22     	; 0xfa <keyPressed+0x50>
      e4:	84 e0       	ldi	r24, 0x04	; 4
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <button+0x1>
      ec:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <button>
	else return 0;
	return button;
      f0:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <button>
      f4:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <button+0x1>
      f8:	08 95       	ret
	
	if (BUTTON_PORT & (1<<SELECT_PIN)) button = SELECT;
	else if (BUTTON_PORT & (1<<DOWN_PIN)) button = DOWN;
	else if (BUTTON_PORT & (1<<UP_PIN)) button = UP;
	else if (BUTTON_PORT & (1<<DESELECT_PIN)) button = DESELECT;
	else return 0;
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	90 e0       	ldi	r25, 0x00	; 0
	return button;
}
      fe:	08 95       	ret

00000100 <sendCommand>:
#define EN PORTD1			/* Define Enable Signal pin */


void sendCommand( unsigned char command )
{
	LCD_Port = (LCD_Port & 0b00001111) | (command & 0b11110000); /* sending first four bits */
     100:	9b b1       	in	r25, 0x0b	; 11
     102:	9f 70       	andi	r25, 0x0F	; 15
     104:	28 2f       	mov	r18, r24
     106:	20 7f       	andi	r18, 0xF0	; 240
     108:	92 2b       	or	r25, r18
     10a:	9b b9       	out	0x0b, r25	; 11
	LCD_Port &= ~ (1<<RS);										 /* RS=0 to enable command registry */
     10c:	9b b1       	in	r25, 0x0b	; 11
     10e:	9e 7f       	andi	r25, 0xFE	; 254
     110:	9b b9       	out	0x0b, r25	; 11
	LCD_Port |= (1<<EN);									     /* Sending enabling pulse */
     112:	9b b1       	in	r25, 0x0b	; 11
     114:	92 60       	ori	r25, 0x02	; 2
     116:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     118:	32 e0       	ldi	r19, 0x02	; 2
     11a:	3a 95       	dec	r19
     11c:	f1 f7       	brne	.-4      	; 0x11a <sendCommand+0x1a>
     11e:	00 c0       	rjmp	.+0      	; 0x120 <sendCommand+0x20>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     120:	9b b1       	in	r25, 0x0b	; 11
     122:	9d 7f       	andi	r25, 0xFD	; 253
     124:	9b b9       	out	0x0b, r25	; 11
     126:	ef e8       	ldi	r30, 0x8F	; 143
     128:	f1 e0       	ldi	r31, 0x01	; 1
     12a:	31 97       	sbiw	r30, 0x01	; 1
     12c:	f1 f7       	brne	.-4      	; 0x12a <sendCommand+0x2a>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <sendCommand+0x30>
     130:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0b00001111) | (command << 4);		/* sending last four bits */
     132:	2b b1       	in	r18, 0x0b	; 11
     134:	f0 e1       	ldi	r31, 0x10	; 16
     136:	8f 9f       	mul	r24, r31
     138:	c0 01       	movw	r24, r0
     13a:	11 24       	eor	r1, r1
     13c:	92 2f       	mov	r25, r18
     13e:	9f 70       	andi	r25, 0x0F	; 15
     140:	89 2b       	or	r24, r25
     142:	8b b9       	out	0x0b, r24	; 11
	LCD_Port |= (1<<EN);
     144:	8b b1       	in	r24, 0x0b	; 11
     146:	82 60       	ori	r24, 0x02	; 2
     148:	8b b9       	out	0x0b, r24	; 11
     14a:	32 e0       	ldi	r19, 0x02	; 2
     14c:	3a 95       	dec	r19
     14e:	f1 f7       	brne	.-4      	; 0x14c <sendCommand+0x4c>
     150:	00 c0       	rjmp	.+0      	; 0x152 <sendCommand+0x52>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     152:	8b b1       	in	r24, 0x0b	; 11
     154:	8d 7f       	andi	r24, 0xFD	; 253
     156:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     158:	8f e9       	ldi	r24, 0x9F	; 159
     15a:	9f e0       	ldi	r25, 0x0F	; 15
     15c:	01 97       	sbiw	r24, 0x01	; 1
     15e:	f1 f7       	brne	.-4      	; 0x15c <sendCommand+0x5c>
     160:	00 c0       	rjmp	.+0      	; 0x162 <sendCommand+0x62>
     162:	00 00       	nop
     164:	08 95       	ret

00000166 <sendCharacter>:
}


void sendCharacter( unsigned char data )
{
	LCD_Port = (LCD_Port & 0b00001111) | (data & 0b11110000);	/* sending first four bits */
     166:	9b b1       	in	r25, 0x0b	; 11
     168:	9f 70       	andi	r25, 0x0F	; 15
     16a:	28 2f       	mov	r18, r24
     16c:	20 7f       	andi	r18, 0xF0	; 240
     16e:	92 2b       	or	r25, r18
     170:	9b b9       	out	0x0b, r25	; 11
	LCD_Port |= (1<<RS);										/* RS=1 to enable data registry */
     172:	9b b1       	in	r25, 0x0b	; 11
     174:	91 60       	ori	r25, 0x01	; 1
     176:	9b b9       	out	0x0b, r25	; 11
	LCD_Port|= (1<<EN);
     178:	9b b1       	in	r25, 0x0b	; 11
     17a:	92 60       	ori	r25, 0x02	; 2
     17c:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     17e:	32 e0       	ldi	r19, 0x02	; 2
     180:	3a 95       	dec	r19
     182:	f1 f7       	brne	.-4      	; 0x180 <sendCharacter+0x1a>
     184:	00 c0       	rjmp	.+0      	; 0x186 <sendCharacter+0x20>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     186:	9b b1       	in	r25, 0x0b	; 11
     188:	9d 7f       	andi	r25, 0xFD	; 253
     18a:	9b b9       	out	0x0b, r25	; 11
     18c:	ef e8       	ldi	r30, 0x8F	; 143
     18e:	f1 e0       	ldi	r31, 0x01	; 1
     190:	31 97       	sbiw	r30, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <sendCharacter+0x2a>
     194:	00 c0       	rjmp	.+0      	; 0x196 <sendCharacter+0x30>
     196:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0b00001111) | (data << 4);			/* sending last four bits */
     198:	2b b1       	in	r18, 0x0b	; 11
     19a:	f0 e1       	ldi	r31, 0x10	; 16
     19c:	8f 9f       	mul	r24, r31
     19e:	c0 01       	movw	r24, r0
     1a0:	11 24       	eor	r1, r1
     1a2:	92 2f       	mov	r25, r18
     1a4:	9f 70       	andi	r25, 0x0F	; 15
     1a6:	89 2b       	or	r24, r25
     1a8:	8b b9       	out	0x0b, r24	; 11
	LCD_Port |= (1<<EN);
     1aa:	8b b1       	in	r24, 0x0b	; 11
     1ac:	82 60       	ori	r24, 0x02	; 2
     1ae:	8b b9       	out	0x0b, r24	; 11
     1b0:	32 e0       	ldi	r19, 0x02	; 2
     1b2:	3a 95       	dec	r19
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <sendCharacter+0x4c>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <sendCharacter+0x52>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     1b8:	8b b1       	in	r24, 0x0b	; 11
     1ba:	8d 7f       	andi	r24, 0xFD	; 253
     1bc:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1be:	8f e9       	ldi	r24, 0x9F	; 159
     1c0:	9f e0       	ldi	r25, 0x0F	; 15
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <sendCharacter+0x5c>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <sendCharacter+0x62>
     1c8:	00 00       	nop
     1ca:	08 95       	ret

000001cc <initializeLCD>:
	_delay_ms(2);
}

void initializeLCD (void)			/*Initializing the LCD*/
{
	LCD_DIRECTORY = 0b11111111;	    /*Select LCD port as output */
     1cc:	8f ef       	ldi	r24, 0xFF	; 255
     1ce:	8a b9       	out	0x0a, r24	; 10
     1d0:	8f e3       	ldi	r24, 0x3F	; 63
     1d2:	9c e9       	ldi	r25, 0x9C	; 156
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <initializeLCD+0x8>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <initializeLCD+0xe>
     1da:	00 00       	nop
	_delay_ms(20);			        /* Accommodating power on delay */
	
	sendCommand(0b00000010);				/* Initialize LCD  */
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	0e 94 80 00 	call	0x100	; 0x100 <sendCommand>
	sendCommand(0b00101000);				/* 2 line, 5*7 matrix in 4-bit mode configurations*/
     1e2:	88 e2       	ldi	r24, 0x28	; 40
     1e4:	0e 94 80 00 	call	0x100	; 0x100 <sendCommand>
	sendCommand(0b00001100);				/* Display on cursor off*/
     1e8:	8c e0       	ldi	r24, 0x0C	; 12
     1ea:	0e 94 80 00 	call	0x100	; 0x100 <sendCommand>
	sendCommand(0b00000110);				/* Increment cursor (shift cursor to right)*/
     1ee:	86 e0       	ldi	r24, 0x06	; 6
     1f0:	0e 94 80 00 	call	0x100	; 0x100 <sendCommand>
	sendCommand(0b00000001);				/* Clear display screen*/
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	0e 94 80 00 	call	0x100	; 0x100 <sendCommand>
     1fa:	8f e9       	ldi	r24, 0x9F	; 159
     1fc:	9f e0       	ldi	r25, 0x0F	; 15
     1fe:	01 97       	sbiw	r24, 0x01	; 1
     200:	f1 f7       	brne	.-4      	; 0x1fe <initializeLCD+0x32>
     202:	00 c0       	rjmp	.+0      	; 0x204 <initializeLCD+0x38>
     204:	00 00       	nop
     206:	08 95       	ret

00000208 <sendString>:
	_delay_ms(2);
}


void sendString (char *str)		/* Send string to LCD function */
{
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each letter to LCD */
     212:	c0 e0       	ldi	r28, 0x00	; 0
     214:	d0 e0       	ldi	r29, 0x00	; 0
     216:	03 c0       	rjmp	.+6      	; 0x21e <sendString+0x16>
	{
		sendCharacter(str[i]);
     218:	0e 94 b3 00 	call	0x166	; 0x166 <sendCharacter>


void sendString (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each letter to LCD */
     21c:	21 96       	adiw	r28, 0x01	; 1
     21e:	f8 01       	movw	r30, r16
     220:	ec 0f       	add	r30, r28
     222:	fd 1f       	adc	r31, r29
     224:	80 81       	ld	r24, Z
     226:	81 11       	cpse	r24, r1
     228:	f7 cf       	rjmp	.-18     	; 0x218 <sendString+0x10>
	{
		sendCharacter(str[i]);
	}
}
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	1f 91       	pop	r17
     230:	0f 91       	pop	r16
     232:	08 95       	ret

00000234 <sendString_XY>:

void sendString_XY (char row, char pos, char *str)	/* Send string to LCD with x,y position */
{
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
     23a:	81 11       	cpse	r24, r1
     23c:	08 c0       	rjmp	.+16     	; 0x24e <sendString_XY+0x1a>
     23e:	60 31       	cpi	r22, 0x10	; 16
     240:	30 f4       	brcc	.+12     	; 0x24e <sendString_XY+0x1a>
	sendCommand((pos & 0b00001111)|0b10000000);		/* Command of first row and required position<16 */
     242:	86 2f       	mov	r24, r22
     244:	8f 70       	andi	r24, 0x0F	; 15
     246:	80 68       	ori	r24, 0x80	; 128
     248:	0e 94 80 00 	call	0x100	; 0x100 <sendCommand>
     24c:	09 c0       	rjmp	.+18     	; 0x260 <sendString_XY+0x2c>
	else if (row == 1 && pos<16)
     24e:	81 30       	cpi	r24, 0x01	; 1
     250:	39 f4       	brne	.+14     	; 0x260 <sendString_XY+0x2c>
     252:	60 31       	cpi	r22, 0x10	; 16
     254:	28 f4       	brcc	.+10     	; 0x260 <sendString_XY+0x2c>
	sendCommand((pos & 0b00001111)|0b11000000);		/* Command of first row and required position<16 */
     256:	86 2f       	mov	r24, r22
     258:	8f 70       	andi	r24, 0x0F	; 15
     25a:	80 6c       	ori	r24, 0xC0	; 192
     25c:	0e 94 80 00 	call	0x100	; 0x100 <sendCommand>
	sendString(str);								/* Call LCD string function */
     260:	ce 01       	movw	r24, r28
     262:	0e 94 04 01 	call	0x208	; 0x208 <sendString>
}
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <clearDisplay>:

void clearDisplay()
{
	sendCommand(0b00000001);		/* Command to clear the display */
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	0e 94 80 00 	call	0x100	; 0x100 <sendCommand>
     272:	8f e9       	ldi	r24, 0x9F	; 159
     274:	9f e0       	ldi	r25, 0x0F	; 15
     276:	01 97       	sbiw	r24, 0x01	; 1
     278:	f1 f7       	brne	.-4      	; 0x276 <clearDisplay+0xa>
     27a:	00 c0       	rjmp	.+0      	; 0x27c <clearDisplay+0x10>
     27c:	00 00       	nop
	_delay_ms(2);
	sendCommand(0b10000000);		/* Set cursor to home */
     27e:	80 e8       	ldi	r24, 0x80	; 128
     280:	0e 94 80 00 	call	0x100	; 0x100 <sendCommand>
     284:	08 95       	ret

00000286 <updateTime>:
    }
}


//Supportive functions
void updateTime(int* hours, int* minutes, int* seconds, int pos, int updateValue){
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	fc 01       	movw	r30, r24
     294:	ea 01       	movw	r28, r20
	
	if (updateValue == 1){
     296:	01 30       	cpi	r16, 0x01	; 1
     298:	11 05       	cpc	r17, r1
     29a:	41 f5       	brne	.+80     	; 0x2ec <updateTime+0x66>
		if (pos == 0) {
     29c:	21 15       	cp	r18, r1
     29e:	31 05       	cpc	r19, r1
     2a0:	51 f4       	brne	.+20     	; 0x2b6 <updateTime+0x30>
			*hours += 1;
     2a2:	80 81       	ld	r24, Z
     2a4:	91 81       	ldd	r25, Z+1	; 0x01
     2a6:	01 96       	adiw	r24, 0x01	; 1
			*hours %= 24;
     2a8:	68 e1       	ldi	r22, 0x18	; 24
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__divmodhi4>
     2b0:	91 83       	std	Z+1, r25	; 0x01
     2b2:	80 83       	st	Z, r24
     2b4:	4c c0       	rjmp	.+152    	; 0x34e <updateTime+0xc8>
		}
		
		else if (pos == 1){
     2b6:	21 30       	cpi	r18, 0x01	; 1
     2b8:	31 05       	cpc	r19, r1
     2ba:	59 f4       	brne	.+22     	; 0x2d2 <updateTime+0x4c>
			*minutes += 1;
     2bc:	fb 01       	movw	r30, r22
     2be:	80 81       	ld	r24, Z
     2c0:	91 81       	ldd	r25, Z+1	; 0x01
     2c2:	01 96       	adiw	r24, 0x01	; 1
			*minutes %= 60;
     2c4:	6c e3       	ldi	r22, 0x3C	; 60
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__divmodhi4>
     2cc:	91 83       	std	Z+1, r25	; 0x01
     2ce:	80 83       	st	Z, r24
     2d0:	3e c0       	rjmp	.+124    	; 0x34e <updateTime+0xc8>
		}
		
		else if (pos == 2){
     2d2:	22 30       	cpi	r18, 0x02	; 2
     2d4:	31 05       	cpc	r19, r1
     2d6:	d9 f5       	brne	.+118    	; 0x34e <updateTime+0xc8>
			*seconds += 1;
     2d8:	88 81       	ld	r24, Y
     2da:	99 81       	ldd	r25, Y+1	; 0x01
     2dc:	01 96       	adiw	r24, 0x01	; 1
			*seconds %= 60;
     2de:	6c e3       	ldi	r22, 0x3C	; 60
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__divmodhi4>
     2e6:	99 83       	std	Y+1, r25	; 0x01
     2e8:	88 83       	st	Y, r24
     2ea:	31 c0       	rjmp	.+98     	; 0x34e <updateTime+0xc8>
		}
		
	}
	
	else if (updateValue == -1){
     2ec:	0f 3f       	cpi	r16, 0xFF	; 255
     2ee:	1f 4f       	sbci	r17, 0xFF	; 255
     2f0:	71 f5       	brne	.+92     	; 0x34e <updateTime+0xc8>
		if (pos == 0){
     2f2:	21 15       	cp	r18, r1
     2f4:	31 05       	cpc	r19, r1
     2f6:	61 f4       	brne	.+24     	; 0x310 <updateTime+0x8a>
			*hours -=1;
     2f8:	80 81       	ld	r24, Z
     2fa:	91 81       	ldd	r25, Z+1	; 0x01
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	91 83       	std	Z+1, r25	; 0x01
     300:	80 83       	st	Z, r24
			if (*hours == -1) *hours = 23;
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	21 f5       	brne	.+72     	; 0x34e <updateTime+0xc8>
     306:	87 e1       	ldi	r24, 0x17	; 23
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	91 83       	std	Z+1, r25	; 0x01
     30c:	80 83       	st	Z, r24
     30e:	1f c0       	rjmp	.+62     	; 0x34e <updateTime+0xc8>
		}
		
		else if (pos == 1){
     310:	21 30       	cpi	r18, 0x01	; 1
     312:	31 05       	cpc	r19, r1
     314:	71 f4       	brne	.+28     	; 0x332 <updateTime+0xac>
			*minutes -= 1;
     316:	fb 01       	movw	r30, r22
     318:	80 81       	ld	r24, Z
     31a:	91 81       	ldd	r25, Z+1	; 0x01
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	91 83       	std	Z+1, r25	; 0x01
     320:	80 83       	st	Z, r24
			if (*minutes == -1) *minutes = 59;
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	a1 f4       	brne	.+40     	; 0x34e <updateTime+0xc8>
     326:	8b e3       	ldi	r24, 0x3B	; 59
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	fb 01       	movw	r30, r22
     32c:	91 83       	std	Z+1, r25	; 0x01
     32e:	80 83       	st	Z, r24
     330:	0e c0       	rjmp	.+28     	; 0x34e <updateTime+0xc8>
		}
		
		else if ( pos == 2){
     332:	22 30       	cpi	r18, 0x02	; 2
     334:	31 05       	cpc	r19, r1
     336:	59 f4       	brne	.+22     	; 0x34e <updateTime+0xc8>
			*seconds -= 1;
     338:	88 81       	ld	r24, Y
     33a:	99 81       	ldd	r25, Y+1	; 0x01
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	99 83       	std	Y+1, r25	; 0x01
     340:	88 83       	st	Y, r24
			if (*seconds == -1) *seconds = 59;
     342:	01 96       	adiw	r24, 0x01	; 1
     344:	21 f4       	brne	.+8      	; 0x34e <updateTime+0xc8>
     346:	8b e3       	ldi	r24, 0x3B	; 59
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	99 83       	std	Y+1, r25	; 0x01
     34c:	88 83       	st	Y, r24
	*seconds = total%60;
	*minutes = ((total-*seconds)/60)%60;
	*hours   = ((total - *minutes * 60 - *seconds)/60)%24;
	*/

}
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	ff 90       	pop	r15
     358:	ef 90       	pop	r14
     35a:	08 95       	ret

0000035c <tickClock>:



void tickClock(int* hours, int* minutes, int* seconds){
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	ec 01       	movw	r28, r24
     366:	fb 01       	movw	r30, r22
     368:	8a 01       	movw	r16, r20
	*seconds += 1;
     36a:	da 01       	movw	r26, r20
     36c:	8d 91       	ld	r24, X+
     36e:	9c 91       	ld	r25, X
     370:	11 97       	sbiw	r26, 0x01	; 1
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	8d 93       	st	X+, r24
     376:	9c 93       	st	X, r25
	*minutes += *seconds/60;
     378:	2c e3       	ldi	r18, 0x3C	; 60
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	b9 01       	movw	r22, r18
     37e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__divmodhi4>
     382:	80 81       	ld	r24, Z
     384:	91 81       	ldd	r25, Z+1	; 0x01
     386:	68 0f       	add	r22, r24
     388:	79 1f       	adc	r23, r25
     38a:	71 83       	std	Z+1, r23	; 0x01
     38c:	60 83       	st	Z, r22
	*seconds %=60;
     38e:	d8 01       	movw	r26, r16
     390:	8d 91       	ld	r24, X+
     392:	9c 91       	ld	r25, X
     394:	b9 01       	movw	r22, r18
     396:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__divmodhi4>
     39a:	d8 01       	movw	r26, r16
     39c:	8d 93       	st	X+, r24
     39e:	9c 93       	st	X, r25
	*hours += *minutes/60;
     3a0:	80 81       	ld	r24, Z
     3a2:	91 81       	ldd	r25, Z+1	; 0x01
     3a4:	b9 01       	movw	r22, r18
     3a6:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__divmodhi4>
     3aa:	88 81       	ld	r24, Y
     3ac:	99 81       	ldd	r25, Y+1	; 0x01
     3ae:	68 0f       	add	r22, r24
     3b0:	79 1f       	adc	r23, r25
     3b2:	79 83       	std	Y+1, r23	; 0x01
     3b4:	68 83       	st	Y, r22
	*minutes %= 60;
     3b6:	80 81       	ld	r24, Z
     3b8:	91 81       	ldd	r25, Z+1	; 0x01
     3ba:	b9 01       	movw	r22, r18
     3bc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__divmodhi4>
     3c0:	91 83       	std	Z+1, r25	; 0x01
     3c2:	80 83       	st	Z, r24
	*hours %=24;
     3c4:	88 81       	ld	r24, Y
     3c6:	99 81       	ldd	r25, Y+1	; 0x01
     3c8:	68 e1       	ldi	r22, 0x18	; 24
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__divmodhi4>
     3d0:	99 83       	std	Y+1, r25	; 0x01
     3d2:	88 83       	st	Y, r24
}
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	08 95       	ret

000003de <viewAlarms>:


void viewAlarms(void){
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
	sprintf(upperAlarm,"1)%02d:%02d  2)%02d:%02d ",alarmArray[0][0], alarmArray[0][1],alarmArray[1][0], alarmArray[1][1]);
     3e2:	cb e4       	ldi	r28, 0x4B	; 75
     3e4:	d2 e0       	ldi	r29, 0x02	; 2
     3e6:	89 85       	ldd	r24, Y+9	; 0x09
     3e8:	8f 93       	push	r24
     3ea:	88 85       	ldd	r24, Y+8	; 0x08
     3ec:	8f 93       	push	r24
     3ee:	8f 81       	ldd	r24, Y+7	; 0x07
     3f0:	8f 93       	push	r24
     3f2:	8e 81       	ldd	r24, Y+6	; 0x06
     3f4:	8f 93       	push	r24
     3f6:	8b 81       	ldd	r24, Y+3	; 0x03
     3f8:	8f 93       	push	r24
     3fa:	8a 81       	ldd	r24, Y+2	; 0x02
     3fc:	8f 93       	push	r24
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	8f 93       	push	r24
     402:	88 81       	ld	r24, Y
     404:	8f 93       	push	r24
     406:	87 e0       	ldi	r24, 0x07	; 7
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	9f 93       	push	r25
     40c:	8f 93       	push	r24
     40e:	83 e7       	ldi	r24, 0x73	; 115
     410:	92 e0       	ldi	r25, 0x02	; 2
     412:	9f 93       	push	r25
     414:	8f 93       	push	r24
     416:	0e 94 14 09 	call	0x1228	; 0x1228 <sprintf>
	sprintf(lowerAlarm,"3)%02d:%02d  4)%02d:%02d ",alarmArray[2][0], alarmArray[2][1],alarmArray[3][0], alarmArray[3][1]);
     41a:	8d 89       	ldd	r24, Y+21	; 0x15
     41c:	8f 93       	push	r24
     41e:	8c 89       	ldd	r24, Y+20	; 0x14
     420:	8f 93       	push	r24
     422:	8b 89       	ldd	r24, Y+19	; 0x13
     424:	8f 93       	push	r24
     426:	8a 89       	ldd	r24, Y+18	; 0x12
     428:	8f 93       	push	r24
     42a:	8f 85       	ldd	r24, Y+15	; 0x0f
     42c:	8f 93       	push	r24
     42e:	8e 85       	ldd	r24, Y+14	; 0x0e
     430:	8f 93       	push	r24
     432:	8d 85       	ldd	r24, Y+13	; 0x0d
     434:	8f 93       	push	r24
     436:	8c 85       	ldd	r24, Y+12	; 0x0c
     438:	8f 93       	push	r24
     43a:	81 e2       	ldi	r24, 0x21	; 33
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	9f 93       	push	r25
     440:	8f 93       	push	r24
     442:	84 e8       	ldi	r24, 0x84	; 132
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	9f 93       	push	r25
     448:	8f 93       	push	r24
     44a:	0e 94 14 09 	call	0x1228	; 0x1228 <sprintf>
	sendString_XY(0,0,upperAlarm);
     44e:	43 e7       	ldi	r20, 0x73	; 115
     450:	52 e0       	ldi	r21, 0x02	; 2
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
	sendString_XY(1,0,lowerAlarm);
     45a:	44 e8       	ldi	r20, 0x84	; 132
     45c:	52 e0       	ldi	r21, 0x02	; 2
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
	for (int j = 0; j<4; j++){
     466:	8d b7       	in	r24, 0x3d	; 61
     468:	9e b7       	in	r25, 0x3e	; 62
     46a:	48 96       	adiw	r24, 0x18	; 24
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	9e bf       	out	0x3e, r25	; 62
     472:	0f be       	out	0x3f, r0	; 63
     474:	8d bf       	out	0x3d, r24	; 61
     476:	c0 e0       	ldi	r28, 0x00	; 0
     478:	d0 e0       	ldi	r29, 0x00	; 0
     47a:	22 c0       	rjmp	.+68     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
		if (alarmState[j] == false){
     47c:	fe 01       	movw	r30, r28
     47e:	e8 5c       	subi	r30, 0xC8	; 200
     480:	fd 4f       	sbci	r31, 0xFD	; 253
     482:	80 81       	ld	r24, Z
     484:	81 11       	cpse	r24, r1
     486:	1b c0       	rjmp	.+54     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			sendString_XY(j/2, 8*(j%2)+(j%2)+2," OFF ");
     488:	be 01       	movw	r22, r28
     48a:	61 70       	andi	r22, 0x01	; 1
     48c:	70 78       	andi	r23, 0x80	; 128
     48e:	77 23       	and	r23, r23
     490:	34 f4       	brge	.+12     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     492:	61 50       	subi	r22, 0x01	; 1
     494:	71 09       	sbc	r23, r1
     496:	6e 6f       	ori	r22, 0xFE	; 254
     498:	7f 6f       	ori	r23, 0xFF	; 255
     49a:	6f 5f       	subi	r22, 0xFF	; 255
     49c:	7f 4f       	sbci	r23, 0xFF	; 255
     49e:	ce 01       	movw	r24, r28
     4a0:	dd 23       	and	r29, r29
     4a2:	0c f4       	brge	.+2      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	95 95       	asr	r25
     4a8:	87 95       	ror	r24
     4aa:	96 2f       	mov	r25, r22
     4ac:	99 0f       	add	r25, r25
     4ae:	99 0f       	add	r25, r25
     4b0:	99 0f       	add	r25, r25
     4b2:	69 0f       	add	r22, r25
     4b4:	6e 5f       	subi	r22, 0xFE	; 254
     4b6:	4b e3       	ldi	r20, 0x3B	; 59
     4b8:	51 e0       	ldi	r21, 0x01	; 1
     4ba:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
void viewAlarms(void){
	sprintf(upperAlarm,"1)%02d:%02d  2)%02d:%02d ",alarmArray[0][0], alarmArray[0][1],alarmArray[1][0], alarmArray[1][1]);
	sprintf(lowerAlarm,"3)%02d:%02d  4)%02d:%02d ",alarmArray[2][0], alarmArray[2][1],alarmArray[3][0], alarmArray[3][1]);
	sendString_XY(0,0,upperAlarm);
	sendString_XY(1,0,lowerAlarm);
	for (int j = 0; j<4; j++){
     4be:	21 96       	adiw	r28, 0x01	; 1
     4c0:	c4 30       	cpi	r28, 0x04	; 4
     4c2:	d1 05       	cpc	r29, r1
     4c4:	dc f2       	brlt	.-74     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
		if (alarmState[j] == false){
			sendString_XY(j/2, 8*(j%2)+(j%2)+2," OFF ");
		}
	}
}
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <main>:
void viewAlarms(void);

int main(void)
{
	
	initializeLCD();
     4cc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <initializeLCD>
	initializeKeyPress();
     4d0:	0e 94 53 00 	call	0xa6	; 0xa6 <initializeKeyPress>
    /* Replace with your application code */

	
    while (1) 
    {
		button = keyPressed();
     4d4:	0e 94 55 00 	call	0xaa	; 0xaa <keyPressed>
     4d8:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <button+0x1>
     4dc:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <button>
		
		if (tick) tickClock(&clockHours, &clockMinutes, &clockSeconds);
     4e0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tick>
     4e4:	88 23       	and	r24, r24
     4e6:	41 f0       	breq	.+16     	; 0x4f8 <main+0x2c>
     4e8:	45 e4       	ldi	r20, 0x45	; 69
     4ea:	52 e0       	ldi	r21, 0x02	; 2
     4ec:	67 e4       	ldi	r22, 0x47	; 71
     4ee:	72 e0       	ldi	r23, 0x02	; 2
     4f0:	89 e4       	ldi	r24, 0x49	; 73
     4f2:	92 e0       	ldi	r25, 0x02	; 2
     4f4:	0e 94 ae 01 	call	0x35c	; 0x35c <tickClock>
		 
		switch(Directory[0]){
     4f8:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <Directory>
     4fc:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <Directory+0x1>
     500:	82 30       	cpi	r24, 0x02	; 2
     502:	91 05       	cpc	r25, r1
     504:	09 f4       	brne	.+2      	; 0x508 <main+0x3c>
     506:	6e c1       	rjmp	.+732    	; 0x7e4 <main+0x318>
     508:	34 f4       	brge	.+12     	; 0x516 <main+0x4a>
     50a:	00 97       	sbiw	r24, 0x00	; 0
     50c:	61 f0       	breq	.+24     	; 0x526 <main+0x5a>
     50e:	01 97       	sbiw	r24, 0x01	; 1
     510:	09 f4       	brne	.+2      	; 0x514 <main+0x48>
     512:	57 c0       	rjmp	.+174    	; 0x5c2 <main+0xf6>
     514:	57 c6       	rjmp	.+3246   	; 0x11c4 <__stack+0x8c5>
     516:	83 30       	cpi	r24, 0x03	; 3
     518:	91 05       	cpc	r25, r1
     51a:	09 f4       	brne	.+2      	; 0x51e <main+0x52>
     51c:	d4 c4       	rjmp	.+2472   	; 0xec6 <__stack+0x5c7>
     51e:	04 97       	sbiw	r24, 0x04	; 4
     520:	09 f4       	brne	.+2      	; 0x524 <main+0x58>
     522:	ba c5       	rjmp	.+2932   	; 0x1098 <__stack+0x799>
     524:	4f c6       	rjmp	.+3230   	; 0x11c4 <__stack+0x8c5>
			
			case 0:
			
				if (tick || toDisplay){
     526:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tick>
     52a:	81 11       	cpse	r24, r1
     52c:	04 c0       	rjmp	.+8      	; 0x536 <main+0x6a>
     52e:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <toDisplay>
     532:	88 23       	and	r24, r24
     534:	b1 f1       	breq	.+108    	; 0x5a2 <main+0xd6>
				clearDisplay();
     536:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
				sprintf(timeString, "%02d:%02d:%02d", clockHours, clockMinutes, clockSeconds);
     53a:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <clockSeconds+0x1>
     53e:	8f 93       	push	r24
     540:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <clockSeconds>
     544:	8f 93       	push	r24
     546:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <clockMinutes+0x1>
     54a:	8f 93       	push	r24
     54c:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <clockMinutes>
     550:	8f 93       	push	r24
     552:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <clockHours+0x1>
     556:	8f 93       	push	r24
     558:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <clockHours>
     55c:	8f 93       	push	r24
     55e:	81 e4       	ldi	r24, 0x41	; 65
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	9f 93       	push	r25
     564:	8f 93       	push	r24
     566:	8a e6       	ldi	r24, 0x6A	; 106
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	9f 93       	push	r25
     56c:	8f 93       	push	r24
     56e:	0e 94 14 09 	call	0x1228	; 0x1228 <sprintf>
				sendString_XY(0,2,"CURRENT TIME");
     572:	40 e5       	ldi	r20, 0x50	; 80
     574:	51 e0       	ldi	r21, 0x01	; 1
     576:	62 e0       	ldi	r22, 0x02	; 2
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
				sendString_XY(1,4, timeString);
     57e:	4a e6       	ldi	r20, 0x6A	; 106
     580:	52 e0       	ldi	r21, 0x02	; 2
     582:	64 e0       	ldi	r22, 0x04	; 4
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
				tick = false;
     58a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tick>
				toDisplay = false;
     58e:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <toDisplay>
     592:	8d b7       	in	r24, 0x3d	; 61
     594:	9e b7       	in	r25, 0x3e	; 62
     596:	0a 96       	adiw	r24, 0x0a	; 10
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	9e bf       	out	0x3e, r25	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	8d bf       	out	0x3d, r24	; 61
				}
				
				if (button == 2) { 
     5a2:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <button>
     5a6:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <button+0x1>
     5aa:	02 97       	sbiw	r24, 0x02	; 2
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <main+0xe4>
     5ae:	0a c6       	rjmp	.+3092   	; 0x11c4 <__stack+0x8c5>
					Directory[0] = 1;
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <Directory+0x1>
     5b8:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <Directory>
					toDisplay = true;
     5bc:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <toDisplay>
     5c0:	01 c6       	rjmp	.+3074   	; 0x11c4 <__stack+0x8c5>
				
				break;
			
			case 1:
				
				switch(Directory[1]){
     5c2:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <Directory+0x2>
     5c6:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <Directory+0x3>
     5ca:	00 97       	sbiw	r24, 0x00	; 0
     5cc:	21 f0       	breq	.+8      	; 0x5d6 <main+0x10a>
     5ce:	01 97       	sbiw	r24, 0x01	; 1
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <main+0x108>
     5d2:	49 c0       	rjmp	.+146    	; 0x666 <main+0x19a>
     5d4:	f7 c5       	rjmp	.+3054   	; 0x11c4 <__stack+0x8c5>
					
					case 0:
						if (toDisplay){
     5d6:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <toDisplay>
     5da:	88 23       	and	r24, r24
     5dc:	81 f0       	breq	.+32     	; 0x5fe <main+0x132>
						clearDisplay();
     5de:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
						sendString_XY(0,4,"SETTINGS");
     5e2:	44 ed       	ldi	r20, 0xD4	; 212
     5e4:	51 e0       	ldi	r21, 0x01	; 1
     5e6:	64 e0       	ldi	r22, 0x04	; 4
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
						sendString_XY(1,0, "1.EDIT TIME");
     5ee:	4d e5       	ldi	r20, 0x5D	; 93
     5f0:	51 e0       	ldi	r21, 0x01	; 1
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
						toDisplay = false;
     5fa:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <toDisplay>
						}
						
						if (button == 1) {
     5fe:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <button>
     602:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <button+0x1>
     606:	81 30       	cpi	r24, 0x01	; 1
     608:	91 05       	cpc	r25, r1
     60a:	a9 f4       	brne	.+42     	; 0x636 <main+0x16a>
							Directory[1] = 1;
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <Directory+0x3>
     614:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <Directory+0x2>
							clearDisplay();
     618:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
							sendString_XY(0,4,"HH:MM:SS");
     61c:	49 e6       	ldi	r20, 0x69	; 105
     61e:	51 e0       	ldi	r21, 0x01	; 1
     620:	64 e0       	ldi	r22, 0x04	; 4
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
							sendString_XY(1,4, timeString);
     628:	4a e6       	ldi	r20, 0x6A	; 106
     62a:	52 e0       	ldi	r21, 0x02	; 2
     62c:	64 e0       	ldi	r22, 0x04	; 4
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
     634:	c7 c5       	rjmp	.+2958   	; 0x11c4 <__stack+0x8c5>
						}
						
						else if (button == 2) {
     636:	82 30       	cpi	r24, 0x02	; 2
     638:	91 05       	cpc	r25, r1
     63a:	51 f4       	brne	.+20     	; 0x650 <main+0x184>
							Directory[0] = 2;
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <Directory+0x1>
     644:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <Directory>
							toDisplay = true;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <toDisplay>
     64e:	ba c5       	rjmp	.+2932   	; 0x11c4 <__stack+0x8c5>
						}
						else if (button == 3) {
     650:	03 97       	sbiw	r24, 0x03	; 3
     652:	09 f0       	breq	.+2      	; 0x656 <main+0x18a>
     654:	b7 c5       	rjmp	.+2926   	; 0x11c4 <__stack+0x8c5>
							Directory[0] = 0;
     656:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <Directory+0x1>
     65a:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <Directory>
							toDisplay = true;
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <toDisplay>
     664:	af c5       	rjmp	.+2910   	; 0x11c4 <__stack+0x8c5>
						break;
						
					case 1:
					
					
						if (button == 1) {
     666:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <button>
     66a:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <button+0x1>
     66e:	81 30       	cpi	r24, 0x01	; 1
     670:	91 05       	cpc	r25, r1
     672:	b1 f4       	brne	.+44     	; 0x6a0 <main+0x1d4>
							if (position == 2) {
     674:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <position>
     678:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <position+0x1>
     67c:	82 30       	cpi	r24, 0x02	; 2
     67e:	91 05       	cpc	r25, r1
     680:	49 f4       	brne	.+18     	; 0x694 <main+0x1c8>
								Directory[1] = 0;
     682:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <Directory+0x3>
     686:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <Directory+0x2>
								position = 0;
     68a:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <position+0x1>
     68e:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <position>
     692:	7f c0       	rjmp	.+254    	; 0x792 <main+0x2c6>
							}
							else position++;
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <position+0x1>
     69a:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <position>
     69e:	79 c0       	rjmp	.+242    	; 0x792 <main+0x2c6>
						}
							
						else if (button == 2) {
     6a0:	82 30       	cpi	r24, 0x02	; 2
     6a2:	91 05       	cpc	r25, r1
     6a4:	99 f5       	brne	.+102    	; 0x70c <main+0x240>
							updateTime(&clockHours, &clockMinutes, &clockSeconds, position, -1);
     6a6:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <position>
     6aa:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <position+0x1>
     6ae:	0f ef       	ldi	r16, 0xFF	; 255
     6b0:	1f ef       	ldi	r17, 0xFF	; 255
     6b2:	45 e4       	ldi	r20, 0x45	; 69
     6b4:	52 e0       	ldi	r21, 0x02	; 2
     6b6:	67 e4       	ldi	r22, 0x47	; 71
     6b8:	72 e0       	ldi	r23, 0x02	; 2
     6ba:	89 e4       	ldi	r24, 0x49	; 73
     6bc:	92 e0       	ldi	r25, 0x02	; 2
     6be:	0e 94 43 01 	call	0x286	; 0x286 <updateTime>
							sprintf(timeString, "%02d:%02d:%02d", clockHours, clockMinutes, clockSeconds); // temp position
     6c2:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <clockSeconds+0x1>
     6c6:	8f 93       	push	r24
     6c8:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <clockSeconds>
     6cc:	8f 93       	push	r24
     6ce:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <clockMinutes+0x1>
     6d2:	8f 93       	push	r24
     6d4:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <clockMinutes>
     6d8:	8f 93       	push	r24
     6da:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <clockHours+0x1>
     6de:	8f 93       	push	r24
     6e0:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <clockHours>
     6e4:	8f 93       	push	r24
     6e6:	81 e4       	ldi	r24, 0x41	; 65
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	9f 93       	push	r25
     6ec:	8f 93       	push	r24
     6ee:	8a e6       	ldi	r24, 0x6A	; 106
     6f0:	92 e0       	ldi	r25, 0x02	; 2
     6f2:	9f 93       	push	r25
     6f4:	8f 93       	push	r24
     6f6:	0e 94 14 09 	call	0x1228	; 0x1228 <sprintf>
     6fa:	8d b7       	in	r24, 0x3d	; 61
     6fc:	9e b7       	in	r25, 0x3e	; 62
     6fe:	0a 96       	adiw	r24, 0x0a	; 10
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	f8 94       	cli
     704:	9e bf       	out	0x3e, r25	; 62
     706:	0f be       	out	0x3f, r0	; 63
     708:	8d bf       	out	0x3d, r24	; 61
     70a:	43 c0       	rjmp	.+134    	; 0x792 <main+0x2c6>
						}
						else if (button == 3) {
     70c:	83 30       	cpi	r24, 0x03	; 3
     70e:	91 05       	cpc	r25, r1
     710:	99 f5       	brne	.+102    	; 0x778 <main+0x2ac>
							updateTime(&clockHours, &clockMinutes, &clockSeconds, position, +1);
     712:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <position>
     716:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <position+0x1>
     71a:	01 e0       	ldi	r16, 0x01	; 1
     71c:	10 e0       	ldi	r17, 0x00	; 0
     71e:	45 e4       	ldi	r20, 0x45	; 69
     720:	52 e0       	ldi	r21, 0x02	; 2
     722:	67 e4       	ldi	r22, 0x47	; 71
     724:	72 e0       	ldi	r23, 0x02	; 2
     726:	89 e4       	ldi	r24, 0x49	; 73
     728:	92 e0       	ldi	r25, 0x02	; 2
     72a:	0e 94 43 01 	call	0x286	; 0x286 <updateTime>
							sprintf(timeString, "%02d:%02d:%02d", clockHours, clockMinutes, clockSeconds); // temp position
     72e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <clockSeconds+0x1>
     732:	8f 93       	push	r24
     734:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <clockSeconds>
     738:	8f 93       	push	r24
     73a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <clockMinutes+0x1>
     73e:	8f 93       	push	r24
     740:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <clockMinutes>
     744:	8f 93       	push	r24
     746:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <clockHours+0x1>
     74a:	8f 93       	push	r24
     74c:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <clockHours>
     750:	8f 93       	push	r24
     752:	81 e4       	ldi	r24, 0x41	; 65
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	9f 93       	push	r25
     758:	8f 93       	push	r24
     75a:	8a e6       	ldi	r24, 0x6A	; 106
     75c:	92 e0       	ldi	r25, 0x02	; 2
     75e:	9f 93       	push	r25
     760:	8f 93       	push	r24
     762:	0e 94 14 09 	call	0x1228	; 0x1228 <sprintf>
     766:	8d b7       	in	r24, 0x3d	; 61
     768:	9e b7       	in	r25, 0x3e	; 62
     76a:	0a 96       	adiw	r24, 0x0a	; 10
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	9e bf       	out	0x3e, r25	; 62
     772:	0f be       	out	0x3f, r0	; 63
     774:	8d bf       	out	0x3d, r24	; 61
     776:	0d c0       	rjmp	.+26     	; 0x792 <main+0x2c6>
						}
						else if (button == 4) {
     778:	04 97       	sbiw	r24, 0x04	; 4
     77a:	59 f4       	brne	.+22     	; 0x792 <main+0x2c6>
							Directory[1] = 0;
     77c:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <Directory+0x3>
     780:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <Directory+0x2>
							position = 0;
     784:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <position+0x1>
     788:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <position>
							toDisplay = true;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <toDisplay>
						} 
						
						//temp[0] = timeString[position+position/2];
						sendString_XY(1,4+(position*3),"__");
     792:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <position>
     796:	68 2f       	mov	r22, r24
     798:	66 0f       	add	r22, r22
     79a:	68 0f       	add	r22, r24
     79c:	6c 5f       	subi	r22, 0xFC	; 252
     79e:	42 e7       	ldi	r20, 0x72	; 114
     7a0:	51 e0       	ldi	r21, 0x01	; 1
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
						temp[0] = timeString[position*3];
     7a8:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <position>
     7ac:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <position+0x1>
     7b0:	9c 01       	movw	r18, r24
     7b2:	22 0f       	add	r18, r18
     7b4:	33 1f       	adc	r19, r19
     7b6:	28 0f       	add	r18, r24
     7b8:	39 1f       	adc	r19, r25
     7ba:	f9 01       	movw	r30, r18
     7bc:	e6 59       	subi	r30, 0x96	; 150
     7be:	fd 4f       	sbci	r31, 0xFD	; 253
     7c0:	90 81       	ld	r25, Z
     7c2:	e5 e6       	ldi	r30, 0x65	; 101
     7c4:	f2 e0       	ldi	r31, 0x02	; 2
     7c6:	90 83       	st	Z, r25
						temp[1] = timeString[position*3 + 1];
     7c8:	d9 01       	movw	r26, r18
     7ca:	a5 59       	subi	r26, 0x95	; 149
     7cc:	bd 4f       	sbci	r27, 0xFD	; 253
     7ce:	9c 91       	ld	r25, X
     7d0:	91 83       	std	Z+1, r25	; 0x01
						sendString_XY(1,4+(position*3),temp);// note working this section
     7d2:	68 2f       	mov	r22, r24
     7d4:	66 0f       	add	r22, r22
     7d6:	68 0f       	add	r22, r24
     7d8:	6c 5f       	subi	r22, 0xFC	; 252
     7da:	af 01       	movw	r20, r30
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
						break;
     7e2:	f0 c4       	rjmp	.+2528   	; 0x11c4 <__stack+0x8c5>
				
				}
				break;
				
			case 2:
				switch(Directory[1]){
     7e4:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <Directory+0x2>
     7e8:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <Directory+0x3>
     7ec:	00 97       	sbiw	r24, 0x00	; 0
     7ee:	21 f0       	breq	.+8      	; 0x7f8 <main+0x32c>
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <main+0x32a>
     7f4:	41 c0       	rjmp	.+130    	; 0x878 <__DATA_REGION_LENGTH__+0x78>
     7f6:	e6 c4       	rjmp	.+2508   	; 0x11c4 <__stack+0x8c5>
					case 0:
						if (toDisplay){
     7f8:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <toDisplay>
     7fc:	88 23       	and	r24, r24
     7fe:	81 f0       	breq	.+32     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
							clearDisplay();
     800:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
							sendString_XY(0,4,"SETTINGS");
     804:	44 ed       	ldi	r20, 0xD4	; 212
     806:	51 e0       	ldi	r21, 0x01	; 1
     808:	64 e0       	ldi	r22, 0x04	; 4
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
							sendString_XY(1,0, "2.ALARM SETTINGS");
     810:	45 e7       	ldi	r20, 0x75	; 117
     812:	51 e0       	ldi	r21, 0x01	; 1
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
							toDisplay = false;
     81c:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <toDisplay>
						}
						
						if (button == 1){
     820:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <button>
     824:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <button+0x1>
     828:	81 30       	cpi	r24, 0x01	; 1
     82a:	91 05       	cpc	r25, r1
     82c:	61 f4       	brne	.+24     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
							Directory[1] = 1;
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <Directory+0x3>
     836:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <Directory+0x2>
							clearDisplay();
     83a:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
							toDisplay = true;
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <toDisplay>
     844:	bf c4       	rjmp	.+2430   	; 0x11c4 <__stack+0x8c5>
						}
						
						else if (button == 2) {
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	91 05       	cpc	r25, r1
     84a:	51 f4       	brne	.+20     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
							Directory[0] = 3;
     84c:	83 e0       	ldi	r24, 0x03	; 3
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <Directory+0x1>
     854:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <Directory>
							toDisplay = true;
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <toDisplay>
     85e:	b2 c4       	rjmp	.+2404   	; 0x11c4 <__stack+0x8c5>
						}
						else if (button == 3) {
     860:	03 97       	sbiw	r24, 0x03	; 3
     862:	09 f0       	breq	.+2      	; 0x866 <__DATA_REGION_LENGTH__+0x66>
     864:	af c4       	rjmp	.+2398   	; 0x11c4 <__stack+0x8c5>
							Directory[0] = 1;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <Directory+0x1>
     86e:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <Directory>
							toDisplay = true;
     872:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <toDisplay>
     876:	a6 c4       	rjmp	.+2380   	; 0x11c4 <__stack+0x8c5>
						}
						break;
					
					case 1:
						switch(Directory[2]){
     878:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <Directory+0x4>
     87c:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <Directory+0x5>
     880:	81 30       	cpi	r24, 0x01	; 1
     882:	91 05       	cpc	r25, r1
     884:	09 f4       	brne	.+2      	; 0x888 <__DATA_REGION_LENGTH__+0x88>
     886:	bf c0       	rjmp	.+382    	; 0xa06 <__stack+0x107>
     888:	1c f4       	brge	.+6      	; 0x890 <__DATA_REGION_LENGTH__+0x90>
     88a:	89 2b       	or	r24, r25
     88c:	49 f0       	breq	.+18     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     88e:	9a c4       	rjmp	.+2356   	; 0x11c4 <__stack+0x8c5>
     890:	82 30       	cpi	r24, 0x02	; 2
     892:	91 05       	cpc	r25, r1
     894:	09 f4       	brne	.+2      	; 0x898 <__DATA_REGION_LENGTH__+0x98>
     896:	cb c0       	rjmp	.+406    	; 0xa2e <__stack+0x12f>
     898:	03 97       	sbiw	r24, 0x03	; 3
     89a:	09 f4       	brne	.+2      	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
     89c:	7a c1       	rjmp	.+756    	; 0xb92 <__stack+0x293>
     89e:	92 c4       	rjmp	.+2340   	; 0x11c4 <__stack+0x8c5>
							case 0:
							
								if(toDisplay){
     8a0:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <toDisplay>
     8a4:	88 23       	and	r24, r24
     8a6:	a1 f0       	breq	.+40     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
									sendString_XY(0,0,"1:VIEW 2:CLR");
     8a8:	46 e8       	ldi	r20, 0x86	; 134
     8aa:	51 e0       	ldi	r21, 0x01	; 1
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
									sendString_XY(1,0,"3.CHNG ENTER:");
     8b4:	43 e9       	ldi	r20, 0x93	; 147
     8b6:	51 e0       	ldi	r21, 0x01	; 1
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
									sendString_XY(1,13,alarmMenu);
     8c0:	42 e0       	ldi	r20, 0x02	; 2
     8c2:	51 e0       	ldi	r21, 0x01	; 1
     8c4:	6d e0       	ldi	r22, 0x0D	; 13
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
									toDisplay = false;									
     8cc:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <toDisplay>
								}
							
								if (button == 1){
     8d0:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <button>
     8d4:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <button+0x1>
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	91 05       	cpc	r25, r1
     8dc:	31 f5       	brne	.+76     	; 0x92a <__stack+0x2b>
									if (alarmSelection == 1) Directory[2] = 1;
     8de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     8e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	91 05       	cpc	r25, r1
     8ea:	39 f4       	brne	.+14     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <Directory+0x5>
     8f4:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <Directory+0x4>
     8f8:	12 c0       	rjmp	.+36     	; 0x91e <__stack+0x1f>
									else if (alarmSelection == 2) Directory[2] = 2;
     8fa:	82 30       	cpi	r24, 0x02	; 2
     8fc:	91 05       	cpc	r25, r1
     8fe:	39 f4       	brne	.+14     	; 0x90e <__stack+0xf>
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <Directory+0x5>
     908:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <Directory+0x4>
     90c:	08 c0       	rjmp	.+16     	; 0x91e <__stack+0x1f>
									else if (alarmSelection == 3) Directory[2] = 3;
     90e:	03 97       	sbiw	r24, 0x03	; 3
     910:	31 f4       	brne	.+12     	; 0x91e <__stack+0x1f>
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <Directory+0x5>
     91a:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <Directory+0x4>
									clearDisplay();
     91e:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
									toDisplay = true;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <toDisplay>
     928:	4d c4       	rjmp	.+2202   	; 0x11c4 <__stack+0x8c5>
								}
								
								else if (button == 2){
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	91 05       	cpc	r25, r1
     92e:	79 f5       	brne	.+94     	; 0x98e <__stack+0x8f>
									alarmSelection -= 1;
     930:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     934:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     93e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
									if (alarmSelection<1) alarmSelection = 1;
     942:	18 16       	cp	r1, r24
     944:	19 06       	cpc	r1, r25
     946:	34 f0       	brlt	.+12     	; 0x954 <__stack+0x55>
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     950:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
									sprintf(alarmMenu,"%d",alarmSelection);
     954:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     958:	8f 93       	push	r24
     95a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     95e:	8f 93       	push	r24
     960:	81 ea       	ldi	r24, 0xA1	; 161
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	9f 93       	push	r25
     966:	8f 93       	push	r24
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	9f 93       	push	r25
     96e:	8f 93       	push	r24
     970:	0e 94 14 09 	call	0x1228	; 0x1228 <sprintf>
									sendString_XY(1,13,alarmMenu);
     974:	42 e0       	ldi	r20, 0x02	; 2
     976:	51 e0       	ldi	r21, 0x01	; 1
     978:	6d e0       	ldi	r22, 0x0D	; 13
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	1b c4       	rjmp	.+2102   	; 0x11c4 <__stack+0x8c5>
								}
								
								else if (button == 3){
     98e:	83 30       	cpi	r24, 0x03	; 3
     990:	91 05       	cpc	r25, r1
     992:	71 f5       	brne	.+92     	; 0x9f0 <__stack+0xf1>
									alarmSelection += 1;
     994:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     998:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     9a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
									if (alarmSelection>3) alarmSelection = 3;
     9a6:	04 97       	sbiw	r24, 0x04	; 4
     9a8:	34 f0       	brlt	.+12     	; 0x9b6 <__stack+0xb7>
     9aa:	83 e0       	ldi	r24, 0x03	; 3
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     9b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
									sprintf(alarmMenu,"%d",alarmSelection);
     9b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     9ba:	8f 93       	push	r24
     9bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     9c0:	8f 93       	push	r24
     9c2:	81 ea       	ldi	r24, 0xA1	; 161
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	9f 93       	push	r25
     9c8:	8f 93       	push	r24
     9ca:	82 e0       	ldi	r24, 0x02	; 2
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	9f 93       	push	r25
     9d0:	8f 93       	push	r24
     9d2:	0e 94 14 09 	call	0x1228	; 0x1228 <sprintf>
									sendString_XY(1,13,alarmMenu);
     9d6:	42 e0       	ldi	r20, 0x02	; 2
     9d8:	51 e0       	ldi	r21, 0x01	; 1
     9da:	6d e0       	ldi	r22, 0x0D	; 13
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	ea c3       	rjmp	.+2004   	; 0x11c4 <__stack+0x8c5>
									
								}
								
								else if (button == 4){
     9f0:	04 97       	sbiw	r24, 0x04	; 4
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <__stack+0xf7>
     9f4:	e7 c3       	rjmp	.+1998   	; 0x11c4 <__stack+0x8c5>
									toDisplay = true;
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <toDisplay>
									Directory[1]=0;
     9fc:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <Directory+0x3>
     a00:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <Directory+0x2>
     a04:	df c3       	rjmp	.+1982   	; 0x11c4 <__stack+0x8c5>
								}
								
								break;
								
							case 1:
								if (toDisplay){
     a06:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <toDisplay>
     a0a:	88 23       	and	r24, r24
     a0c:	21 f0       	breq	.+8      	; 0xa16 <__stack+0x117>
									viewAlarms();
     a0e:	0e 94 ef 01 	call	0x3de	; 0x3de <viewAlarms>
									toDisplay = false;
     a12:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <toDisplay>
								}
								
								if (button==4) {
     a16:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <button>
     a1a:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <button+0x1>
     a1e:	04 97       	sbiw	r24, 0x04	; 4
     a20:	09 f0       	breq	.+2      	; 0xa24 <__stack+0x125>
     a22:	d0 c3       	rjmp	.+1952   	; 0x11c4 <__stack+0x8c5>
									Directory[2]=0;
     a24:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <Directory+0x5>
     a28:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <Directory+0x4>
     a2c:	cb c3       	rjmp	.+1942   	; 0x11c4 <__stack+0x8c5>
								}
								break;
								
							case 2:
								if (toDisplay){
     a2e:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <toDisplay>
     a32:	88 23       	and	r24, r24
     a34:	51 f0       	breq	.+20     	; 0xa4a <__stack+0x14b>
									clearDisplay();
     a36:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
									sendString_XY(0,0,"ENTER ALARM:");
     a3a:	44 ea       	ldi	r20, 0xA4	; 164
     a3c:	51 e0       	ldi	r21, 0x01	; 1
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
									toDisplay = false;
     a46:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <toDisplay>
								}
								
								if ((button == 1) && (alarmNo>= 0)){
     a4a:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <button>
     a4e:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <button+0x1>
     a52:	81 30       	cpi	r24, 0x01	; 1
     a54:	91 05       	cpc	r25, r1
     a56:	59 f5       	brne	.+86     	; 0xaae <__stack+0x1af>
     a58:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <alarmNo>
     a5c:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <alarmNo+0x1>
     a60:	33 23       	and	r19, r19
     a62:	2c f1       	brlt	.+74     	; 0xaae <__stack+0x1af>
										alarmState[alarmNo] = false;
     a64:	f9 01       	movw	r30, r18
     a66:	e8 5c       	subi	r30, 0xC8	; 200
     a68:	fd 4f       	sbci	r31, 0xFD	; 253
     a6a:	10 82       	st	Z, r1
										alarmNo = -1;
     a6c:	8f ef       	ldi	r24, 0xFF	; 255
     a6e:	9f ef       	ldi	r25, 0xFF	; 255
     a70:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <alarmNo+0x1>
     a74:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alarmNo>
										clearDisplay();
     a78:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
										sendString_XY(0,0,"ALARM CLEARED");
     a7c:	41 eb       	ldi	r20, 0xB1	; 177
     a7e:	51 e0       	ldi	r21, 0x01	; 1
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
     a88:	9f ef       	ldi	r25, 0xFF	; 255
     a8a:	20 e7       	ldi	r18, 0x70	; 112
     a8c:	82 e0       	ldi	r24, 0x02	; 2
     a8e:	91 50       	subi	r25, 0x01	; 1
     a90:	20 40       	sbci	r18, 0x00	; 0
     a92:	80 40       	sbci	r24, 0x00	; 0
     a94:	e1 f7       	brne	.-8      	; 0xa8e <__stack+0x18f>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <__stack+0x199>
     a98:	00 00       	nop
										_delay_ms(100);
										Directory[2] = 0;
     a9a:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <Directory+0x5>
     a9e:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <Directory+0x4>
										toDisplay = true;
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <toDisplay>
										clearDisplay();
     aa8:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
     aac:	8b c3       	rjmp	.+1814   	; 0x11c4 <__stack+0x8c5>
									}
									
								else if (button == 2){
     aae:	82 30       	cpi	r24, 0x02	; 2
     ab0:	91 05       	cpc	r25, r1
     ab2:	69 f5       	brne	.+90     	; 0xb0e <__stack+0x20f>
									alarmNo -=1;
     ab4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmNo>
     ab8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <alarmNo+0x1>
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <alarmNo+0x1>
     ac2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alarmNo>
									if (alarmNo<0) alarmNo = 0;
     ac6:	99 23       	and	r25, r25
     ac8:	24 f4       	brge	.+8      	; 0xad2 <__stack+0x1d3>
     aca:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <alarmNo+0x1>
     ace:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <alarmNo>
									sprintf(alarmMenu,"%d", alarmNo+1);
     ad2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmNo>
     ad6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <alarmNo+0x1>
     ada:	01 96       	adiw	r24, 0x01	; 1
     adc:	9f 93       	push	r25
     ade:	8f 93       	push	r24
     ae0:	81 ea       	ldi	r24, 0xA1	; 161
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	9f 93       	push	r25
     ae6:	8f 93       	push	r24
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	9f 93       	push	r25
     aee:	8f 93       	push	r24
     af0:	0e 94 14 09 	call	0x1228	; 0x1228 <sprintf>
									sendString_XY(0,12,alarmMenu);
     af4:	42 e0       	ldi	r20, 0x02	; 2
     af6:	51 e0       	ldi	r21, 0x01	; 1
     af8:	6c e0       	ldi	r22, 0x0C	; 12
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	5b c3       	rjmp	.+1718   	; 0x11c4 <__stack+0x8c5>
								}
								else if (button == 3){
     b0e:	83 30       	cpi	r24, 0x03	; 3
     b10:	91 05       	cpc	r25, r1
     b12:	79 f5       	brne	.+94     	; 0xb72 <__stack+0x273>
									alarmNo +=1;
     b14:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmNo>
     b18:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <alarmNo+0x1>
     b1c:	01 96       	adiw	r24, 0x01	; 1
     b1e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <alarmNo+0x1>
     b22:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alarmNo>
									if (alarmNo>3) alarmNo = 3;									
     b26:	04 97       	sbiw	r24, 0x04	; 4
     b28:	34 f0       	brlt	.+12     	; 0xb36 <__stack+0x237>
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <alarmNo+0x1>
     b32:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alarmNo>
									sprintf(alarmMenu, "%d", alarmNo+1);
     b36:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmNo>
     b3a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <alarmNo+0x1>
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	9f 93       	push	r25
     b42:	8f 93       	push	r24
     b44:	81 ea       	ldi	r24, 0xA1	; 161
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	9f 93       	push	r25
     b4a:	8f 93       	push	r24
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	9f 93       	push	r25
     b52:	8f 93       	push	r24
     b54:	0e 94 14 09 	call	0x1228	; 0x1228 <sprintf>
									sendString_XY(0,12,alarmMenu);
     b58:	42 e0       	ldi	r20, 0x02	; 2
     b5a:	51 e0       	ldi	r21, 0x01	; 1
     b5c:	6c e0       	ldi	r22, 0x0C	; 12
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	0f 90       	pop	r0
     b70:	29 c3       	rjmp	.+1618   	; 0x11c4 <__stack+0x8c5>
								}
								else if (button == 4){
     b72:	04 97       	sbiw	r24, 0x04	; 4
     b74:	09 f0       	breq	.+2      	; 0xb78 <__stack+0x279>
     b76:	26 c3       	rjmp	.+1612   	; 0x11c4 <__stack+0x8c5>
									clearDisplay();
     b78:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
									toDisplay = true;
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <toDisplay>
									Directory[2] = 0;
     b82:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <Directory+0x5>
     b86:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <Directory+0x4>
									alarmMenu[0] = '1';
     b8a:	81 e3       	ldi	r24, 0x31	; 49
     b8c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <alarmMenu>
     b90:	19 c3       	rjmp	.+1586   	; 0x11c4 <__stack+0x8c5>
								}
								
								break;
								
							case 3://Hard part
								if (toDisplay){
     b92:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <toDisplay>
     b96:	88 23       	and	r24, r24
     b98:	71 f0       	breq	.+28     	; 0xbb6 <__stack+0x2b7>
									clearDisplay();
     b9a:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
									sendString_XY(0,0,"ENTER ALARM:");
     b9e:	44 ea       	ldi	r20, 0xA4	; 164
     ba0:	51 e0       	ldi	r21, 0x01	; 1
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
									toDisplay = false;
     baa:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <toDisplay>
									alarmNo = 0;
     bae:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <alarmNo+0x1>
     bb2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <alarmNo>
								}
								
								if (button == 1){
     bb6:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <button>
     bba:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <button+0x1>
     bbe:	81 30       	cpi	r24, 0x01	; 1
     bc0:	91 05       	cpc	r25, r1
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <__stack+0x2c7>
     bc4:	88 c0       	rjmp	.+272    	; 0xcd6 <__stack+0x3d7>
									if (alarmReset){
     bc6:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <alarmReset>
     bca:	88 23       	and	r24, r24
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <__stack+0x2d1>
     bce:	5b c0       	rjmp	.+182    	; 0xc86 <__stack+0x387>
										if (position == 1) {
     bd0:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <position>
     bd4:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <position+0x1>
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	91 05       	cpc	r25, r1
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <__stack+0x2e1>
     bde:	4d c0       	rjmp	.+154    	; 0xc7a <__stack+0x37b>
											alarmState[alarmNo] = true;
     be0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmNo>
     be4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <alarmNo+0x1>
     be8:	fc 01       	movw	r30, r24
     bea:	e8 5c       	subi	r30, 0xC8	; 200
     bec:	fd 4f       	sbci	r31, 0xFD	; 253
     bee:	c1 e0       	ldi	r28, 0x01	; 1
     bf0:	c0 83       	st	Z, r28
											alarmArray[alarmNo][0] = tempHours;
     bf2:	fc 01       	movw	r30, r24
     bf4:	ee 0f       	add	r30, r30
     bf6:	ff 1f       	adc	r31, r31
     bf8:	df 01       	movw	r26, r30
     bfa:	a8 0f       	add	r26, r24
     bfc:	b9 1f       	adc	r27, r25
     bfe:	aa 0f       	add	r26, r26
     c00:	bb 1f       	adc	r27, r27
     c02:	a5 5b       	subi	r26, 0xB5	; 181
     c04:	bd 4f       	sbci	r27, 0xFD	; 253
     c06:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <tempHours>
     c0a:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <tempHours+0x1>
     c0e:	11 96       	adiw	r26, 0x01	; 1
     c10:	3c 93       	st	X, r19
     c12:	2e 93       	st	-X, r18
											alarmArray[alarmNo][1] = tempMinutes;
     c14:	fd 01       	movw	r30, r26
     c16:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <tempMinutes>
     c1a:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <tempMinutes+0x1>
     c1e:	93 83       	std	Z+3, r25	; 0x03
     c20:	82 83       	std	Z+2, r24	; 0x02
											alarmReset = false;
     c22:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <alarmReset>
											clearDisplay();
     c26:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
											sendString_XY(0,0,"ALARM CHANGED");
     c2a:	4f eb       	ldi	r20, 0xBF	; 191
     c2c:	51 e0       	ldi	r21, 0x01	; 1
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
     c36:	9f ef       	ldi	r25, 0xFF	; 255
     c38:	20 e7       	ldi	r18, 0x70	; 112
     c3a:	82 e0       	ldi	r24, 0x02	; 2
     c3c:	91 50       	subi	r25, 0x01	; 1
     c3e:	20 40       	sbci	r18, 0x00	; 0
     c40:	80 40       	sbci	r24, 0x00	; 0
     c42:	e1 f7       	brne	.-8      	; 0xc3c <__stack+0x33d>
     c44:	00 c0       	rjmp	.+0      	; 0xc46 <__stack+0x347>
     c46:	00 00       	nop
											_delay_ms(100);
											toDisplay = true;
     c48:	c0 93 3e 02 	sts	0x023E, r28	; 0x80023e <toDisplay>
											clearDisplay();
     c4c:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
											position = 0;
     c50:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <position+0x1>
     c54:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <position>
											tempHours = 0;
     c58:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <tempHours+0x1>
     c5c:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <tempHours>
											tempMinutes = 0;
     c60:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <tempMinutes+0x1>
     c64:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <tempMinutes>
											tempSeconds = 0;	
     c68:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <tempSeconds+0x1>
     c6c:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <tempSeconds>
											Directory[2] = 0;																					
     c70:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <Directory+0x5>
     c74:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <Directory+0x4>
     c78:	fd c0       	rjmp	.+506    	; 0xe74 <__stack+0x575>
										}
										
										else {
											position ++;
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <position+0x1>
     c80:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <position>
     c84:	f7 c0       	rjmp	.+494    	; 0xe74 <__stack+0x575>
										}
									}
									
									else{
										alarmReset = true;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <alarmReset>
										sprintf(alarmString, "%02d:%02d", tempHours, tempMinutes);
     c8c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <tempMinutes+0x1>
     c90:	8f 93       	push	r24
     c92:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <tempMinutes>
     c96:	8f 93       	push	r24
     c98:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <tempHours+0x1>
     c9c:	8f 93       	push	r24
     c9e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <tempHours>
     ca2:	8f 93       	push	r24
     ca4:	86 e4       	ldi	r24, 0x46	; 70
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	9f 93       	push	r25
     caa:	8f 93       	push	r24
     cac:	85 e9       	ldi	r24, 0x95	; 149
     cae:	92 e0       	ldi	r25, 0x02	; 2
     cb0:	9f 93       	push	r25
     cb2:	8f 93       	push	r24
     cb4:	0e 94 14 09 	call	0x1228	; 0x1228 <sprintf>
										sendString_XY(1,4,alarmString);
     cb8:	45 e9       	ldi	r20, 0x95	; 149
     cba:	52 e0       	ldi	r21, 0x02	; 2
     cbc:	64 e0       	ldi	r22, 0x04	; 4
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
     cc4:	8d b7       	in	r24, 0x3d	; 61
     cc6:	9e b7       	in	r25, 0x3e	; 62
     cc8:	08 96       	adiw	r24, 0x08	; 8
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	9e bf       	out	0x3e, r25	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	8d bf       	out	0x3d, r24	; 61
     cd4:	cf c0       	rjmp	.+414    	; 0xe74 <__stack+0x575>
									}
								}
								
								else if (button == 2){
     cd6:	82 30       	cpi	r24, 0x02	; 2
     cd8:	91 05       	cpc	r25, r1
     cda:	09 f0       	breq	.+2      	; 0xcde <__stack+0x3df>
     cdc:	5e c0       	rjmp	.+188    	; 0xd9a <__stack+0x49b>
									if (alarmReset){
     cde:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <alarmReset>
     ce2:	88 23       	and	r24, r24
     ce4:	69 f1       	breq	.+90     	; 0xd40 <__stack+0x441>
										updateTime(&tempHours, &tempMinutes, &tempSeconds, position, -1);
     ce6:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <position>
     cea:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <position+0x1>
     cee:	0f ef       	ldi	r16, 0xFF	; 255
     cf0:	1f ef       	ldi	r17, 0xFF	; 255
     cf2:	4f e3       	ldi	r20, 0x3F	; 63
     cf4:	52 e0       	ldi	r21, 0x02	; 2
     cf6:	61 e4       	ldi	r22, 0x41	; 65
     cf8:	72 e0       	ldi	r23, 0x02	; 2
     cfa:	83 e4       	ldi	r24, 0x43	; 67
     cfc:	92 e0       	ldi	r25, 0x02	; 2
     cfe:	0e 94 43 01 	call	0x286	; 0x286 <updateTime>
										sprintf(alarmString, "%02d:%02d", tempHours, tempMinutes);	
     d02:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <tempMinutes+0x1>
     d06:	8f 93       	push	r24
     d08:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <tempMinutes>
     d0c:	8f 93       	push	r24
     d0e:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <tempHours+0x1>
     d12:	8f 93       	push	r24
     d14:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <tempHours>
     d18:	8f 93       	push	r24
     d1a:	86 e4       	ldi	r24, 0x46	; 70
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	9f 93       	push	r25
     d20:	8f 93       	push	r24
     d22:	85 e9       	ldi	r24, 0x95	; 149
     d24:	92 e0       	ldi	r25, 0x02	; 2
     d26:	9f 93       	push	r25
     d28:	8f 93       	push	r24
     d2a:	0e 94 14 09 	call	0x1228	; 0x1228 <sprintf>
     d2e:	8d b7       	in	r24, 0x3d	; 61
     d30:	9e b7       	in	r25, 0x3e	; 62
     d32:	08 96       	adiw	r24, 0x08	; 8
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	9e bf       	out	0x3e, r25	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	8d bf       	out	0x3d, r24	; 61
     d3e:	9a c0       	rjmp	.+308    	; 0xe74 <__stack+0x575>
																		
									}
									else{
										alarmNo -=1;
     d40:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmNo>
     d44:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <alarmNo+0x1>
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <alarmNo+0x1>
     d4e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alarmNo>
										if (alarmNo<0) alarmNo = 0;
     d52:	99 23       	and	r25, r25
     d54:	24 f4       	brge	.+8      	; 0xd5e <__stack+0x45f>
     d56:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <alarmNo+0x1>
     d5a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <alarmNo>
										sprintf(alarmChange,"%d", alarmNo+1);
     d5e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmNo>
     d62:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <alarmNo+0x1>
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	9f 93       	push	r25
     d6a:	8f 93       	push	r24
     d6c:	81 ea       	ldi	r24, 0xA1	; 161
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	9f 93       	push	r25
     d72:	8f 93       	push	r24
     d74:	83 e6       	ldi	r24, 0x63	; 99
     d76:	92 e0       	ldi	r25, 0x02	; 2
     d78:	9f 93       	push	r25
     d7a:	8f 93       	push	r24
     d7c:	0e 94 14 09 	call	0x1228	; 0x1228 <sprintf>
										sendString_XY(0,12,alarmChange);
     d80:	43 e6       	ldi	r20, 0x63	; 99
     d82:	52 e0       	ldi	r21, 0x02	; 2
     d84:	6c e0       	ldi	r22, 0x0C	; 12
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	6d c0       	rjmp	.+218    	; 0xe74 <__stack+0x575>
									}
								}
								
								else if (button == 3){
     d9a:	83 30       	cpi	r24, 0x03	; 3
     d9c:	91 05       	cpc	r25, r1
     d9e:	09 f0       	breq	.+2      	; 0xda2 <__stack+0x4a3>
     da0:	5c c0       	rjmp	.+184    	; 0xe5a <__stack+0x55b>
									if (alarmReset){
     da2:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <alarmReset>
     da6:	88 23       	and	r24, r24
     da8:	69 f1       	breq	.+90     	; 0xe04 <__stack+0x505>
										updateTime(&tempHours, &tempMinutes, &tempSeconds, position, +1);
     daa:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <position>
     dae:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <position+0x1>
     db2:	01 e0       	ldi	r16, 0x01	; 1
     db4:	10 e0       	ldi	r17, 0x00	; 0
     db6:	4f e3       	ldi	r20, 0x3F	; 63
     db8:	52 e0       	ldi	r21, 0x02	; 2
     dba:	61 e4       	ldi	r22, 0x41	; 65
     dbc:	72 e0       	ldi	r23, 0x02	; 2
     dbe:	83 e4       	ldi	r24, 0x43	; 67
     dc0:	92 e0       	ldi	r25, 0x02	; 2
     dc2:	0e 94 43 01 	call	0x286	; 0x286 <updateTime>
										sprintf(alarmString, "%02d:%02d", tempHours, tempMinutes);	
     dc6:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <tempMinutes+0x1>
     dca:	8f 93       	push	r24
     dcc:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <tempMinutes>
     dd0:	8f 93       	push	r24
     dd2:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <tempHours+0x1>
     dd6:	8f 93       	push	r24
     dd8:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <tempHours>
     ddc:	8f 93       	push	r24
     dde:	86 e4       	ldi	r24, 0x46	; 70
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	9f 93       	push	r25
     de4:	8f 93       	push	r24
     de6:	85 e9       	ldi	r24, 0x95	; 149
     de8:	92 e0       	ldi	r25, 0x02	; 2
     dea:	9f 93       	push	r25
     dec:	8f 93       	push	r24
     dee:	0e 94 14 09 	call	0x1228	; 0x1228 <sprintf>
     df2:	8d b7       	in	r24, 0x3d	; 61
     df4:	9e b7       	in	r25, 0x3e	; 62
     df6:	08 96       	adiw	r24, 0x08	; 8
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	9e bf       	out	0x3e, r25	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	8d bf       	out	0x3d, r24	; 61
     e02:	38 c0       	rjmp	.+112    	; 0xe74 <__stack+0x575>
									}
									else{
										alarmNo +=1;
     e04:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmNo>
     e08:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <alarmNo+0x1>
     e0c:	01 96       	adiw	r24, 0x01	; 1
										alarmNo %=4;
     e0e:	83 70       	andi	r24, 0x03	; 3
     e10:	90 78       	andi	r25, 0x80	; 128
     e12:	99 23       	and	r25, r25
     e14:	24 f4       	brge	.+8      	; 0xe1e <__stack+0x51f>
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	8c 6f       	ori	r24, 0xFC	; 252
     e1a:	9f 6f       	ori	r25, 0xFF	; 255
     e1c:	01 96       	adiw	r24, 0x01	; 1
     e1e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <alarmNo+0x1>
     e22:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alarmNo>
										sprintf(alarmChange,"%d", alarmNo+1);
     e26:	01 96       	adiw	r24, 0x01	; 1
     e28:	9f 93       	push	r25
     e2a:	8f 93       	push	r24
     e2c:	81 ea       	ldi	r24, 0xA1	; 161
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	9f 93       	push	r25
     e32:	8f 93       	push	r24
     e34:	83 e6       	ldi	r24, 0x63	; 99
     e36:	92 e0       	ldi	r25, 0x02	; 2
     e38:	9f 93       	push	r25
     e3a:	8f 93       	push	r24
     e3c:	0e 94 14 09 	call	0x1228	; 0x1228 <sprintf>
										sendString_XY(0,12,alarmChange);
     e40:	43 e6       	ldi	r20, 0x63	; 99
     e42:	52 e0       	ldi	r21, 0x02	; 2
     e44:	6c e0       	ldi	r22, 0x0C	; 12
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0d c0       	rjmp	.+26     	; 0xe74 <__stack+0x575>
									}
								}
								
								else if (button == 4){
     e5a:	04 97       	sbiw	r24, 0x04	; 4
     e5c:	59 f4       	brne	.+22     	; 0xe74 <__stack+0x575>
									Directory[2] = 0;
     e5e:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <Directory+0x5>
     e62:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <Directory+0x4>
									position = 0;
     e66:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <position+0x1>
     e6a:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <position>
									toDisplay = true;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <toDisplay>
								}						
							
								sendString_XY(1,4+(position*3),"__");
     e74:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <position>
     e78:	68 2f       	mov	r22, r24
     e7a:	66 0f       	add	r22, r22
     e7c:	68 0f       	add	r22, r24
     e7e:	6c 5f       	subi	r22, 0xFC	; 252
     e80:	42 e7       	ldi	r20, 0x72	; 114
     e82:	51 e0       	ldi	r21, 0x01	; 1
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
								temp[0] = alarmString[position*3];
     e8a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <position>
     e8e:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <position+0x1>
     e92:	9c 01       	movw	r18, r24
     e94:	22 0f       	add	r18, r18
     e96:	33 1f       	adc	r19, r19
     e98:	28 0f       	add	r18, r24
     e9a:	39 1f       	adc	r19, r25
     e9c:	f9 01       	movw	r30, r18
     e9e:	eb 56       	subi	r30, 0x6B	; 107
     ea0:	fd 4f       	sbci	r31, 0xFD	; 253
     ea2:	90 81       	ld	r25, Z
     ea4:	e5 e6       	ldi	r30, 0x65	; 101
     ea6:	f2 e0       	ldi	r31, 0x02	; 2
     ea8:	90 83       	st	Z, r25
								temp[1] = alarmString[position*3 + 1];
     eaa:	d9 01       	movw	r26, r18
     eac:	aa 56       	subi	r26, 0x6A	; 106
     eae:	bd 4f       	sbci	r27, 0xFD	; 253
     eb0:	9c 91       	ld	r25, X
     eb2:	91 83       	std	Z+1, r25	; 0x01
								sendString_XY(1,4+(position*3),temp);// note working this section
     eb4:	68 2f       	mov	r22, r24
     eb6:	66 0f       	add	r22, r22
     eb8:	68 0f       	add	r22, r24
     eba:	6c 5f       	subi	r22, 0xFC	; 252
     ebc:	af 01       	movw	r20, r30
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
     ec4:	7f c1       	rjmp	.+766    	; 0x11c4 <__stack+0x8c5>
				}//end of default[1] switch
				
				break;
			
			case 3:
				switch(Directory[1]){
     ec6:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <Directory+0x2>
     eca:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <Directory+0x3>
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	21 f0       	breq	.+8      	; 0xeda <__stack+0x5db>
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	09 f4       	brne	.+2      	; 0xed8 <__stack+0x5d9>
     ed6:	62 c0       	rjmp	.+196    	; 0xf9c <__stack+0x69d>
     ed8:	75 c1       	rjmp	.+746    	; 0x11c4 <__stack+0x8c5>
					case 0: 
						if (toDisplay){
     eda:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <toDisplay>
     ede:	88 23       	and	r24, r24
     ee0:	81 f0       	breq	.+32     	; 0xf02 <__stack+0x603>
							clearDisplay();
     ee2:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
							sendString_XY(0,4,"SETTINGS");
     ee6:	44 ed       	ldi	r20, 0xD4	; 212
     ee8:	51 e0       	ldi	r21, 0x01	; 1
     eea:	64 e0       	ldi	r22, 0x04	; 4
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
							sendString_XY(1,0, "3.TONE SETTINGS");
     ef2:	4d ec       	ldi	r20, 0xCD	; 205
     ef4:	51 e0       	ldi	r21, 0x01	; 1
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
							toDisplay = false;
     efe:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <toDisplay>
						}
						
						if (button == 1){
     f02:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <button>
     f06:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <button+0x1>
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	91 05       	cpc	r25, r1
     f0e:	61 f5       	brne	.+88     	; 0xf68 <__stack+0x669>
							Directory[1] = 1;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <Directory+0x3>
     f18:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <Directory+0x2>
							clearDisplay();
     f1c:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
							sendString_XY(0,0,"ENTER TONE:");
     f20:	4d ed       	ldi	r20, 0xDD	; 221
     f22:	51 e0       	ldi	r21, 0x01	; 1
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
							sprintf(toneString, "%d", tone+1);
     f2c:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
     f30:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <__data_end+0x1>
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	9f 93       	push	r25
     f38:	8f 93       	push	r24
     f3a:	81 ea       	ldi	r24, 0xA1	; 161
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	9f 93       	push	r25
     f40:	8f 93       	push	r24
     f42:	80 ea       	ldi	r24, 0xA0	; 160
     f44:	92 e0       	ldi	r25, 0x02	; 2
     f46:	9f 93       	push	r25
     f48:	8f 93       	push	r24
     f4a:	0e 94 14 09 	call	0x1228	; 0x1228 <sprintf>
							sendString_XY(1,0,toneString);
     f4e:	40 ea       	ldi	r20, 0xA0	; 160
     f50:	52 e0       	ldi	r21, 0x02	; 2
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	2e c1       	rjmp	.+604    	; 0x11c4 <__stack+0x8c5>
						}
						
						else if (button == 2) {
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	91 05       	cpc	r25, r1
     f6c:	51 f4       	brne	.+20     	; 0xf82 <__stack+0x683>
							Directory[0] = 4;
     f6e:	84 e0       	ldi	r24, 0x04	; 4
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <Directory+0x1>
     f76:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <Directory>
							toDisplay = true;
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <toDisplay>
     f80:	21 c1       	rjmp	.+578    	; 0x11c4 <__stack+0x8c5>
						}
						
						else if (button == 3) {
     f82:	03 97       	sbiw	r24, 0x03	; 3
     f84:	09 f0       	breq	.+2      	; 0xf88 <__stack+0x689>
     f86:	1e c1       	rjmp	.+572    	; 0x11c4 <__stack+0x8c5>
							Directory[0] = 2;
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <Directory+0x1>
     f90:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <Directory>
							toDisplay = true;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <toDisplay>
     f9a:	14 c1       	rjmp	.+552    	; 0x11c4 <__stack+0x8c5>
						}
						
						break;
					
					case 1:
						if (button == 1){
     f9c:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <button>
     fa0:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <button+0x1>
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	91 05       	cpc	r25, r1
     fa8:	c9 f4       	brne	.+50     	; 0xfdc <__stack+0x6dd>
							clearDisplay();
     faa:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
							sendString_XY(0,1,"TONE CHANGED");
     fae:	49 ee       	ldi	r20, 0xE9	; 233
     fb0:	51 e0       	ldi	r21, 0x01	; 1
     fb2:	61 e0       	ldi	r22, 0x01	; 1
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
     fba:	9f ef       	ldi	r25, 0xFF	; 255
     fbc:	20 e7       	ldi	r18, 0x70	; 112
     fbe:	82 e0       	ldi	r24, 0x02	; 2
     fc0:	91 50       	subi	r25, 0x01	; 1
     fc2:	20 40       	sbci	r18, 0x00	; 0
     fc4:	80 40       	sbci	r24, 0x00	; 0
     fc6:	e1 f7       	brne	.-8      	; 0xfc0 <__stack+0x6c1>
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <__stack+0x6cb>
     fca:	00 00       	nop
							_delay_ms(100);
							toDisplay = true;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <toDisplay>
							Directory[1] = 0;
     fd2:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <Directory+0x3>
     fd6:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <Directory+0x2>
     fda:	f4 c0       	rjmp	.+488    	; 0x11c4 <__stack+0x8c5>
							
						}
						
						else if (button == 2){
     fdc:	82 30       	cpi	r24, 0x02	; 2
     fde:	91 05       	cpc	r25, r1
     fe0:	69 f5       	brne	.+90     	; 0x103c <__stack+0x73d>
							tone -= 1;
     fe2:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
     fe6:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <__data_end+0x1>
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <__data_end+0x1>
     ff0:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
							if (tone == -1) tone = 0;
     ff4:	01 96       	adiw	r24, 0x01	; 1
     ff6:	21 f4       	brne	.+8      	; 0x1000 <__stack+0x701>
     ff8:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <__data_end+0x1>
     ffc:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <__data_end>
							sprintf(toneString, "%d", tone+1);
    1000:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
    1004:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <__data_end+0x1>
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	9f 93       	push	r25
    100c:	8f 93       	push	r24
    100e:	81 ea       	ldi	r24, 0xA1	; 161
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	9f 93       	push	r25
    1014:	8f 93       	push	r24
    1016:	80 ea       	ldi	r24, 0xA0	; 160
    1018:	92 e0       	ldi	r25, 0x02	; 2
    101a:	9f 93       	push	r25
    101c:	8f 93       	push	r24
    101e:	0e 94 14 09 	call	0x1228	; 0x1228 <sprintf>
							sendString_XY(1,0,toneString);
    1022:	40 ea       	ldi	r20, 0xA0	; 160
    1024:	52 e0       	ldi	r21, 0x02	; 2
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	c4 c0       	rjmp	.+392    	; 0x11c4 <__stack+0x8c5>
							
						}
						
						else if (button == 3){
    103c:	03 97       	sbiw	r24, 0x03	; 3
    103e:	09 f0       	breq	.+2      	; 0x1042 <__stack+0x743>
    1040:	c1 c0       	rjmp	.+386    	; 0x11c4 <__stack+0x8c5>
							tone += 1;
    1042:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
    1046:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <__data_end+0x1>
    104a:	01 96       	adiw	r24, 0x01	; 1
							tone %= 2;
    104c:	81 70       	andi	r24, 0x01	; 1
    104e:	90 78       	andi	r25, 0x80	; 128
    1050:	99 23       	and	r25, r25
    1052:	24 f4       	brge	.+8      	; 0x105c <__stack+0x75d>
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	8e 6f       	ori	r24, 0xFE	; 254
    1058:	9f 6f       	ori	r25, 0xFF	; 255
    105a:	01 96       	adiw	r24, 0x01	; 1
    105c:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <__data_end+0x1>
    1060:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
							sprintf(toneString, "%d", tone+1);
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	9f 93       	push	r25
    1068:	8f 93       	push	r24
    106a:	81 ea       	ldi	r24, 0xA1	; 161
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	9f 93       	push	r25
    1070:	8f 93       	push	r24
    1072:	80 ea       	ldi	r24, 0xA0	; 160
    1074:	92 e0       	ldi	r25, 0x02	; 2
    1076:	9f 93       	push	r25
    1078:	8f 93       	push	r24
    107a:	0e 94 14 09 	call	0x1228	; 0x1228 <sprintf>
							sendString_XY(1,0,toneString);
    107e:	40 ea       	ldi	r20, 0xA0	; 160
    1080:	52 e0       	ldi	r21, 0x02	; 2
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	96 c0       	rjmp	.+300    	; 0x11c4 <__stack+0x8c5>
				}
				
				break;
				
			case 4:
				switch(Directory[1]){
    1098:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <Directory+0x2>
    109c:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <Directory+0x3>
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	19 f0       	breq	.+6      	; 0x10aa <__stack+0x7ab>
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	c1 f1       	breq	.+112    	; 0x1118 <__stack+0x819>
    10a8:	8d c0       	rjmp	.+282    	; 0x11c4 <__stack+0x8c5>
					case 0:
						if (toDisplay){
    10aa:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <toDisplay>
    10ae:	88 23       	and	r24, r24
    10b0:	81 f0       	breq	.+32     	; 0x10d2 <__stack+0x7d3>
							clearDisplay();
    10b2:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
							sendString_XY(0,4,"SETTINGS");
    10b6:	44 ed       	ldi	r20, 0xD4	; 212
    10b8:	51 e0       	ldi	r21, 0x01	; 1
    10ba:	64 e0       	ldi	r22, 0x04	; 4
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
							sendString_XY(1,0, "4.FACTORY RESET");
    10c2:	46 ef       	ldi	r20, 0xF6	; 246
    10c4:	51 e0       	ldi	r21, 0x01	; 1
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
							toDisplay = false;
    10ce:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <toDisplay>
						}
						
						if (button == 1){
    10d2:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <button>
    10d6:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <button+0x1>
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	91 05       	cpc	r25, r1
    10de:	79 f4       	brne	.+30     	; 0x10fe <__stack+0x7ff>
							Directory[1] = 1;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <Directory+0x3>
    10e8:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <Directory+0x2>
							clearDisplay();
    10ec:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
							sendString_XY(0,0,"CONFIRM:");
    10f0:	46 e0       	ldi	r20, 0x06	; 6
    10f2:	52 e0       	ldi	r21, 0x02	; 2
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
    10fc:	63 c0       	rjmp	.+198    	; 0x11c4 <__stack+0x8c5>
							
						}
						
						else if (button == 3) {
    10fe:	03 97       	sbiw	r24, 0x03	; 3
    1100:	09 f0       	breq	.+2      	; 0x1104 <__stack+0x805>
    1102:	60 c0       	rjmp	.+192    	; 0x11c4 <__stack+0x8c5>
							Directory[0] = 3;
    1104:	83 e0       	ldi	r24, 0x03	; 3
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <Directory+0x1>
    110c:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <Directory>
							toDisplay = true;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <toDisplay>
    1116:	56 c0       	rjmp	.+172    	; 0x11c4 <__stack+0x8c5>
						}
						break;
					
					case 1:
						if (button == 1){
    1118:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <button>
    111c:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <button+0x1>
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	91 05       	cpc	r25, r1
    1124:	c1 f5       	brne	.+112    	; 0x1196 <__stack+0x897>
							
							if (clockReset) {
    1126:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <clockReset>
    112a:	88 23       	and	r24, r24
    112c:	c9 f0       	breq	.+50     	; 0x1160 <__stack+0x861>
							clearDisplay();
    112e:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
							sendString_XY(0,0,"RESET SUCCESSFUL");
    1132:	4f e0       	ldi	r20, 0x0F	; 15
    1134:	52 e0       	ldi	r21, 0x02	; 2
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	90 e7       	ldi	r25, 0x70	; 112
    1142:	22 e0       	ldi	r18, 0x02	; 2
    1144:	81 50       	subi	r24, 0x01	; 1
    1146:	90 40       	sbci	r25, 0x00	; 0
    1148:	20 40       	sbci	r18, 0x00	; 0
    114a:	e1 f7       	brne	.-8      	; 0x1144 <__stack+0x845>
    114c:	00 c0       	rjmp	.+0      	; 0x114e <__stack+0x84f>
    114e:	00 00       	nop
							_delay_ms(100);
							toDisplay = true;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <toDisplay>
							Directory[1] = 0;
    1156:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <Directory+0x3>
    115a:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <Directory+0x2>
    115e:	32 c0       	rjmp	.+100    	; 0x11c4 <__stack+0x8c5>
							}
							
							else if (!clockReset) {
    1160:	81 11       	cpse	r24, r1
    1162:	30 c0       	rjmp	.+96     	; 0x11c4 <__stack+0x8c5>
							clearDisplay();
    1164:	0e 94 36 01 	call	0x26c	; 0x26c <clearDisplay>
							sendString_XY(0,0,"CANCELLED");
    1168:	40 e2       	ldi	r20, 0x20	; 32
    116a:	52 e0       	ldi	r21, 0x02	; 2
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
    1174:	8f ef       	ldi	r24, 0xFF	; 255
    1176:	90 e7       	ldi	r25, 0x70	; 112
    1178:	22 e0       	ldi	r18, 0x02	; 2
    117a:	81 50       	subi	r24, 0x01	; 1
    117c:	90 40       	sbci	r25, 0x00	; 0
    117e:	20 40       	sbci	r18, 0x00	; 0
    1180:	e1 f7       	brne	.-8      	; 0x117a <__stack+0x87b>
    1182:	00 c0       	rjmp	.+0      	; 0x1184 <__stack+0x885>
    1184:	00 00       	nop
							_delay_ms(100);
							toDisplay = true;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <toDisplay>
							Directory[1] = 0;								
    118c:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <Directory+0x3>
    1190:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <Directory+0x2>
    1194:	17 c0       	rjmp	.+46     	; 0x11c4 <__stack+0x8c5>
							}
						}
						
						else if (button == 2){
    1196:	82 30       	cpi	r24, 0x02	; 2
    1198:	91 05       	cpc	r25, r1
    119a:	51 f4       	brne	.+20     	; 0x11b0 <__stack+0x8b1>
							sendString_XY(1,0,"Y");
    119c:	4a e2       	ldi	r20, 0x2A	; 42
    119e:	52 e0       	ldi	r21, 0x02	; 2
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
							clockReset = true;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <clockReset>
    11ae:	0a c0       	rjmp	.+20     	; 0x11c4 <__stack+0x8c5>
						}
						else if (button == 3){
    11b0:	03 97       	sbiw	r24, 0x03	; 3
    11b2:	41 f4       	brne	.+16     	; 0x11c4 <__stack+0x8c5>
							sendString_XY(1,0,"N");
    11b4:	4c e2       	ldi	r20, 0x2C	; 44
    11b6:	52 e0       	ldi	r21, 0x02	; 2
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	0e 94 1a 01 	call	0x234	; 0x234 <sendString_XY>
							clockReset = false;
    11c0:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <clockReset>
    11c4:	8f ef       	ldi	r24, 0xFF	; 255
    11c6:	91 ee       	ldi	r25, 0xE1	; 225
    11c8:	24 e0       	ldi	r18, 0x04	; 4
    11ca:	81 50       	subi	r24, 0x01	; 1
    11cc:	90 40       	sbci	r25, 0x00	; 0
    11ce:	20 40       	sbci	r18, 0x00	; 0
    11d0:	e1 f7       	brne	.-8      	; 0x11ca <__stack+0x8cb>
    11d2:	00 c0       	rjmp	.+0      	; 0x11d4 <__stack+0x8d5>
    11d4:	00 00       	nop
    11d6:	7e c9       	rjmp	.-3332   	; 0x4d4 <main+0x8>

000011d8 <__divmodhi4>:
    11d8:	97 fb       	bst	r25, 7
    11da:	07 2e       	mov	r0, r23
    11dc:	16 f4       	brtc	.+4      	; 0x11e2 <__divmodhi4+0xa>
    11de:	00 94       	com	r0
    11e0:	07 d0       	rcall	.+14     	; 0x11f0 <__divmodhi4_neg1>
    11e2:	77 fd       	sbrc	r23, 7
    11e4:	09 d0       	rcall	.+18     	; 0x11f8 <__divmodhi4_neg2>
    11e6:	0e 94 00 09 	call	0x1200	; 0x1200 <__udivmodhi4>
    11ea:	07 fc       	sbrc	r0, 7
    11ec:	05 d0       	rcall	.+10     	; 0x11f8 <__divmodhi4_neg2>
    11ee:	3e f4       	brtc	.+14     	; 0x11fe <__divmodhi4_exit>

000011f0 <__divmodhi4_neg1>:
    11f0:	90 95       	com	r25
    11f2:	81 95       	neg	r24
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	08 95       	ret

000011f8 <__divmodhi4_neg2>:
    11f8:	70 95       	com	r23
    11fa:	61 95       	neg	r22
    11fc:	7f 4f       	sbci	r23, 0xFF	; 255

000011fe <__divmodhi4_exit>:
    11fe:	08 95       	ret

00001200 <__udivmodhi4>:
    1200:	aa 1b       	sub	r26, r26
    1202:	bb 1b       	sub	r27, r27
    1204:	51 e1       	ldi	r21, 0x11	; 17
    1206:	07 c0       	rjmp	.+14     	; 0x1216 <__udivmodhi4_ep>

00001208 <__udivmodhi4_loop>:
    1208:	aa 1f       	adc	r26, r26
    120a:	bb 1f       	adc	r27, r27
    120c:	a6 17       	cp	r26, r22
    120e:	b7 07       	cpc	r27, r23
    1210:	10 f0       	brcs	.+4      	; 0x1216 <__udivmodhi4_ep>
    1212:	a6 1b       	sub	r26, r22
    1214:	b7 0b       	sbc	r27, r23

00001216 <__udivmodhi4_ep>:
    1216:	88 1f       	adc	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	5a 95       	dec	r21
    121c:	a9 f7       	brne	.-22     	; 0x1208 <__udivmodhi4_loop>
    121e:	80 95       	com	r24
    1220:	90 95       	com	r25
    1222:	bc 01       	movw	r22, r24
    1224:	cd 01       	movw	r24, r26
    1226:	08 95       	ret

00001228 <sprintf>:
    1228:	ae e0       	ldi	r26, 0x0E	; 14
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ea e1       	ldi	r30, 0x1A	; 26
    122e:	f9 e0       	ldi	r31, 0x09	; 9
    1230:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <__prologue_saves__+0x1c>
    1234:	0d 89       	ldd	r16, Y+21	; 0x15
    1236:	1e 89       	ldd	r17, Y+22	; 0x16
    1238:	86 e0       	ldi	r24, 0x06	; 6
    123a:	8c 83       	std	Y+4, r24	; 0x04
    123c:	1a 83       	std	Y+2, r17	; 0x02
    123e:	09 83       	std	Y+1, r16	; 0x01
    1240:	8f ef       	ldi	r24, 0xFF	; 255
    1242:	9f e7       	ldi	r25, 0x7F	; 127
    1244:	9e 83       	std	Y+6, r25	; 0x06
    1246:	8d 83       	std	Y+5, r24	; 0x05
    1248:	ae 01       	movw	r20, r28
    124a:	47 5e       	subi	r20, 0xE7	; 231
    124c:	5f 4f       	sbci	r21, 0xFF	; 255
    124e:	6f 89       	ldd	r22, Y+23	; 0x17
    1250:	78 8d       	ldd	r23, Y+24	; 0x18
    1252:	ce 01       	movw	r24, r28
    1254:	01 96       	adiw	r24, 0x01	; 1
    1256:	0e 94 36 09 	call	0x126c	; 0x126c <vfprintf>
    125a:	ef 81       	ldd	r30, Y+7	; 0x07
    125c:	f8 85       	ldd	r31, Y+8	; 0x08
    125e:	e0 0f       	add	r30, r16
    1260:	f1 1f       	adc	r31, r17
    1262:	10 82       	st	Z, r1
    1264:	2e 96       	adiw	r28, 0x0e	; 14
    1266:	e4 e0       	ldi	r30, 0x04	; 4
    1268:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__epilogue_restores__+0x1c>

0000126c <vfprintf>:
    126c:	ab e0       	ldi	r26, 0x0B	; 11
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	ec e3       	ldi	r30, 0x3C	; 60
    1272:	f9 e0       	ldi	r31, 0x09	; 9
    1274:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__prologue_saves__>
    1278:	6c 01       	movw	r12, r24
    127a:	7b 01       	movw	r14, r22
    127c:	8a 01       	movw	r16, r20
    127e:	fc 01       	movw	r30, r24
    1280:	17 82       	std	Z+7, r1	; 0x07
    1282:	16 82       	std	Z+6, r1	; 0x06
    1284:	83 81       	ldd	r24, Z+3	; 0x03
    1286:	81 ff       	sbrs	r24, 1
    1288:	cc c1       	rjmp	.+920    	; 0x1622 <vfprintf+0x3b6>
    128a:	ce 01       	movw	r24, r28
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	3c 01       	movw	r6, r24
    1290:	f6 01       	movw	r30, r12
    1292:	93 81       	ldd	r25, Z+3	; 0x03
    1294:	f7 01       	movw	r30, r14
    1296:	93 fd       	sbrc	r25, 3
    1298:	85 91       	lpm	r24, Z+
    129a:	93 ff       	sbrs	r25, 3
    129c:	81 91       	ld	r24, Z+
    129e:	7f 01       	movw	r14, r30
    12a0:	88 23       	and	r24, r24
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <vfprintf+0x3a>
    12a4:	ba c1       	rjmp	.+884    	; 0x161a <vfprintf+0x3ae>
    12a6:	85 32       	cpi	r24, 0x25	; 37
    12a8:	39 f4       	brne	.+14     	; 0x12b8 <vfprintf+0x4c>
    12aa:	93 fd       	sbrc	r25, 3
    12ac:	85 91       	lpm	r24, Z+
    12ae:	93 ff       	sbrs	r25, 3
    12b0:	81 91       	ld	r24, Z+
    12b2:	7f 01       	movw	r14, r30
    12b4:	85 32       	cpi	r24, 0x25	; 37
    12b6:	29 f4       	brne	.+10     	; 0x12c2 <vfprintf+0x56>
    12b8:	b6 01       	movw	r22, r12
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 2d 0b 	call	0x165a	; 0x165a <fputc>
    12c0:	e7 cf       	rjmp	.-50     	; 0x1290 <vfprintf+0x24>
    12c2:	91 2c       	mov	r9, r1
    12c4:	21 2c       	mov	r2, r1
    12c6:	31 2c       	mov	r3, r1
    12c8:	ff e1       	ldi	r31, 0x1F	; 31
    12ca:	f3 15       	cp	r31, r3
    12cc:	d8 f0       	brcs	.+54     	; 0x1304 <vfprintf+0x98>
    12ce:	8b 32       	cpi	r24, 0x2B	; 43
    12d0:	79 f0       	breq	.+30     	; 0x12f0 <vfprintf+0x84>
    12d2:	38 f4       	brcc	.+14     	; 0x12e2 <vfprintf+0x76>
    12d4:	80 32       	cpi	r24, 0x20	; 32
    12d6:	79 f0       	breq	.+30     	; 0x12f6 <vfprintf+0x8a>
    12d8:	83 32       	cpi	r24, 0x23	; 35
    12da:	a1 f4       	brne	.+40     	; 0x1304 <vfprintf+0x98>
    12dc:	23 2d       	mov	r18, r3
    12de:	20 61       	ori	r18, 0x10	; 16
    12e0:	1d c0       	rjmp	.+58     	; 0x131c <vfprintf+0xb0>
    12e2:	8d 32       	cpi	r24, 0x2D	; 45
    12e4:	61 f0       	breq	.+24     	; 0x12fe <vfprintf+0x92>
    12e6:	80 33       	cpi	r24, 0x30	; 48
    12e8:	69 f4       	brne	.+26     	; 0x1304 <vfprintf+0x98>
    12ea:	23 2d       	mov	r18, r3
    12ec:	21 60       	ori	r18, 0x01	; 1
    12ee:	16 c0       	rjmp	.+44     	; 0x131c <vfprintf+0xb0>
    12f0:	83 2d       	mov	r24, r3
    12f2:	82 60       	ori	r24, 0x02	; 2
    12f4:	38 2e       	mov	r3, r24
    12f6:	e3 2d       	mov	r30, r3
    12f8:	e4 60       	ori	r30, 0x04	; 4
    12fa:	3e 2e       	mov	r3, r30
    12fc:	2a c0       	rjmp	.+84     	; 0x1352 <vfprintf+0xe6>
    12fe:	f3 2d       	mov	r31, r3
    1300:	f8 60       	ori	r31, 0x08	; 8
    1302:	1d c0       	rjmp	.+58     	; 0x133e <vfprintf+0xd2>
    1304:	37 fc       	sbrc	r3, 7
    1306:	2d c0       	rjmp	.+90     	; 0x1362 <vfprintf+0xf6>
    1308:	20 ed       	ldi	r18, 0xD0	; 208
    130a:	28 0f       	add	r18, r24
    130c:	2a 30       	cpi	r18, 0x0A	; 10
    130e:	40 f0       	brcs	.+16     	; 0x1320 <vfprintf+0xb4>
    1310:	8e 32       	cpi	r24, 0x2E	; 46
    1312:	b9 f4       	brne	.+46     	; 0x1342 <vfprintf+0xd6>
    1314:	36 fc       	sbrc	r3, 6
    1316:	81 c1       	rjmp	.+770    	; 0x161a <vfprintf+0x3ae>
    1318:	23 2d       	mov	r18, r3
    131a:	20 64       	ori	r18, 0x40	; 64
    131c:	32 2e       	mov	r3, r18
    131e:	19 c0       	rjmp	.+50     	; 0x1352 <vfprintf+0xe6>
    1320:	36 fe       	sbrs	r3, 6
    1322:	06 c0       	rjmp	.+12     	; 0x1330 <vfprintf+0xc4>
    1324:	8a e0       	ldi	r24, 0x0A	; 10
    1326:	98 9e       	mul	r9, r24
    1328:	20 0d       	add	r18, r0
    132a:	11 24       	eor	r1, r1
    132c:	92 2e       	mov	r9, r18
    132e:	11 c0       	rjmp	.+34     	; 0x1352 <vfprintf+0xe6>
    1330:	ea e0       	ldi	r30, 0x0A	; 10
    1332:	2e 9e       	mul	r2, r30
    1334:	20 0d       	add	r18, r0
    1336:	11 24       	eor	r1, r1
    1338:	22 2e       	mov	r2, r18
    133a:	f3 2d       	mov	r31, r3
    133c:	f0 62       	ori	r31, 0x20	; 32
    133e:	3f 2e       	mov	r3, r31
    1340:	08 c0       	rjmp	.+16     	; 0x1352 <vfprintf+0xe6>
    1342:	8c 36       	cpi	r24, 0x6C	; 108
    1344:	21 f4       	brne	.+8      	; 0x134e <vfprintf+0xe2>
    1346:	83 2d       	mov	r24, r3
    1348:	80 68       	ori	r24, 0x80	; 128
    134a:	38 2e       	mov	r3, r24
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <vfprintf+0xe6>
    134e:	88 36       	cpi	r24, 0x68	; 104
    1350:	41 f4       	brne	.+16     	; 0x1362 <vfprintf+0xf6>
    1352:	f7 01       	movw	r30, r14
    1354:	93 fd       	sbrc	r25, 3
    1356:	85 91       	lpm	r24, Z+
    1358:	93 ff       	sbrs	r25, 3
    135a:	81 91       	ld	r24, Z+
    135c:	7f 01       	movw	r14, r30
    135e:	81 11       	cpse	r24, r1
    1360:	b3 cf       	rjmp	.-154    	; 0x12c8 <vfprintf+0x5c>
    1362:	98 2f       	mov	r25, r24
    1364:	9f 7d       	andi	r25, 0xDF	; 223
    1366:	95 54       	subi	r25, 0x45	; 69
    1368:	93 30       	cpi	r25, 0x03	; 3
    136a:	28 f4       	brcc	.+10     	; 0x1376 <vfprintf+0x10a>
    136c:	0c 5f       	subi	r16, 0xFC	; 252
    136e:	1f 4f       	sbci	r17, 0xFF	; 255
    1370:	9f e3       	ldi	r25, 0x3F	; 63
    1372:	99 83       	std	Y+1, r25	; 0x01
    1374:	0d c0       	rjmp	.+26     	; 0x1390 <vfprintf+0x124>
    1376:	83 36       	cpi	r24, 0x63	; 99
    1378:	31 f0       	breq	.+12     	; 0x1386 <vfprintf+0x11a>
    137a:	83 37       	cpi	r24, 0x73	; 115
    137c:	71 f0       	breq	.+28     	; 0x139a <vfprintf+0x12e>
    137e:	83 35       	cpi	r24, 0x53	; 83
    1380:	09 f0       	breq	.+2      	; 0x1384 <vfprintf+0x118>
    1382:	59 c0       	rjmp	.+178    	; 0x1436 <vfprintf+0x1ca>
    1384:	21 c0       	rjmp	.+66     	; 0x13c8 <vfprintf+0x15c>
    1386:	f8 01       	movw	r30, r16
    1388:	80 81       	ld	r24, Z
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	0e 5f       	subi	r16, 0xFE	; 254
    138e:	1f 4f       	sbci	r17, 0xFF	; 255
    1390:	88 24       	eor	r8, r8
    1392:	83 94       	inc	r8
    1394:	91 2c       	mov	r9, r1
    1396:	53 01       	movw	r10, r6
    1398:	13 c0       	rjmp	.+38     	; 0x13c0 <vfprintf+0x154>
    139a:	28 01       	movw	r4, r16
    139c:	f2 e0       	ldi	r31, 0x02	; 2
    139e:	4f 0e       	add	r4, r31
    13a0:	51 1c       	adc	r5, r1
    13a2:	f8 01       	movw	r30, r16
    13a4:	a0 80       	ld	r10, Z
    13a6:	b1 80       	ldd	r11, Z+1	; 0x01
    13a8:	36 fe       	sbrs	r3, 6
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <vfprintf+0x146>
    13ac:	69 2d       	mov	r22, r9
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <vfprintf+0x14a>
    13b2:	6f ef       	ldi	r22, 0xFF	; 255
    13b4:	7f ef       	ldi	r23, 0xFF	; 255
    13b6:	c5 01       	movw	r24, r10
    13b8:	0e 94 22 0b 	call	0x1644	; 0x1644 <strnlen>
    13bc:	4c 01       	movw	r8, r24
    13be:	82 01       	movw	r16, r4
    13c0:	f3 2d       	mov	r31, r3
    13c2:	ff 77       	andi	r31, 0x7F	; 127
    13c4:	3f 2e       	mov	r3, r31
    13c6:	16 c0       	rjmp	.+44     	; 0x13f4 <vfprintf+0x188>
    13c8:	28 01       	movw	r4, r16
    13ca:	22 e0       	ldi	r18, 0x02	; 2
    13cc:	42 0e       	add	r4, r18
    13ce:	51 1c       	adc	r5, r1
    13d0:	f8 01       	movw	r30, r16
    13d2:	a0 80       	ld	r10, Z
    13d4:	b1 80       	ldd	r11, Z+1	; 0x01
    13d6:	36 fe       	sbrs	r3, 6
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <vfprintf+0x174>
    13da:	69 2d       	mov	r22, r9
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <vfprintf+0x178>
    13e0:	6f ef       	ldi	r22, 0xFF	; 255
    13e2:	7f ef       	ldi	r23, 0xFF	; 255
    13e4:	c5 01       	movw	r24, r10
    13e6:	0e 94 17 0b 	call	0x162e	; 0x162e <strnlen_P>
    13ea:	4c 01       	movw	r8, r24
    13ec:	f3 2d       	mov	r31, r3
    13ee:	f0 68       	ori	r31, 0x80	; 128
    13f0:	3f 2e       	mov	r3, r31
    13f2:	82 01       	movw	r16, r4
    13f4:	33 fc       	sbrc	r3, 3
    13f6:	1b c0       	rjmp	.+54     	; 0x142e <vfprintf+0x1c2>
    13f8:	82 2d       	mov	r24, r2
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	88 16       	cp	r8, r24
    13fe:	99 06       	cpc	r9, r25
    1400:	b0 f4       	brcc	.+44     	; 0x142e <vfprintf+0x1c2>
    1402:	b6 01       	movw	r22, r12
    1404:	80 e2       	ldi	r24, 0x20	; 32
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 2d 0b 	call	0x165a	; 0x165a <fputc>
    140c:	2a 94       	dec	r2
    140e:	f4 cf       	rjmp	.-24     	; 0x13f8 <vfprintf+0x18c>
    1410:	f5 01       	movw	r30, r10
    1412:	37 fc       	sbrc	r3, 7
    1414:	85 91       	lpm	r24, Z+
    1416:	37 fe       	sbrs	r3, 7
    1418:	81 91       	ld	r24, Z+
    141a:	5f 01       	movw	r10, r30
    141c:	b6 01       	movw	r22, r12
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 2d 0b 	call	0x165a	; 0x165a <fputc>
    1424:	21 10       	cpse	r2, r1
    1426:	2a 94       	dec	r2
    1428:	21 e0       	ldi	r18, 0x01	; 1
    142a:	82 1a       	sub	r8, r18
    142c:	91 08       	sbc	r9, r1
    142e:	81 14       	cp	r8, r1
    1430:	91 04       	cpc	r9, r1
    1432:	71 f7       	brne	.-36     	; 0x1410 <vfprintf+0x1a4>
    1434:	e8 c0       	rjmp	.+464    	; 0x1606 <vfprintf+0x39a>
    1436:	84 36       	cpi	r24, 0x64	; 100
    1438:	11 f0       	breq	.+4      	; 0x143e <vfprintf+0x1d2>
    143a:	89 36       	cpi	r24, 0x69	; 105
    143c:	41 f5       	brne	.+80     	; 0x148e <vfprintf+0x222>
    143e:	f8 01       	movw	r30, r16
    1440:	37 fe       	sbrs	r3, 7
    1442:	07 c0       	rjmp	.+14     	; 0x1452 <vfprintf+0x1e6>
    1444:	60 81       	ld	r22, Z
    1446:	71 81       	ldd	r23, Z+1	; 0x01
    1448:	82 81       	ldd	r24, Z+2	; 0x02
    144a:	93 81       	ldd	r25, Z+3	; 0x03
    144c:	0c 5f       	subi	r16, 0xFC	; 252
    144e:	1f 4f       	sbci	r17, 0xFF	; 255
    1450:	08 c0       	rjmp	.+16     	; 0x1462 <vfprintf+0x1f6>
    1452:	60 81       	ld	r22, Z
    1454:	71 81       	ldd	r23, Z+1	; 0x01
    1456:	07 2e       	mov	r0, r23
    1458:	00 0c       	add	r0, r0
    145a:	88 0b       	sbc	r24, r24
    145c:	99 0b       	sbc	r25, r25
    145e:	0e 5f       	subi	r16, 0xFE	; 254
    1460:	1f 4f       	sbci	r17, 0xFF	; 255
    1462:	f3 2d       	mov	r31, r3
    1464:	ff 76       	andi	r31, 0x6F	; 111
    1466:	3f 2e       	mov	r3, r31
    1468:	97 ff       	sbrs	r25, 7
    146a:	09 c0       	rjmp	.+18     	; 0x147e <vfprintf+0x212>
    146c:	90 95       	com	r25
    146e:	80 95       	com	r24
    1470:	70 95       	com	r23
    1472:	61 95       	neg	r22
    1474:	7f 4f       	sbci	r23, 0xFF	; 255
    1476:	8f 4f       	sbci	r24, 0xFF	; 255
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	f0 68       	ori	r31, 0x80	; 128
    147c:	3f 2e       	mov	r3, r31
    147e:	2a e0       	ldi	r18, 0x0A	; 10
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	a3 01       	movw	r20, r6
    1484:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__ultoa_invert>
    1488:	88 2e       	mov	r8, r24
    148a:	86 18       	sub	r8, r6
    148c:	45 c0       	rjmp	.+138    	; 0x1518 <vfprintf+0x2ac>
    148e:	85 37       	cpi	r24, 0x75	; 117
    1490:	31 f4       	brne	.+12     	; 0x149e <vfprintf+0x232>
    1492:	23 2d       	mov	r18, r3
    1494:	2f 7e       	andi	r18, 0xEF	; 239
    1496:	b2 2e       	mov	r11, r18
    1498:	2a e0       	ldi	r18, 0x0A	; 10
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	25 c0       	rjmp	.+74     	; 0x14e8 <vfprintf+0x27c>
    149e:	93 2d       	mov	r25, r3
    14a0:	99 7f       	andi	r25, 0xF9	; 249
    14a2:	b9 2e       	mov	r11, r25
    14a4:	8f 36       	cpi	r24, 0x6F	; 111
    14a6:	c1 f0       	breq	.+48     	; 0x14d8 <vfprintf+0x26c>
    14a8:	18 f4       	brcc	.+6      	; 0x14b0 <vfprintf+0x244>
    14aa:	88 35       	cpi	r24, 0x58	; 88
    14ac:	79 f0       	breq	.+30     	; 0x14cc <vfprintf+0x260>
    14ae:	b5 c0       	rjmp	.+362    	; 0x161a <vfprintf+0x3ae>
    14b0:	80 37       	cpi	r24, 0x70	; 112
    14b2:	19 f0       	breq	.+6      	; 0x14ba <vfprintf+0x24e>
    14b4:	88 37       	cpi	r24, 0x78	; 120
    14b6:	21 f0       	breq	.+8      	; 0x14c0 <vfprintf+0x254>
    14b8:	b0 c0       	rjmp	.+352    	; 0x161a <vfprintf+0x3ae>
    14ba:	e9 2f       	mov	r30, r25
    14bc:	e0 61       	ori	r30, 0x10	; 16
    14be:	be 2e       	mov	r11, r30
    14c0:	b4 fe       	sbrs	r11, 4
    14c2:	0d c0       	rjmp	.+26     	; 0x14de <vfprintf+0x272>
    14c4:	fb 2d       	mov	r31, r11
    14c6:	f4 60       	ori	r31, 0x04	; 4
    14c8:	bf 2e       	mov	r11, r31
    14ca:	09 c0       	rjmp	.+18     	; 0x14de <vfprintf+0x272>
    14cc:	34 fe       	sbrs	r3, 4
    14ce:	0a c0       	rjmp	.+20     	; 0x14e4 <vfprintf+0x278>
    14d0:	29 2f       	mov	r18, r25
    14d2:	26 60       	ori	r18, 0x06	; 6
    14d4:	b2 2e       	mov	r11, r18
    14d6:	06 c0       	rjmp	.+12     	; 0x14e4 <vfprintf+0x278>
    14d8:	28 e0       	ldi	r18, 0x08	; 8
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	05 c0       	rjmp	.+10     	; 0x14e8 <vfprintf+0x27c>
    14de:	20 e1       	ldi	r18, 0x10	; 16
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <vfprintf+0x27c>
    14e4:	20 e1       	ldi	r18, 0x10	; 16
    14e6:	32 e0       	ldi	r19, 0x02	; 2
    14e8:	f8 01       	movw	r30, r16
    14ea:	b7 fe       	sbrs	r11, 7
    14ec:	07 c0       	rjmp	.+14     	; 0x14fc <vfprintf+0x290>
    14ee:	60 81       	ld	r22, Z
    14f0:	71 81       	ldd	r23, Z+1	; 0x01
    14f2:	82 81       	ldd	r24, Z+2	; 0x02
    14f4:	93 81       	ldd	r25, Z+3	; 0x03
    14f6:	0c 5f       	subi	r16, 0xFC	; 252
    14f8:	1f 4f       	sbci	r17, 0xFF	; 255
    14fa:	06 c0       	rjmp	.+12     	; 0x1508 <vfprintf+0x29c>
    14fc:	60 81       	ld	r22, Z
    14fe:	71 81       	ldd	r23, Z+1	; 0x01
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 5f       	subi	r16, 0xFE	; 254
    1506:	1f 4f       	sbci	r17, 0xFF	; 255
    1508:	a3 01       	movw	r20, r6
    150a:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__ultoa_invert>
    150e:	88 2e       	mov	r8, r24
    1510:	86 18       	sub	r8, r6
    1512:	fb 2d       	mov	r31, r11
    1514:	ff 77       	andi	r31, 0x7F	; 127
    1516:	3f 2e       	mov	r3, r31
    1518:	36 fe       	sbrs	r3, 6
    151a:	0d c0       	rjmp	.+26     	; 0x1536 <vfprintf+0x2ca>
    151c:	23 2d       	mov	r18, r3
    151e:	2e 7f       	andi	r18, 0xFE	; 254
    1520:	a2 2e       	mov	r10, r18
    1522:	89 14       	cp	r8, r9
    1524:	58 f4       	brcc	.+22     	; 0x153c <vfprintf+0x2d0>
    1526:	34 fe       	sbrs	r3, 4
    1528:	0b c0       	rjmp	.+22     	; 0x1540 <vfprintf+0x2d4>
    152a:	32 fc       	sbrc	r3, 2
    152c:	09 c0       	rjmp	.+18     	; 0x1540 <vfprintf+0x2d4>
    152e:	83 2d       	mov	r24, r3
    1530:	8e 7e       	andi	r24, 0xEE	; 238
    1532:	a8 2e       	mov	r10, r24
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <vfprintf+0x2d4>
    1536:	b8 2c       	mov	r11, r8
    1538:	a3 2c       	mov	r10, r3
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <vfprintf+0x2d6>
    153c:	b8 2c       	mov	r11, r8
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <vfprintf+0x2d6>
    1540:	b9 2c       	mov	r11, r9
    1542:	a4 fe       	sbrs	r10, 4
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <vfprintf+0x2f8>
    1546:	fe 01       	movw	r30, r28
    1548:	e8 0d       	add	r30, r8
    154a:	f1 1d       	adc	r31, r1
    154c:	80 81       	ld	r24, Z
    154e:	80 33       	cpi	r24, 0x30	; 48
    1550:	21 f4       	brne	.+8      	; 0x155a <vfprintf+0x2ee>
    1552:	9a 2d       	mov	r25, r10
    1554:	99 7e       	andi	r25, 0xE9	; 233
    1556:	a9 2e       	mov	r10, r25
    1558:	09 c0       	rjmp	.+18     	; 0x156c <vfprintf+0x300>
    155a:	a2 fe       	sbrs	r10, 2
    155c:	06 c0       	rjmp	.+12     	; 0x156a <vfprintf+0x2fe>
    155e:	b3 94       	inc	r11
    1560:	b3 94       	inc	r11
    1562:	04 c0       	rjmp	.+8      	; 0x156c <vfprintf+0x300>
    1564:	8a 2d       	mov	r24, r10
    1566:	86 78       	andi	r24, 0x86	; 134
    1568:	09 f0       	breq	.+2      	; 0x156c <vfprintf+0x300>
    156a:	b3 94       	inc	r11
    156c:	a3 fc       	sbrc	r10, 3
    156e:	11 c0       	rjmp	.+34     	; 0x1592 <vfprintf+0x326>
    1570:	a0 fe       	sbrs	r10, 0
    1572:	06 c0       	rjmp	.+12     	; 0x1580 <vfprintf+0x314>
    1574:	b2 14       	cp	r11, r2
    1576:	88 f4       	brcc	.+34     	; 0x159a <vfprintf+0x32e>
    1578:	28 0c       	add	r2, r8
    157a:	92 2c       	mov	r9, r2
    157c:	9b 18       	sub	r9, r11
    157e:	0e c0       	rjmp	.+28     	; 0x159c <vfprintf+0x330>
    1580:	b2 14       	cp	r11, r2
    1582:	60 f4       	brcc	.+24     	; 0x159c <vfprintf+0x330>
    1584:	b6 01       	movw	r22, r12
    1586:	80 e2       	ldi	r24, 0x20	; 32
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	0e 94 2d 0b 	call	0x165a	; 0x165a <fputc>
    158e:	b3 94       	inc	r11
    1590:	f7 cf       	rjmp	.-18     	; 0x1580 <vfprintf+0x314>
    1592:	b2 14       	cp	r11, r2
    1594:	18 f4       	brcc	.+6      	; 0x159c <vfprintf+0x330>
    1596:	2b 18       	sub	r2, r11
    1598:	02 c0       	rjmp	.+4      	; 0x159e <vfprintf+0x332>
    159a:	98 2c       	mov	r9, r8
    159c:	21 2c       	mov	r2, r1
    159e:	a4 fe       	sbrs	r10, 4
    15a0:	10 c0       	rjmp	.+32     	; 0x15c2 <vfprintf+0x356>
    15a2:	b6 01       	movw	r22, r12
    15a4:	80 e3       	ldi	r24, 0x30	; 48
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 2d 0b 	call	0x165a	; 0x165a <fputc>
    15ac:	a2 fe       	sbrs	r10, 2
    15ae:	17 c0       	rjmp	.+46     	; 0x15de <vfprintf+0x372>
    15b0:	a1 fc       	sbrc	r10, 1
    15b2:	03 c0       	rjmp	.+6      	; 0x15ba <vfprintf+0x34e>
    15b4:	88 e7       	ldi	r24, 0x78	; 120
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <vfprintf+0x352>
    15ba:	88 e5       	ldi	r24, 0x58	; 88
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	b6 01       	movw	r22, r12
    15c0:	0c c0       	rjmp	.+24     	; 0x15da <vfprintf+0x36e>
    15c2:	8a 2d       	mov	r24, r10
    15c4:	86 78       	andi	r24, 0x86	; 134
    15c6:	59 f0       	breq	.+22     	; 0x15de <vfprintf+0x372>
    15c8:	a1 fe       	sbrs	r10, 1
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <vfprintf+0x364>
    15cc:	8b e2       	ldi	r24, 0x2B	; 43
    15ce:	01 c0       	rjmp	.+2      	; 0x15d2 <vfprintf+0x366>
    15d0:	80 e2       	ldi	r24, 0x20	; 32
    15d2:	a7 fc       	sbrc	r10, 7
    15d4:	8d e2       	ldi	r24, 0x2D	; 45
    15d6:	b6 01       	movw	r22, r12
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 2d 0b 	call	0x165a	; 0x165a <fputc>
    15de:	89 14       	cp	r8, r9
    15e0:	38 f4       	brcc	.+14     	; 0x15f0 <vfprintf+0x384>
    15e2:	b6 01       	movw	r22, r12
    15e4:	80 e3       	ldi	r24, 0x30	; 48
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	0e 94 2d 0b 	call	0x165a	; 0x165a <fputc>
    15ec:	9a 94       	dec	r9
    15ee:	f7 cf       	rjmp	.-18     	; 0x15de <vfprintf+0x372>
    15f0:	8a 94       	dec	r8
    15f2:	f3 01       	movw	r30, r6
    15f4:	e8 0d       	add	r30, r8
    15f6:	f1 1d       	adc	r31, r1
    15f8:	80 81       	ld	r24, Z
    15fa:	b6 01       	movw	r22, r12
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 2d 0b 	call	0x165a	; 0x165a <fputc>
    1602:	81 10       	cpse	r8, r1
    1604:	f5 cf       	rjmp	.-22     	; 0x15f0 <vfprintf+0x384>
    1606:	22 20       	and	r2, r2
    1608:	09 f4       	brne	.+2      	; 0x160c <vfprintf+0x3a0>
    160a:	42 ce       	rjmp	.-892    	; 0x1290 <vfprintf+0x24>
    160c:	b6 01       	movw	r22, r12
    160e:	80 e2       	ldi	r24, 0x20	; 32
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 2d 0b 	call	0x165a	; 0x165a <fputc>
    1616:	2a 94       	dec	r2
    1618:	f6 cf       	rjmp	.-20     	; 0x1606 <vfprintf+0x39a>
    161a:	f6 01       	movw	r30, r12
    161c:	86 81       	ldd	r24, Z+6	; 0x06
    161e:	97 81       	ldd	r25, Z+7	; 0x07
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <vfprintf+0x3ba>
    1622:	8f ef       	ldi	r24, 0xFF	; 255
    1624:	9f ef       	ldi	r25, 0xFF	; 255
    1626:	2b 96       	adiw	r28, 0x0b	; 11
    1628:	e2 e1       	ldi	r30, 0x12	; 18
    162a:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <__epilogue_restores__>

0000162e <strnlen_P>:
    162e:	fc 01       	movw	r30, r24
    1630:	05 90       	lpm	r0, Z+
    1632:	61 50       	subi	r22, 0x01	; 1
    1634:	70 40       	sbci	r23, 0x00	; 0
    1636:	01 10       	cpse	r0, r1
    1638:	d8 f7       	brcc	.-10     	; 0x1630 <strnlen_P+0x2>
    163a:	80 95       	com	r24
    163c:	90 95       	com	r25
    163e:	8e 0f       	add	r24, r30
    1640:	9f 1f       	adc	r25, r31
    1642:	08 95       	ret

00001644 <strnlen>:
    1644:	fc 01       	movw	r30, r24
    1646:	61 50       	subi	r22, 0x01	; 1
    1648:	70 40       	sbci	r23, 0x00	; 0
    164a:	01 90       	ld	r0, Z+
    164c:	01 10       	cpse	r0, r1
    164e:	d8 f7       	brcc	.-10     	; 0x1646 <strnlen+0x2>
    1650:	80 95       	com	r24
    1652:	90 95       	com	r25
    1654:	8e 0f       	add	r24, r30
    1656:	9f 1f       	adc	r25, r31
    1658:	08 95       	ret

0000165a <fputc>:
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	fb 01       	movw	r30, r22
    1664:	23 81       	ldd	r18, Z+3	; 0x03
    1666:	21 fd       	sbrc	r18, 1
    1668:	03 c0       	rjmp	.+6      	; 0x1670 <fputc+0x16>
    166a:	8f ef       	ldi	r24, 0xFF	; 255
    166c:	9f ef       	ldi	r25, 0xFF	; 255
    166e:	2c c0       	rjmp	.+88     	; 0x16c8 <fputc+0x6e>
    1670:	22 ff       	sbrs	r18, 2
    1672:	16 c0       	rjmp	.+44     	; 0x16a0 <fputc+0x46>
    1674:	46 81       	ldd	r20, Z+6	; 0x06
    1676:	57 81       	ldd	r21, Z+7	; 0x07
    1678:	24 81       	ldd	r18, Z+4	; 0x04
    167a:	35 81       	ldd	r19, Z+5	; 0x05
    167c:	42 17       	cp	r20, r18
    167e:	53 07       	cpc	r21, r19
    1680:	44 f4       	brge	.+16     	; 0x1692 <fputc+0x38>
    1682:	a0 81       	ld	r26, Z
    1684:	b1 81       	ldd	r27, Z+1	; 0x01
    1686:	9d 01       	movw	r18, r26
    1688:	2f 5f       	subi	r18, 0xFF	; 255
    168a:	3f 4f       	sbci	r19, 0xFF	; 255
    168c:	31 83       	std	Z+1, r19	; 0x01
    168e:	20 83       	st	Z, r18
    1690:	8c 93       	st	X, r24
    1692:	26 81       	ldd	r18, Z+6	; 0x06
    1694:	37 81       	ldd	r19, Z+7	; 0x07
    1696:	2f 5f       	subi	r18, 0xFF	; 255
    1698:	3f 4f       	sbci	r19, 0xFF	; 255
    169a:	37 83       	std	Z+7, r19	; 0x07
    169c:	26 83       	std	Z+6, r18	; 0x06
    169e:	14 c0       	rjmp	.+40     	; 0x16c8 <fputc+0x6e>
    16a0:	8b 01       	movw	r16, r22
    16a2:	ec 01       	movw	r28, r24
    16a4:	fb 01       	movw	r30, r22
    16a6:	00 84       	ldd	r0, Z+8	; 0x08
    16a8:	f1 85       	ldd	r31, Z+9	; 0x09
    16aa:	e0 2d       	mov	r30, r0
    16ac:	09 95       	icall
    16ae:	89 2b       	or	r24, r25
    16b0:	e1 f6       	brne	.-72     	; 0x166a <fputc+0x10>
    16b2:	d8 01       	movw	r26, r16
    16b4:	16 96       	adiw	r26, 0x06	; 6
    16b6:	8d 91       	ld	r24, X+
    16b8:	9c 91       	ld	r25, X
    16ba:	17 97       	sbiw	r26, 0x07	; 7
    16bc:	01 96       	adiw	r24, 0x01	; 1
    16be:	17 96       	adiw	r26, 0x07	; 7
    16c0:	9c 93       	st	X, r25
    16c2:	8e 93       	st	-X, r24
    16c4:	16 97       	sbiw	r26, 0x06	; 6
    16c6:	ce 01       	movw	r24, r28
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	1f 91       	pop	r17
    16ce:	0f 91       	pop	r16
    16d0:	08 95       	ret

000016d2 <__ultoa_invert>:
    16d2:	fa 01       	movw	r30, r20
    16d4:	aa 27       	eor	r26, r26
    16d6:	28 30       	cpi	r18, 0x08	; 8
    16d8:	51 f1       	breq	.+84     	; 0x172e <__ultoa_invert+0x5c>
    16da:	20 31       	cpi	r18, 0x10	; 16
    16dc:	81 f1       	breq	.+96     	; 0x173e <__ultoa_invert+0x6c>
    16de:	e8 94       	clt
    16e0:	6f 93       	push	r22
    16e2:	6e 7f       	andi	r22, 0xFE	; 254
    16e4:	6e 5f       	subi	r22, 0xFE	; 254
    16e6:	7f 4f       	sbci	r23, 0xFF	; 255
    16e8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ea:	9f 4f       	sbci	r25, 0xFF	; 255
    16ec:	af 4f       	sbci	r26, 0xFF	; 255
    16ee:	b1 e0       	ldi	r27, 0x01	; 1
    16f0:	3e d0       	rcall	.+124    	; 0x176e <__ultoa_invert+0x9c>
    16f2:	b4 e0       	ldi	r27, 0x04	; 4
    16f4:	3c d0       	rcall	.+120    	; 0x176e <__ultoa_invert+0x9c>
    16f6:	67 0f       	add	r22, r23
    16f8:	78 1f       	adc	r23, r24
    16fa:	89 1f       	adc	r24, r25
    16fc:	9a 1f       	adc	r25, r26
    16fe:	a1 1d       	adc	r26, r1
    1700:	68 0f       	add	r22, r24
    1702:	79 1f       	adc	r23, r25
    1704:	8a 1f       	adc	r24, r26
    1706:	91 1d       	adc	r25, r1
    1708:	a1 1d       	adc	r26, r1
    170a:	6a 0f       	add	r22, r26
    170c:	71 1d       	adc	r23, r1
    170e:	81 1d       	adc	r24, r1
    1710:	91 1d       	adc	r25, r1
    1712:	a1 1d       	adc	r26, r1
    1714:	20 d0       	rcall	.+64     	; 0x1756 <__ultoa_invert+0x84>
    1716:	09 f4       	brne	.+2      	; 0x171a <__ultoa_invert+0x48>
    1718:	68 94       	set
    171a:	3f 91       	pop	r19
    171c:	2a e0       	ldi	r18, 0x0A	; 10
    171e:	26 9f       	mul	r18, r22
    1720:	11 24       	eor	r1, r1
    1722:	30 19       	sub	r19, r0
    1724:	30 5d       	subi	r19, 0xD0	; 208
    1726:	31 93       	st	Z+, r19
    1728:	de f6       	brtc	.-74     	; 0x16e0 <__ultoa_invert+0xe>
    172a:	cf 01       	movw	r24, r30
    172c:	08 95       	ret
    172e:	46 2f       	mov	r20, r22
    1730:	47 70       	andi	r20, 0x07	; 7
    1732:	40 5d       	subi	r20, 0xD0	; 208
    1734:	41 93       	st	Z+, r20
    1736:	b3 e0       	ldi	r27, 0x03	; 3
    1738:	0f d0       	rcall	.+30     	; 0x1758 <__ultoa_invert+0x86>
    173a:	c9 f7       	brne	.-14     	; 0x172e <__ultoa_invert+0x5c>
    173c:	f6 cf       	rjmp	.-20     	; 0x172a <__ultoa_invert+0x58>
    173e:	46 2f       	mov	r20, r22
    1740:	4f 70       	andi	r20, 0x0F	; 15
    1742:	40 5d       	subi	r20, 0xD0	; 208
    1744:	4a 33       	cpi	r20, 0x3A	; 58
    1746:	18 f0       	brcs	.+6      	; 0x174e <__ultoa_invert+0x7c>
    1748:	49 5d       	subi	r20, 0xD9	; 217
    174a:	31 fd       	sbrc	r19, 1
    174c:	40 52       	subi	r20, 0x20	; 32
    174e:	41 93       	st	Z+, r20
    1750:	02 d0       	rcall	.+4      	; 0x1756 <__ultoa_invert+0x84>
    1752:	a9 f7       	brne	.-22     	; 0x173e <__ultoa_invert+0x6c>
    1754:	ea cf       	rjmp	.-44     	; 0x172a <__ultoa_invert+0x58>
    1756:	b4 e0       	ldi	r27, 0x04	; 4
    1758:	a6 95       	lsr	r26
    175a:	97 95       	ror	r25
    175c:	87 95       	ror	r24
    175e:	77 95       	ror	r23
    1760:	67 95       	ror	r22
    1762:	ba 95       	dec	r27
    1764:	c9 f7       	brne	.-14     	; 0x1758 <__ultoa_invert+0x86>
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	61 05       	cpc	r22, r1
    176a:	71 05       	cpc	r23, r1
    176c:	08 95       	ret
    176e:	9b 01       	movw	r18, r22
    1770:	ac 01       	movw	r20, r24
    1772:	0a 2e       	mov	r0, r26
    1774:	06 94       	lsr	r0
    1776:	57 95       	ror	r21
    1778:	47 95       	ror	r20
    177a:	37 95       	ror	r19
    177c:	27 95       	ror	r18
    177e:	ba 95       	dec	r27
    1780:	c9 f7       	brne	.-14     	; 0x1774 <__ultoa_invert+0xa2>
    1782:	62 0f       	add	r22, r18
    1784:	73 1f       	adc	r23, r19
    1786:	84 1f       	adc	r24, r20
    1788:	95 1f       	adc	r25, r21
    178a:	a0 1d       	adc	r26, r0
    178c:	08 95       	ret

0000178e <__prologue_saves__>:
    178e:	2f 92       	push	r2
    1790:	3f 92       	push	r3
    1792:	4f 92       	push	r4
    1794:	5f 92       	push	r5
    1796:	6f 92       	push	r6
    1798:	7f 92       	push	r7
    179a:	8f 92       	push	r8
    179c:	9f 92       	push	r9
    179e:	af 92       	push	r10
    17a0:	bf 92       	push	r11
    17a2:	cf 92       	push	r12
    17a4:	df 92       	push	r13
    17a6:	ef 92       	push	r14
    17a8:	ff 92       	push	r15
    17aa:	0f 93       	push	r16
    17ac:	1f 93       	push	r17
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	ca 1b       	sub	r28, r26
    17b8:	db 0b       	sbc	r29, r27
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	09 94       	ijmp

000017c6 <__epilogue_restores__>:
    17c6:	2a 88       	ldd	r2, Y+18	; 0x12
    17c8:	39 88       	ldd	r3, Y+17	; 0x11
    17ca:	48 88       	ldd	r4, Y+16	; 0x10
    17cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    17ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    17d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    17d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    17d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    17d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    17d8:	b9 84       	ldd	r11, Y+9	; 0x09
    17da:	c8 84       	ldd	r12, Y+8	; 0x08
    17dc:	df 80       	ldd	r13, Y+7	; 0x07
    17de:	ee 80       	ldd	r14, Y+6	; 0x06
    17e0:	fd 80       	ldd	r15, Y+5	; 0x05
    17e2:	0c 81       	ldd	r16, Y+4	; 0x04
    17e4:	1b 81       	ldd	r17, Y+3	; 0x03
    17e6:	aa 81       	ldd	r26, Y+2	; 0x02
    17e8:	b9 81       	ldd	r27, Y+1	; 0x01
    17ea:	ce 0f       	add	r28, r30
    17ec:	d1 1d       	adc	r29, r1
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	ed 01       	movw	r28, r26
    17fa:	08 95       	ret

000017fc <_exit>:
    17fc:	f8 94       	cli

000017fe <__stop_program>:
    17fe:	ff cf       	rjmp	.-2      	; 0x17fe <__stop_program>
