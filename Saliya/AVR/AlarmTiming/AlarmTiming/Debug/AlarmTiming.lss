
AlarmTiming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800100  000016c0  00001754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  008001b2  008001b2  00001806  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001806  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001864  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a56  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000afb  00000000  00000000  0000440a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c13  00000000  00000000  00004f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00005b18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084d  00000000  00000000  00005ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001784  00000000  00000000  00006735  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00007eb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	67 08       	sbc	r6, r7

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	e0 ec       	ldi	r30, 0xC0	; 192
      7e:	f6 e1       	ldi	r31, 0x16	; 22
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a2 3b       	cpi	r26, 0xB2	; 178
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	a2 eb       	ldi	r26, 0xB2	; 178
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a3 3b       	cpi	r26, 0xB3	; 179
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 37 04 	call	0x86e	; 0x86e <main>
      b6:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_ZN3RTCC1Ei>:
int pos[5][2] = {{4, 0}, {7, 0}, {1, 1}, {4, 1}, {7, 1}};
char daysOfweek[][7] = {"SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"};



RTC::RTC(int b)
      be:	08 95       	ret

000000c0 <_ZN3RTC8i2c_initEv>:
	c = c/3;
}

void RTC::i2c_init()
{
    TWBR = 0xFF;
      c0:	8f ef       	ldi	r24, 0xFF	; 255
      c2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
      c6:	08 95       	ret

000000c8 <_ZN3RTC9i2c_startEv>:
}

void RTC::i2c_start()
{
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
      c8:	84 ea       	ldi	r24, 0xA4	; 164
      ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & (1<<TWINT)) == 0);
      ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      d2:	88 23       	and	r24, r24
      d4:	e4 f7       	brge	.-8      	; 0xce <_ZN3RTC9i2c_startEv+0x6>
}
      d6:	08 95       	ret

000000d8 <_ZN3RTC8i2c_stopEv>:

void RTC::i2c_stop()
{
    TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
      d8:	84 e9       	ldi	r24, 0x94	; 148
      da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      de:	08 95       	ret

000000e0 <_ZN3RTC9i2c_writeEh>:
}

void RTC::i2c_write(unsigned char data)
{
    TWDR = data;
      e0:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1<<TWINT)|(1<<TWEN);
      e4:	84 e8       	ldi	r24, 0x84	; 132
      e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & (1<<TWINT)) == 0);
      ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      ee:	88 23       	and	r24, r24
      f0:	e4 f7       	brge	.-8      	; 0xea <_ZN3RTC9i2c_writeEh+0xa>
}
      f2:	08 95       	ret

000000f4 <_ZN3RTC8i2c_readEv>:
unsigned char RTC::i2c_read()
{
    TWCR = (1 << TWINT) | (1 << TWEN)| (1 << TWEA);
      f4:	84 ec       	ldi	r24, 0xC4	; 196
      f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & (1 << TWINT)) == 0);
      fa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      fe:	88 23       	and	r24, r24
     100:	e4 f7       	brge	.-8      	; 0xfa <_ZN3RTC8i2c_readEv+0x6>
    return TWDR;
     102:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}
     106:	08 95       	ret

00000108 <_ZN3RTC12i2c_lastreadEv>:

unsigned char RTC::i2c_lastread()
{
	TWCR = (1 << TWINT) | (1 << TWEN);
     108:	84 e8       	ldi	r24, 0x84	; 132
     10a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR & (1 << TWINT)) == 0);
     10e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     112:	88 23       	and	r24, r24
     114:	e4 f7       	brge	.-8      	; 0x10e <_ZN3RTC12i2c_lastreadEv+0x6>
	return TWDR;
     116:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	
}
     11a:	08 95       	ret

0000011c <_ZN3RTC8binTobcdEh>:
		num = num / 10;
		bcd = (dig << count) | bcd;
		count += 4;
	}
	return bcd;*/
	return( (data/10*16) + (data%10) );
     11c:	9d ec       	ldi	r25, 0xCD	; 205
     11e:	69 9f       	mul	r22, r25
     120:	91 2d       	mov	r25, r1
     122:	11 24       	eor	r1, r1
     124:	96 95       	lsr	r25
     126:	96 95       	lsr	r25
     128:	96 95       	lsr	r25
     12a:	29 2f       	mov	r18, r25
     12c:	22 0f       	add	r18, r18
     12e:	82 2f       	mov	r24, r18
     130:	88 0f       	add	r24, r24
     132:	88 0f       	add	r24, r24
     134:	82 0f       	add	r24, r18
     136:	68 1b       	sub	r22, r24
     138:	86 2f       	mov	r24, r22
}
     13a:	20 e1       	ldi	r18, 0x10	; 16
     13c:	92 9f       	mul	r25, r18
     13e:	80 0d       	add	r24, r0
     140:	11 24       	eor	r1, r1
     142:	08 95       	ret

00000144 <_ZN3RTC8bcdTobinEh>:
{
   /* char bin;
    bin = ((((data & (1<<7)) |(data & (1<<6)) |(data & (1<<5)) |(data & (1<<4))) * 0x0A) >> 4) + (data & (1<<3)) |(data & (1<<2)) |(data & (1<<1)) |(data & (1<<0));
	
	return bin;*/
    return( (data/16*10) + (data%16) );
     144:	86 2f       	mov	r24, r22
     146:	82 95       	swap	r24
     148:	8f 70       	andi	r24, 0x0F	; 15
     14a:	88 0f       	add	r24, r24
     14c:	98 2f       	mov	r25, r24
     14e:	99 0f       	add	r25, r25
     150:	99 0f       	add	r25, r25
     152:	89 0f       	add	r24, r25
     154:	6f 70       	andi	r22, 0x0F	; 15
}
     156:	86 0f       	add	r24, r22
     158:	08 95       	ret

0000015a <_ZN3RTC10clock_initEv>:


void RTC::clock_init()
{
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	ec 01       	movw	r28, r24
    i2c_start();
     160:	0e 94 64 00 	call	0xc8	; 0xc8 <_ZN3RTC9i2c_startEv>
    i2c_write(RTC_WADDR);
     164:	60 ed       	ldi	r22, 0xD0	; 208
     166:	ce 01       	movw	r24, r28
     168:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
	i2c_write(0x0E);
     16c:	6e e0       	ldi	r22, 0x0E	; 14
     16e:	ce 01       	movw	r24, r28
     170:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
	i2c_write(0x20);
     174:	60 e2       	ldi	r22, 0x20	; 32
     176:	ce 01       	movw	r24, r28
     178:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
	i2c_write(0x08);
     17c:	68 e0       	ldi	r22, 0x08	; 8
     17e:	ce 01       	movw	r24, r28
     180:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
    i2c_stop();
     184:	ce 01       	movw	r24, r28
     186:	0e 94 6c 00 	call	0xd8	; 0xd8 <_ZN3RTC8i2c_stopEv>
	
}
     18a:	df 91       	pop	r29
     18c:	cf 91       	pop	r28
     18e:	08 95       	ret

00000190 <_ZN3RTC7setTimeEiiiiiii>:

void RTC::setTime(int sec, int min, int hour,int day, int mon,int wday, int year)
{
     190:	af 92       	push	r10
     192:	cf 92       	push	r12
     194:	df 92       	push	r13
     196:	ef 92       	push	r14
     198:	ff 92       	push	r15
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	ec 01       	movw	r28, r24
     1a4:	d6 2e       	mov	r13, r22
     1a6:	f4 2e       	mov	r15, r20
     1a8:	12 2f       	mov	r17, r18
    i2c_start();
     1aa:	0e 94 64 00 	call	0xc8	; 0xc8 <_ZN3RTC9i2c_startEv>
    i2c_write(RTC_WADDR);
     1ae:	60 ed       	ldi	r22, 0xD0	; 208
     1b0:	ce 01       	movw	r24, r28
     1b2:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
    i2c_write(0x00);
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	ce 01       	movw	r24, r28
     1ba:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
    i2c_write(binTobcd(sec));
     1be:	6d 2d       	mov	r22, r13
     1c0:	ce 01       	movw	r24, r28
     1c2:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN3RTC8binTobcdEh>
     1c6:	68 2f       	mov	r22, r24
     1c8:	ce 01       	movw	r24, r28
     1ca:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
    i2c_write(binTobcd(min));
     1ce:	6f 2d       	mov	r22, r15
     1d0:	ce 01       	movw	r24, r28
     1d2:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN3RTC8binTobcdEh>
     1d6:	68 2f       	mov	r22, r24
     1d8:	ce 01       	movw	r24, r28
     1da:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
    i2c_write(binTobcd(hour));
     1de:	61 2f       	mov	r22, r17
     1e0:	ce 01       	movw	r24, r28
     1e2:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN3RTC8binTobcdEh>
     1e6:	68 2f       	mov	r22, r24
     1e8:	ce 01       	movw	r24, r28
     1ea:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>

	i2c_write(binTobcd(wday));
     1ee:	6c 2d       	mov	r22, r12
     1f0:	ce 01       	movw	r24, r28
     1f2:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN3RTC8binTobcdEh>
     1f6:	68 2f       	mov	r22, r24
     1f8:	ce 01       	movw	r24, r28
     1fa:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
	i2c_write(binTobcd(day));
     1fe:	60 2f       	mov	r22, r16
     200:	ce 01       	movw	r24, r28
     202:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN3RTC8binTobcdEh>
     206:	68 2f       	mov	r22, r24
     208:	ce 01       	movw	r24, r28
     20a:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
	i2c_write(binTobcd(mon));
     20e:	6e 2d       	mov	r22, r14
     210:	ce 01       	movw	r24, r28
     212:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN3RTC8binTobcdEh>
     216:	68 2f       	mov	r22, r24
     218:	ce 01       	movw	r24, r28
     21a:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
	i2c_write(binTobcd(year));
     21e:	6a 2d       	mov	r22, r10
     220:	ce 01       	movw	r24, r28
     222:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN3RTC8binTobcdEh>
     226:	68 2f       	mov	r22, r24
     228:	ce 01       	movw	r24, r28
     22a:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
	i2c_stop();
     22e:	ce 01       	movw	r24, r28
     230:	0e 94 6c 00 	call	0xd8	; 0xd8 <_ZN3RTC8i2c_stopEv>
}
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	1f 91       	pop	r17
     23a:	0f 91       	pop	r16
     23c:	ff 90       	pop	r15
     23e:	ef 90       	pop	r14
     240:	df 90       	pop	r13
     242:	cf 90       	pop	r12
     244:	af 90       	pop	r10
     246:	08 95       	ret

00000248 <_ZN3RTC8ReadTimeEPiS0_S0_S0_S0_S0_S0_>:

void RTC::ReadTime(int *sec, int *min, int *hour, int *day, int *wday, int *month, int *year)
{
     248:	4f 92       	push	r4
     24a:	5f 92       	push	r5
     24c:	6f 92       	push	r6
     24e:	7f 92       	push	r7
     250:	8f 92       	push	r8
     252:	9f 92       	push	r9
     254:	af 92       	push	r10
     256:	bf 92       	push	r11
     258:	cf 92       	push	r12
     25a:	df 92       	push	r13
     25c:	ef 92       	push	r14
     25e:	ff 92       	push	r15
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	ec 01       	movw	r28, r24
     26a:	4b 01       	movw	r8, r22
     26c:	3a 01       	movw	r6, r20
     26e:	29 01       	movw	r4, r18
    i2c_start();
     270:	0e 94 64 00 	call	0xc8	; 0xc8 <_ZN3RTC9i2c_startEv>
    i2c_write(RTC_WADDR);
     274:	60 ed       	ldi	r22, 0xD0	; 208
     276:	ce 01       	movw	r24, r28
     278:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
    i2c_write(0x00);
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	ce 01       	movw	r24, r28
     280:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
    i2c_stop();
     284:	ce 01       	movw	r24, r28
     286:	0e 94 6c 00 	call	0xd8	; 0xd8 <_ZN3RTC8i2c_stopEv>
	
    i2c_start();
     28a:	ce 01       	movw	r24, r28
     28c:	0e 94 64 00 	call	0xc8	; 0xc8 <_ZN3RTC9i2c_startEv>
    i2c_write(RTC_RADDR);
     290:	61 ed       	ldi	r22, 0xD1	; 209
     292:	ce 01       	movw	r24, r28
     294:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
    *sec = bcdTobin(i2c_read());
     298:	ce 01       	movw	r24, r28
     29a:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN3RTC8i2c_readEv>
     29e:	68 2f       	mov	r22, r24
     2a0:	ce 01       	movw	r24, r28
     2a2:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN3RTC8bcdTobinEh>
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	f4 01       	movw	r30, r8
     2aa:	91 83       	std	Z+1, r25	; 0x01
     2ac:	80 83       	st	Z, r24
    *min = bcdTobin(i2c_read());
     2ae:	ce 01       	movw	r24, r28
     2b0:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN3RTC8i2c_readEv>
     2b4:	68 2f       	mov	r22, r24
     2b6:	ce 01       	movw	r24, r28
     2b8:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN3RTC8bcdTobinEh>
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	f3 01       	movw	r30, r6
     2c0:	91 83       	std	Z+1, r25	; 0x01
     2c2:	80 83       	st	Z, r24
    *hour = bcdTobin(i2c_read());
     2c4:	ce 01       	movw	r24, r28
     2c6:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN3RTC8i2c_readEv>
     2ca:	68 2f       	mov	r22, r24
     2cc:	ce 01       	movw	r24, r28
     2ce:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN3RTC8bcdTobinEh>
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	f2 01       	movw	r30, r4
     2d6:	91 83       	std	Z+1, r25	; 0x01
     2d8:	80 83       	st	Z, r24

    *wday = bcdTobin(i2c_read());
     2da:	ce 01       	movw	r24, r28
     2dc:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN3RTC8i2c_readEv>
     2e0:	68 2f       	mov	r22, r24
     2e2:	ce 01       	movw	r24, r28
     2e4:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN3RTC8bcdTobinEh>
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	f7 01       	movw	r30, r14
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	80 83       	st	Z, r24
    *day = bcdTobin(i2c_read());
     2f0:	ce 01       	movw	r24, r28
     2f2:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN3RTC8i2c_readEv>
     2f6:	68 2f       	mov	r22, r24
     2f8:	ce 01       	movw	r24, r28
     2fa:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN3RTC8bcdTobinEh>
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	f8 01       	movw	r30, r16
     302:	91 83       	std	Z+1, r25	; 0x01
     304:	80 83       	st	Z, r24
    *month = bcdTobin(i2c_read());
     306:	ce 01       	movw	r24, r28
     308:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN3RTC8i2c_readEv>
     30c:	68 2f       	mov	r22, r24
     30e:	ce 01       	movw	r24, r28
     310:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN3RTC8bcdTobinEh>
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	f6 01       	movw	r30, r12
     318:	91 83       	std	Z+1, r25	; 0x01
     31a:	80 83       	st	Z, r24
    *year = bcdTobin(i2c_lastread());
     31c:	ce 01       	movw	r24, r28
     31e:	0e 94 84 00 	call	0x108	; 0x108 <_ZN3RTC12i2c_lastreadEv>
     322:	68 2f       	mov	r22, r24
     324:	ce 01       	movw	r24, r28
     326:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN3RTC8bcdTobinEh>
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	f5 01       	movw	r30, r10
     32e:	91 83       	std	Z+1, r25	; 0x01
     330:	80 83       	st	Z, r24
    i2c_stop();
     332:	ce 01       	movw	r24, r28
     334:	0e 94 6c 00 	call	0xd8	; 0xd8 <_ZN3RTC8i2c_stopEv>

}
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
     340:	ff 90       	pop	r15
     342:	ef 90       	pop	r14
     344:	df 90       	pop	r13
     346:	cf 90       	pop	r12
     348:	bf 90       	pop	r11
     34a:	af 90       	pop	r10
     34c:	9f 90       	pop	r9
     34e:	8f 90       	pop	r8
     350:	7f 90       	pop	r7
     352:	6f 90       	pop	r6
     354:	5f 90       	pop	r5
     356:	4f 90       	pop	r4
     358:	08 95       	ret

0000035a <_ZN3RTC4initEv>:

void RTC::init()
{
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	ec 01       	movw	r28, r24
    i2c_init();
     360:	0e 94 60 00 	call	0xc0	; 0xc0 <_ZN3RTC8i2c_initEv>
	clock_init();
     364:	ce 01       	movw	r24, r28
     366:	0e 94 ad 00 	call	0x15a	; 0x15a <_ZN3RTC10clock_initEv>
}
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <_ZN3RTC7commandEh>:

void RTC::command(unsigned char cmd)
{
	port = (port & 0x0F)|(cmd & 0xF0);
     370:	8b b1       	in	r24, 0x0b	; 11
     372:	8f 70       	andi	r24, 0x0F	; 15
     374:	96 2f       	mov	r25, r22
     376:	90 7f       	andi	r25, 0xF0	; 240
     378:	89 2b       	or	r24, r25
     37a:	8b b9       	out	0x0b, r24	; 11
	port &= ~(1<<rs);
     37c:	8b b1       	in	r24, 0x0b	; 11
     37e:	8e 7f       	andi	r24, 0xFE	; 254
     380:	8b b9       	out	0x0b, r24	; 11
	port |= (1<<en);
     382:	8b b1       	in	r24, 0x0b	; 11
     384:	82 60       	ori	r24, 0x02	; 2
     386:	8b b9       	out	0x0b, r24	; 11
	//_delay_us(2);
	port &= ~(1<<en);
     388:	8b b1       	in	r24, 0x0b	; 11
     38a:	8d 7f       	andi	r24, 0xFD	; 253
     38c:	8b b9       	out	0x0b, r24	; 11
	//_delay_us(200);
	port = (port & 0x0F)|(cmd << 4);
     38e:	8b b1       	in	r24, 0x0b	; 11
     390:	90 e1       	ldi	r25, 0x10	; 16
     392:	69 9f       	mul	r22, r25
     394:	b0 01       	movw	r22, r0
     396:	11 24       	eor	r1, r1
     398:	8f 70       	andi	r24, 0x0F	; 15
     39a:	68 2b       	or	r22, r24
     39c:	6b b9       	out	0x0b, r22	; 11
	port |= (1<<en);
     39e:	8b b1       	in	r24, 0x0b	; 11
     3a0:	82 60       	ori	r24, 0x02	; 2
     3a2:	8b b9       	out	0x0b, r24	; 11
	//_delay_us(2);
	port &= ~(1<<en);
     3a4:	8b b1       	in	r24, 0x0b	; 11
     3a6:	8d 7f       	andi	r24, 0xFD	; 253
     3a8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3aa:	87 ec       	ldi	r24, 0xC7	; 199
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <_ZN3RTC7commandEh+0x3e>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <_ZN3RTC7commandEh+0x44>
     3b4:	00 00       	nop
     3b6:	08 95       	ret

000003b8 <_ZN3RTC8lcd_initEv>:
	_delay_us(50);
	
}

void RTC::lcd_init(void)
{
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	ec 01       	movw	r28, r24
	direction = 0xFF;
     3be:	8f ef       	ldi	r24, 0xFF	; 255
     3c0:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c2:	8f e3       	ldi	r24, 0x3F	; 63
     3c4:	9f e1       	ldi	r25, 0x1F	; 31
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <_ZN3RTC8lcd_initEv+0xe>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <_ZN3RTC8lcd_initEv+0x14>
     3cc:	00 00       	nop
	_delay_ms(2);
	
	command(0x02);
     3ce:	62 e0       	ldi	r22, 0x02	; 2
     3d0:	ce 01       	movw	r24, r28
     3d2:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
	command(0x28);
     3d6:	68 e2       	ldi	r22, 0x28	; 40
     3d8:	ce 01       	movw	r24, r28
     3da:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
	command(0x0c);
     3de:	6c e0       	ldi	r22, 0x0C	; 12
     3e0:	ce 01       	movw	r24, r28
     3e2:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
	command(0x06);
     3e6:	66 e0       	ldi	r22, 0x06	; 6
     3e8:	ce 01       	movw	r24, r28
     3ea:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
	command(0x01);
     3ee:	61 e0       	ldi	r22, 0x01	; 1
     3f0:	ce 01       	movw	r24, r28
     3f2:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
     3f6:	8f e3       	ldi	r24, 0x3F	; 63
     3f8:	9f e1       	ldi	r25, 0x1F	; 31
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <_ZN3RTC8lcd_initEv+0x42>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
     400:	00 00       	nop
	_delay_ms(2);
	
}
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	08 95       	ret

00000408 <_ZN3RTC9characterEh>:
	 }
		 
 }
 void RTC::character(unsigned char data)
 {
	 port = (port & 0x0F)|(data & 0xF0);
     408:	8b b1       	in	r24, 0x0b	; 11
     40a:	8f 70       	andi	r24, 0x0F	; 15
     40c:	96 2f       	mov	r25, r22
     40e:	90 7f       	andi	r25, 0xF0	; 240
     410:	89 2b       	or	r24, r25
     412:	8b b9       	out	0x0b, r24	; 11
	 port |= (1<<rs);
     414:	8b b1       	in	r24, 0x0b	; 11
     416:	81 60       	ori	r24, 0x01	; 1
     418:	8b b9       	out	0x0b, r24	; 11
	 port |= (1<<en);
     41a:	8b b1       	in	r24, 0x0b	; 11
     41c:	82 60       	ori	r24, 0x02	; 2
     41e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     420:	85 e0       	ldi	r24, 0x05	; 5
     422:	8a 95       	dec	r24
     424:	f1 f7       	brne	.-4      	; 0x422 <_ZN3RTC9characterEh+0x1a>
     426:	00 00       	nop
	 _delay_us(1);
	 port &= ~(1<<en);
     428:	8b b1       	in	r24, 0x0b	; 11
     42a:	8d 7f       	andi	r24, 0xFD	; 253
     42c:	8b b9       	out	0x0b, r24	; 11
	 //_delay_ms(200);
	 port = (port & 0x0F)|(data << 4);
     42e:	8b b1       	in	r24, 0x0b	; 11
     430:	90 e1       	ldi	r25, 0x10	; 16
     432:	69 9f       	mul	r22, r25
     434:	b0 01       	movw	r22, r0
     436:	11 24       	eor	r1, r1
     438:	8f 70       	andi	r24, 0x0F	; 15
     43a:	68 2b       	or	r22, r24
     43c:	6b b9       	out	0x0b, r22	; 11
	 
	 port |= (1<<en);
     43e:	8b b1       	in	r24, 0x0b	; 11
     440:	82 60       	ori	r24, 0x02	; 2
     442:	8b b9       	out	0x0b, r24	; 11
	 //_delay_us(1);
	 port &= ~(1<<en);
     444:	8b b1       	in	r24, 0x0b	; 11
     446:	8d 7f       	andi	r24, 0xFD	; 253
     448:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     44a:	8f e3       	ldi	r24, 0x3F	; 63
     44c:	9f e1       	ldi	r25, 0x1F	; 31
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	f1 f7       	brne	.-4      	; 0x44e <_ZN3RTC9characterEh+0x46>
     452:	00 c0       	rjmp	.+0      	; 0x454 <_ZN3RTC9characterEh+0x4c>
     454:	00 00       	nop
     456:	08 95       	ret

00000458 <_ZN3RTC6stringEPc>:
	command(0x01);
	_delay_ms(2);
	
}
 void RTC::string(char *string_00)
 {
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	7c 01       	movw	r14, r24
     466:	8b 01       	movw	r16, r22
	 int i;
	 for ( i = 0; string_00[i]!=0;i++)
     468:	c0 e0       	ldi	r28, 0x00	; 0
     46a:	d0 e0       	ldi	r29, 0x00	; 0
     46c:	f8 01       	movw	r30, r16
     46e:	ec 0f       	add	r30, r28
     470:	fd 1f       	adc	r31, r29
     472:	60 81       	ld	r22, Z
     474:	66 23       	and	r22, r22
     476:	29 f0       	breq	.+10     	; 0x482 <_ZN3RTC6stringEPc+0x2a>
	 {
		 character(string_00[i]);
     478:	c7 01       	movw	r24, r14
     47a:	0e 94 04 02 	call	0x408	; 0x408 <_ZN3RTC9characterEh>
	
}
 void RTC::string(char *string_00)
 {
	 int i;
	 for ( i = 0; string_00[i]!=0;i++)
     47e:	21 96       	adiw	r28, 0x01	; 1
     480:	f5 cf       	rjmp	.-22     	; 0x46c <_ZN3RTC6stringEPc+0x14>
	 {
		 character(string_00[i]);
	 }
		 
 }
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	ff 90       	pop	r15
     48c:	ef 90       	pop	r14
     48e:	08 95       	ret

00000490 <_ZN3RTC5clearEv>:
	 _delay_ms(2);
	 
 }
 
 void RTC::clear()
 {
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	ec 01       	movw	r28, r24
	 command(0x01);
     496:	61 e0       	ldi	r22, 0x01	; 1
     498:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
     49c:	8f e3       	ldi	r24, 0x3F	; 63
     49e:	9f e1       	ldi	r25, 0x1F	; 31
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <_ZN3RTC5clearEv+0x10>
     4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <_ZN3RTC5clearEv+0x16>
     4a6:	00 00       	nop
	 _delay_ms(2);
	 command(0x00);
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	ce 01       	movw	r24, r28
     4ac:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
 }
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <_ZN3RTC9SetCursorEcc>:
 
 void RTC::SetCursor(char row, char col)
 {
	 if (row == 0 && col<16){
     4b6:	61 11       	cpse	r22, r1
     4b8:	08 c0       	rjmp	.+16     	; 0x4ca <_ZN3RTC9SetCursorEcc+0x14>
     4ba:	40 31       	cpi	r20, 0x10	; 16
     4bc:	30 f4       	brcc	.+12     	; 0x4ca <_ZN3RTC9SetCursorEcc+0x14>
		 command((col & 0x0F)|0x80);
     4be:	4f 70       	andi	r20, 0x0F	; 15
     4c0:	64 2f       	mov	r22, r20
     4c2:	60 68       	ori	r22, 0x80	; 128
     4c4:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
     4c8:	08 95       	ret
	 }
	 else if(row == 1 && col <16) {
     4ca:	61 30       	cpi	r22, 0x01	; 1
     4cc:	39 f4       	brne	.+14     	; 0x4dc <_ZN3RTC9SetCursorEcc+0x26>
     4ce:	40 31       	cpi	r20, 0x10	; 16
     4d0:	28 f4       	brcc	.+10     	; 0x4dc <_ZN3RTC9SetCursorEcc+0x26>
		 command((col & 0x0F)|0xC0);
     4d2:	4f 70       	andi	r20, 0x0F	; 15
     4d4:	64 2f       	mov	r22, r20
     4d6:	60 6c       	ori	r22, 0xC0	; 192
     4d8:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
     4dc:	08 95       	ret

000004de <_ZN3RTC5BlinkEv>:
	 }
 }
 
 void RTC::Blink()
 {
	 command(0x0F);
     4de:	6f e0       	ldi	r22, 0x0F	; 15
     4e0:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
     4e4:	08 95       	ret

000004e6 <_ZN3RTC7NoBlinkEv>:
 }
  void RTC::NoBlink()
  {
	  command(0x0C);
     4e6:	6c e0       	ldi	r22, 0x0C	; 12
     4e8:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
     4ec:	08 95       	ret

000004ee <_ZN3RTC11DisplayTimeEiiiiiii>:
  }

 // functions 
 void RTC::DisplayTime(int sec,int min,int hour, int day, int wday, int month, int year)
 {
     4ee:	6f 92       	push	r6
     4f0:	7f 92       	push	r7
     4f2:	8f 92       	push	r8
     4f4:	9f 92       	push	r9
     4f6:	af 92       	push	r10
     4f8:	bf 92       	push	r11
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	a0 97       	sbiw	r28, 0x20	; 32
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	4c 01       	movw	r8, r24
	 char time[16];
	 char date[16];
	 sprintf(time,"%.2d:%.2d:%.2d\n",sec,min,hour);
     51c:	3f 93       	push	r19
     51e:	2f 93       	push	r18
     520:	5f 93       	push	r21
     522:	4f 93       	push	r20
     524:	7f 93       	push	r23
     526:	6f 93       	push	r22
     528:	8f e4       	ldi	r24, 0x4F	; 79
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	9f 93       	push	r25
     52e:	8f 93       	push	r24
     530:	ce 01       	movw	r24, r28
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	3c 01       	movw	r6, r24
     536:	9f 93       	push	r25
     538:	8f 93       	push	r24
     53a:	0e 94 74 08 	call	0x10e8	; 0x10e8 <sprintf>
	 sprintf(date,"%.2d/%.2d/%.2d",day,month,year);
     53e:	bf 92       	push	r11
     540:	af 92       	push	r10
     542:	df 92       	push	r13
     544:	cf 92       	push	r12
     546:	1f 93       	push	r17
     548:	0f 93       	push	r16
     54a:	8f e5       	ldi	r24, 0x5F	; 95
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	9f 93       	push	r25
     550:	8f 93       	push	r24
     552:	8e 01       	movw	r16, r28
     554:	0f 5e       	subi	r16, 0xEF	; 239
     556:	1f 4f       	sbci	r17, 0xFF	; 255
     558:	1f 93       	push	r17
     55a:	0f 93       	push	r16
     55c:	0e 94 74 08 	call	0x10e8	; 0x10e8 <sprintf>
	 string(time);
     560:	b3 01       	movw	r22, r6
     562:	c4 01       	movw	r24, r8
     564:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 string("");
     568:	6e e5       	ldi	r22, 0x5E	; 94
     56a:	71 e0       	ldi	r23, 0x01	; 1
     56c:	c4 01       	movw	r24, r8
     56e:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 string(daysOfweek[wday]);
     572:	b7 01       	movw	r22, r14
     574:	66 0f       	add	r22, r22
     576:	77 1f       	adc	r23, r23
     578:	66 0f       	add	r22, r22
     57a:	77 1f       	adc	r23, r23
     57c:	66 0f       	add	r22, r22
     57e:	77 1f       	adc	r23, r23
     580:	6e 19       	sub	r22, r14
     582:	7f 09       	sbc	r23, r15
     584:	60 50       	subi	r22, 0x00	; 0
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	c4 01       	movw	r24, r8
     58a:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 command(0xC0);
     58e:	60 ec       	ldi	r22, 0xC0	; 192
     590:	c4 01       	movw	r24, r8
     592:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
	 string(date);
     596:	b8 01       	movw	r22, r16
     598:	c4 01       	movw	r24, r8
     59a:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
 }
     59e:	0f b6       	in	r0, 0x3f	; 63
     5a0:	f8 94       	cli
     5a2:	de bf       	out	0x3e, r29	; 62
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	cd bf       	out	0x3d, r28	; 61
     5a8:	a0 96       	adiw	r28, 0x20	; 32
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	ff 90       	pop	r15
     5be:	ef 90       	pop	r14
     5c0:	df 90       	pop	r13
     5c2:	cf 90       	pop	r12
     5c4:	bf 90       	pop	r11
     5c6:	af 90       	pop	r10
     5c8:	9f 90       	pop	r9
     5ca:	8f 90       	pop	r8
     5cc:	7f 90       	pop	r7
     5ce:	6f 90       	pop	r6
     5d0:	08 95       	ret

000005d2 <_ZN3RTC16DisplayTimeBlinkEiiiiiiii>:
 
 void RTC::DisplayTimeBlink(int sec,int min,int hour, int day, int wday, int month, int year, int mode)
 {
     5d2:	2f 92       	push	r2
     5d4:	3f 92       	push	r3
     5d6:	4f 92       	push	r4
     5d8:	5f 92       	push	r5
     5da:	6f 92       	push	r6
     5dc:	7f 92       	push	r7
     5de:	8f 92       	push	r8
     5e0:	9f 92       	push	r9
     5e2:	af 92       	push	r10
     5e4:	bf 92       	push	r11
     5e6:	cf 92       	push	r12
     5e8:	df 92       	push	r13
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	a4 97       	sbiw	r28, 0x24	; 36
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	3c 01       	movw	r6, r24
     608:	69 a3       	std	Y+33, r22	; 0x21
     60a:	7a a3       	std	Y+34, r23	; 0x22
     60c:	54 2e       	mov	r5, r20
     60e:	45 2e       	mov	r4, r21
     610:	32 2e       	mov	r3, r18
     612:	23 2e       	mov	r2, r19
     614:	0b a3       	std	Y+35, r16	; 0x23
     616:	1c a3       	std	Y+36, r17	; 0x24
	
	 //clear();
	 SetCursor(0,0);
     618:	40 e0       	ldi	r20, 0x00	; 0
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN3RTC9SetCursorEcc>
	 char time[16];
	 char date[16];
	 sprintf(time,"%.2d:%.2d:%.2d",sec,min,hour);
     620:	2f 92       	push	r2
     622:	3f 92       	push	r3
     624:	4f 92       	push	r4
     626:	5f 92       	push	r5
     628:	2a a1       	ldd	r18, Y+34	; 0x22
     62a:	2f 93       	push	r18
     62c:	89 a1       	ldd	r24, Y+33	; 0x21
     62e:	8f 93       	push	r24
     630:	8e e6       	ldi	r24, 0x6E	; 110
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	9f 93       	push	r25
     636:	8f 93       	push	r24
     638:	8e 01       	movw	r16, r28
     63a:	0f 5f       	subi	r16, 0xFF	; 255
     63c:	1f 4f       	sbci	r17, 0xFF	; 255
     63e:	1f 93       	push	r17
     640:	0f 93       	push	r16
     642:	0e 94 74 08 	call	0x10e8	; 0x10e8 <sprintf>
	 sprintf(date,"%.2d/%.2d/%.2d",day,month,year);
     646:	bf 92       	push	r11
     648:	af 92       	push	r10
     64a:	df 92       	push	r13
     64c:	cf 92       	push	r12
     64e:	9c a1       	ldd	r25, Y+36	; 0x24
     650:	9f 93       	push	r25
     652:	2b a1       	ldd	r18, Y+35	; 0x23
     654:	2f 93       	push	r18
     656:	8f e5       	ldi	r24, 0x5F	; 95
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	9f 93       	push	r25
     65c:	8f 93       	push	r24
     65e:	6e 01       	movw	r12, r28
     660:	81 e1       	ldi	r24, 0x11	; 17
     662:	c8 0e       	add	r12, r24
     664:	d1 1c       	adc	r13, r1
     666:	df 92       	push	r13
     668:	cf 92       	push	r12
     66a:	0e 94 74 08 	call	0x10e8	; 0x10e8 <sprintf>
	 string(time);
     66e:	b8 01       	movw	r22, r16
     670:	c3 01       	movw	r24, r6
     672:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 string(" ");
     676:	6c e8       	ldi	r22, 0x8C	; 140
     678:	71 e0       	ldi	r23, 0x01	; 1
     67a:	c3 01       	movw	r24, r6
     67c:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 string(daysOfweek[wday]);
     680:	b7 01       	movw	r22, r14
     682:	66 0f       	add	r22, r22
     684:	77 1f       	adc	r23, r23
     686:	66 0f       	add	r22, r22
     688:	77 1f       	adc	r23, r23
     68a:	66 0f       	add	r22, r22
     68c:	77 1f       	adc	r23, r23
     68e:	6e 19       	sub	r22, r14
     690:	7f 09       	sbc	r23, r15
     692:	60 50       	subi	r22, 0x00	; 0
     694:	7f 4f       	sbci	r23, 0xFF	; 255
     696:	c3 01       	movw	r24, r6
     698:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 command(0xC0);
     69c:	60 ec       	ldi	r22, 0xC0	; 192
     69e:	c3 01       	movw	r24, r6
     6a0:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
	 string(date);
     6a4:	b6 01       	movw	r22, r12
     6a6:	c3 01       	movw	r24, r6
     6a8:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 int col = pos[mode][0];
     6ac:	f4 01       	movw	r30, r8
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	ee 0f       	add	r30, r30
     6b4:	ff 1f       	adc	r31, r31
     6b6:	ef 5c       	subi	r30, 0xCF	; 207
     6b8:	fe 4f       	sbci	r31, 0xFE	; 254
     6ba:	40 81       	ld	r20, Z
	 int row = pos[mode][1];
     6bc:	62 81       	ldd	r22, Z+2	; 0x02
	 SetCursor(row,col);
     6be:	c3 01       	movw	r24, r6
     6c0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN3RTC9SetCursorEcc>
	 {
		 Blink();
		 _delay_ms(5);
		 NoBlink();
	 }*/
	Blink();
     6c4:	c3 01       	movw	r24, r6
     6c6:	0e 94 6f 02 	call	0x4de	; 0x4de <_ZN3RTC5BlinkEv>
     6ca:	9f ef       	ldi	r25, 0xFF	; 255
     6cc:	21 ee       	ldi	r18, 0xE1	; 225
     6ce:	84 e0       	ldi	r24, 0x04	; 4
     6d0:	91 50       	subi	r25, 0x01	; 1
     6d2:	20 40       	sbci	r18, 0x00	; 0
     6d4:	80 40       	sbci	r24, 0x00	; 0
     6d6:	e1 f7       	brne	.-8      	; 0x6d0 <_ZN3RTC16DisplayTimeBlinkEiiiiiiii+0xfe>
     6d8:	00 c0       	rjmp	.+0      	; 0x6da <_ZN3RTC16DisplayTimeBlinkEiiiiiiii+0x108>
     6da:	00 00       	nop
	//NoBlink();

	 
	 //clear();
	 //_delay_us(1);
 }
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	a4 96       	adiw	r28, 0x24	; 36
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	cd bf       	out	0x3d, r28	; 61
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	ff 90       	pop	r15
     6fc:	ef 90       	pop	r14
     6fe:	df 90       	pop	r13
     700:	cf 90       	pop	r12
     702:	bf 90       	pop	r11
     704:	af 90       	pop	r10
     706:	9f 90       	pop	r9
     708:	8f 90       	pop	r8
     70a:	7f 90       	pop	r7
     70c:	6f 90       	pop	r6
     70e:	5f 90       	pop	r5
     710:	4f 90       	pop	r4
     712:	3f 90       	pop	r3
     714:	2f 90       	pop	r2
     716:	08 95       	ret

00000718 <_ZN3RTC9alarmdispEiii>:
 
 void RTC::alarmdisp(int min, int hour, int mode)
 {
     718:	af 92       	push	r10
     71a:	bf 92       	push	r11
     71c:	cf 92       	push	r12
     71e:	df 92       	push	r13
     720:	ef 92       	push	r14
     722:	ff 92       	push	r15
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	60 97       	sbiw	r28, 0x10	; 16
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	de bf       	out	0x3e, r29	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	8c 01       	movw	r16, r24
     73e:	b6 2e       	mov	r11, r22
     740:	a7 2e       	mov	r10, r23
     742:	f4 2e       	mov	r15, r20
     744:	e5 2e       	mov	r14, r21
     746:	69 01       	movw	r12, r18
	 //clear();
	 SetCursor(0,0);
     748:	40 e0       	ldi	r20, 0x00	; 0
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN3RTC9SetCursorEcc>
	 string("HOUR:MIN        ");
     750:	6d e7       	ldi	r22, 0x7D	; 125
     752:	71 e0       	ldi	r23, 0x01	; 1
     754:	c8 01       	movw	r24, r16
     756:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 SetCursor(1,0);
     75a:	40 e0       	ldi	r20, 0x00	; 0
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	c8 01       	movw	r24, r16
     760:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN3RTC9SetCursorEcc>
	 char time[16];
	 int col;
	 sprintf(time,"%.2d  :%.2d",hour,min);
     764:	af 92       	push	r10
     766:	bf 92       	push	r11
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	8e e8       	ldi	r24, 0x8E	; 142
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	9f 93       	push	r25
     772:	8f 93       	push	r24
     774:	ce 01       	movw	r24, r28
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	7c 01       	movw	r14, r24
     77a:	9f 93       	push	r25
     77c:	8f 93       	push	r24
     77e:	0e 94 74 08 	call	0x10e8	; 0x10e8 <sprintf>
	 string(time);
     782:	b7 01       	movw	r22, r14
     784:	c8 01       	movw	r24, r16
     786:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 if (mode == 1){
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	de bf       	out	0x3e, r29	; 62
     790:	0f be       	out	0x3f, r0	; 63
     792:	cd bf       	out	0x3d, r28	; 61
     794:	ca 94       	dec	r12
     796:	cd 28       	or	r12, r13
     798:	11 f4       	brne	.+4      	; 0x79e <_ZN3RTC9alarmdispEiii+0x86>
		 col = 1; 
     79a:	41 e0       	ldi	r20, 0x01	; 1
     79c:	01 c0       	rjmp	.+2      	; 0x7a0 <_ZN3RTC9alarmdispEiii+0x88>
	 }
	 else{
		 col = 6;
     79e:	46 e0       	ldi	r20, 0x06	; 6
	 }
	 SetCursor(1,col);
     7a0:	61 e0       	ldi	r22, 0x01	; 1
     7a2:	c8 01       	movw	r24, r16
     7a4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN3RTC9SetCursorEcc>

	Blink();
     7a8:	c8 01       	movw	r24, r16
     7aa:	0e 94 6f 02 	call	0x4de	; 0x4de <_ZN3RTC5BlinkEv>
	//_delay_ms(100);
	//NoBlink();
}
     7ae:	60 96       	adiw	r28, 0x10	; 16
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	bf 90       	pop	r11
     7cc:	af 90       	pop	r10
     7ce:	08 95       	ret

000007d0 <_ZN3RTC8slotdispEi>:
 
 void RTC::slotdisp(int slot)
 {
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	60 97       	sbiw	r28, 0x10	; 16
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	8c 01       	movw	r16, r24
     7ee:	f6 2e       	mov	r15, r22
     7f0:	e7 2e       	mov	r14, r23
	 //clear();
	 SetCursor(0,0);
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN3RTC9SetCursorEcc>
	 string("SELECT SLOT        ");
     7fa:	6a e9       	ldi	r22, 0x9A	; 154
     7fc:	71 e0       	ldi	r23, 0x01	; 1
     7fe:	c8 01       	movw	r24, r16
     800:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 SetCursor(1,0);
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	61 e0       	ldi	r22, 0x01	; 1
     808:	c8 01       	movw	r24, r16
     80a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN3RTC9SetCursorEcc>
	 char slot_[16];
	 sprintf(slot_, "%d",slot);
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	8e ea       	ldi	r24, 0xAE	; 174
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	9f 93       	push	r25
     818:	8f 93       	push	r24
     81a:	ce 01       	movw	r24, r28
     81c:	01 96       	adiw	r24, 0x01	; 1
     81e:	7c 01       	movw	r14, r24
     820:	9f 93       	push	r25
     822:	8f 93       	push	r24
     824:	0e 94 74 08 	call	0x10e8	; 0x10e8 <sprintf>
	 string(slot_);
     828:	b7 01       	movw	r22, r14
     82a:	c8 01       	movw	r24, r16
     82c:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	60 96       	adiw	r28, 0x10	; 16
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	de bf       	out	0x3e, r29	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	cd bf       	out	0x3d, r28	; 61
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	ff 90       	pop	r15
     852:	ef 90       	pop	r14
     854:	08 95       	ret

00000856 <_Z41__static_initialization_and_destruction_0ii>:
		}
		_delay_ms(500);
	}
	
	
     856:	01 97       	sbiw	r24, 0x01	; 1
     858:	49 f4       	brne	.+18     	; 0x86c <_Z41__static_initialization_and_destruction_0ii+0x16>
     85a:	6f 3f       	cpi	r22, 0xFF	; 255
     85c:	7f 4f       	sbci	r23, 0xFF	; 255
     85e:	31 f4       	brne	.+12     	; 0x86c <_Z41__static_initialization_and_destruction_0ii+0x16>
#include "RTC.h"

#include <stdio.h>


RTC rtc(1);
     860:	61 e0       	ldi	r22, 0x01	; 1
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	82 eb       	ldi	r24, 0xB2	; 178
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN3RTCC1Ei>
     86c:	08 95       	ret

0000086e <main>:

int main()
{
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	c7 54       	subi	r28, 0x47	; 71
     878:	d1 09       	sbc	r29, r1
     87a:	0f b6       	in	r0, 0x3f	; 63
     87c:	f8 94       	cli
     87e:	de bf       	out	0x3e, r29	; 62
     880:	0f be       	out	0x3f, r0	; 63
     882:	cd bf       	out	0x3d, r28	; 61
	
	rtc.init();
     884:	82 eb       	ldi	r24, 0xB2	; 178
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	0e 94 ad 01 	call	0x35a	; 0x35a <_ZN3RTC4initEv>
	rtc.lcd_init();
     88c:	82 eb       	ldi	r24, 0xB2	; 178
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_ZN3RTC8lcd_initEv>
	
	
	DDRB = 0b00000010;
     894:	82 e0       	ldi	r24, 0x02	; 2
     896:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b00000100;
     898:	84 e0       	ldi	r24, 0x04	; 4
     89a:	8a b9       	out	0x0a, r24	; 10
	PORTB = 0b00011111;
     89c:	8f e1       	ldi	r24, 0x1F	; 31
     89e:	85 b9       	out	0x05, r24	; 5
	
	
	rtc.setTime(0,0,0,30,4,5,12);
     8a0:	0f 2e       	mov	r0, r31
     8a2:	fc e0       	ldi	r31, 0x0C	; 12
     8a4:	af 2e       	mov	r10, r31
     8a6:	b1 2c       	mov	r11, r1
     8a8:	f0 2d       	mov	r31, r0
     8aa:	0f 2e       	mov	r0, r31
     8ac:	f5 e0       	ldi	r31, 0x05	; 5
     8ae:	cf 2e       	mov	r12, r31
     8b0:	d1 2c       	mov	r13, r1
     8b2:	f0 2d       	mov	r31, r0
     8b4:	68 94       	set
     8b6:	ee 24       	eor	r14, r14
     8b8:	e2 f8       	bld	r14, 2
     8ba:	f1 2c       	mov	r15, r1
     8bc:	0e e1       	ldi	r16, 0x1E	; 30
     8be:	10 e0       	ldi	r17, 0x00	; 0
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	82 eb       	ldi	r24, 0xB2	; 178
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN3RTC7setTimeEiiiiiii>
	
	int IsEditingmode = 0;
	int modeStatus = 0;
	int isalarmeditingmode = 0;
	int alarmmode = 0;
	int alarm_min[5] = {0, 0, 0, 0, 0}; // variables for set the alarm
     8d4:	8a e0       	ldi	r24, 0x0A	; 10
     8d6:	fe 01       	movw	r30, r28
     8d8:	31 96       	adiw	r30, 0x01	; 1
     8da:	df 01       	movw	r26, r30
     8dc:	28 2f       	mov	r18, r24
     8de:	1d 92       	st	X+, r1
     8e0:	2a 95       	dec	r18
     8e2:	e9 f7       	brne	.-6      	; 0x8de <main+0x70>
	int alarm_hour[5] = {0, 0, 0, 0, 0};//  variables for set the alarm
     8e4:	3a 96       	adiw	r30, 0x0a	; 10
     8e6:	df 01       	movw	r26, r30
     8e8:	28 2f       	mov	r18, r24
     8ea:	1d 92       	st	X+, r1
     8ec:	2a 95       	dec	r18
     8ee:	e9 f7       	brne	.-6      	; 0x8ea <main+0x7c>
	int init_alarm[5] = {0, 0, 0, 0, 0};	
     8f0:	3a 96       	adiw	r30, 0x0a	; 10
     8f2:	df 01       	movw	r26, r30
     8f4:	1d 92       	st	X+, r1
     8f6:	8a 95       	dec	r24
     8f8:	e9 f7       	brne	.-6      	; 0x8f4 <main+0x86>
	int manual_stop[5] = {1, 1, 1, 1, 1};
     8fa:	8a e0       	ldi	r24, 0x0A	; 10
     8fc:	e5 e4       	ldi	r30, 0x45	; 69
     8fe:	f1 e0       	ldi	r31, 0x01	; 1
     900:	de 01       	movw	r26, r28
     902:	5f 96       	adiw	r26, 0x1f	; 31
     904:	01 90       	ld	r0, Z+
     906:	0d 92       	st	X+, r0
     908:	8a 95       	dec	r24
     90a:	e1 f7       	brne	.-8      	; 0x904 <__stack+0x5>
	int alarmslot = 0;
	int select_slot = 0;
	int current_alarm;
	int isalarmblinking = 0;
	int var = 0;	
     90c:	22 96       	adiw	r28, 0x02	; 2
     90e:	1f ae       	std	Y+63, r1	; 0x3f
     910:	1e ae       	std	Y+62, r1	; 0x3e
     912:	22 97       	sbiw	r28, 0x02	; 2
	int init_alarm[5] = {0, 0, 0, 0, 0};	
	int manual_stop[5] = {1, 1, 1, 1, 1};
	int alarmslot = 0;
	int select_slot = 0;
	int current_alarm;
	int isalarmblinking = 0;
     914:	21 2c       	mov	r2, r1
     916:	31 2c       	mov	r3, r1
	int alarm_min[5] = {0, 0, 0, 0, 0}; // variables for set the alarm
	int alarm_hour[5] = {0, 0, 0, 0, 0};//  variables for set the alarm
	int init_alarm[5] = {0, 0, 0, 0, 0};	
	int manual_stop[5] = {1, 1, 1, 1, 1};
	int alarmslot = 0;
	int select_slot = 0;
     918:	26 96       	adiw	r28, 0x06	; 6
     91a:	1f ae       	std	Y+63, r1	; 0x3f
     91c:	1e ae       	std	Y+62, r1	; 0x3e
     91e:	26 97       	sbiw	r28, 0x06	; 6
	int alarmmode = 0;
	int alarm_min[5] = {0, 0, 0, 0, 0}; // variables for set the alarm
	int alarm_hour[5] = {0, 0, 0, 0, 0};//  variables for set the alarm
	int init_alarm[5] = {0, 0, 0, 0, 0};	
	int manual_stop[5] = {1, 1, 1, 1, 1};
	int alarmslot = 0;
     920:	24 96       	adiw	r28, 0x04	; 4
     922:	1f ae       	std	Y+63, r1	; 0x3f
     924:	1e ae       	std	Y+62, r1	; 0x3e
     926:	24 97       	sbiw	r28, 0x04	; 4
	
	
	int IsEditingmode = 0;
	int modeStatus = 0;
	int isalarmeditingmode = 0;
	int alarmmode = 0;
     928:	28 96       	adiw	r28, 0x08	; 8
     92a:	1f ae       	std	Y+63, r1	; 0x3f
     92c:	1e ae       	std	Y+62, r1	; 0x3e
     92e:	28 97       	sbiw	r28, 0x08	; 8
	
	
	
	int IsEditingmode = 0;
	int modeStatus = 0;
	int isalarmeditingmode = 0;
     930:	1d ae       	std	Y+61, r1	; 0x3d
     932:	1c ae       	std	Y+60, r1	; 0x3c
	rtc.setTime(0,0,0,30,4,5,12);
	
	
	
	int IsEditingmode = 0;
	int modeStatus = 0;
     934:	41 2c       	mov	r4, r1
     936:	51 2c       	mov	r5, r1
	
	rtc.setTime(0,0,0,30,4,5,12);
	
	
	
	int IsEditingmode = 0;
     938:	61 2c       	mov	r6, r1
     93a:	71 2c       	mov	r7, r1

	
	
	while (1)
	{
		rtc.lcd_init();
     93c:	82 eb       	ldi	r24, 0xB2	; 178
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_ZN3RTC8lcd_initEv>
		int sec, min, hour, day, wday, month, year;
		rtc.NoBlink();
     944:	82 eb       	ldi	r24, 0xB2	; 178
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_ZN3RTC7NoBlinkEv>
		rtc.ReadTime(&sec,&min,&hour,&day,&wday,&month,&year);
     94c:	fe 01       	movw	r30, r28
     94e:	b9 96       	adiw	r30, 0x29	; 41
     950:	5f 01       	movw	r10, r30
     952:	9e 01       	movw	r18, r28
     954:	25 5d       	subi	r18, 0xD5	; 213
     956:	3f 4f       	sbci	r19, 0xFF	; 255
     958:	69 01       	movw	r12, r18
     95a:	ae 01       	movw	r20, r28
     95c:	43 5d       	subi	r20, 0xD3	; 211
     95e:	5f 4f       	sbci	r21, 0xFF	; 255
     960:	7a 01       	movw	r14, r20
     962:	8e 01       	movw	r16, r28
     964:	01 5d       	subi	r16, 0xD1	; 209
     966:	1f 4f       	sbci	r17, 0xFF	; 255
     968:	2a 5f       	subi	r18, 0xFA	; 250
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	4a 5f       	subi	r20, 0xFA	; 250
     96e:	5f 4f       	sbci	r21, 0xFF	; 255
     970:	be 01       	movw	r22, r28
     972:	6b 5c       	subi	r22, 0xCB	; 203
     974:	7f 4f       	sbci	r23, 0xFF	; 255
     976:	82 eb       	ldi	r24, 0xB2	; 178
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	0e 94 24 01 	call	0x248	; 0x248 <_ZN3RTC8ReadTimeEPiS0_S0_S0_S0_S0_S0_>
		int modeButton = !(PINB & 0b00000001);
     97e:	83 b1       	in	r24, 0x03	; 3
     980:	31 e0       	ldi	r19, 0x01	; 1
     982:	58 2f       	mov	r21, r24
     984:	51 70       	andi	r21, 0x01	; 1
     986:	5a af       	std	Y+58, r21	; 0x3a
     988:	1b ae       	std	Y+59, r1	; 0x3b
     98a:	80 fd       	sbrc	r24, 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
		int increment = !(PINB & 0b00000010);
     98e:	83 b1       	in	r24, 0x03	; 3
     990:	82 70       	andi	r24, 0x02	; 2
     992:	e8 2e       	mov	r14, r24
     994:	f1 2c       	mov	r15, r1
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	e1 14       	cp	r14, r1
     99a:	f1 04       	cpc	r15, r1
     99c:	09 f0       	breq	.+2      	; 0x9a0 <__stack+0xa1>
     99e:	60 e0       	ldi	r22, 0x00	; 0
		int decrement = !(PINB & 0b00000100);
     9a0:	83 b1       	in	r24, 0x03	; 3
     9a2:	84 70       	andi	r24, 0x04	; 4
     9a4:	c8 2e       	mov	r12, r24
     9a6:	d1 2c       	mov	r13, r1
     9a8:	71 e0       	ldi	r23, 0x01	; 1
     9aa:	78 af       	std	Y+56, r23	; 0x38
     9ac:	c1 14       	cp	r12, r1
     9ae:	d1 04       	cpc	r13, r1
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <__stack+0xb5>
     9b2:	18 ae       	std	Y+56, r1	; 0x38
		int setButton = !(PINB & 0b00001000);
     9b4:	03 b1       	in	r16, 0x03	; 3
     9b6:	08 70       	andi	r16, 0x08	; 8
     9b8:	10 e0       	ldi	r17, 0x00	; 0
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	89 af       	std	Y+57, r24	; 0x39
     9be:	01 15       	cp	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <__stack+0xc7>
     9c4:	19 ae       	std	Y+57, r1	; 0x39
		int alarmButton = !(PINB & 0b00010000);
     9c6:	23 b1       	in	r18, 0x03	; 3
     9c8:	22 95       	swap	r18
     9ca:	2f 70       	andi	r18, 0x0F	; 15
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	28 27       	eor	r18, r24
     9d0:	21 70       	andi	r18, 0x01	; 1
		
		if (sec<=3 & min == 0 & hour == 0){
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	4d a9       	ldd	r20, Y+53	; 0x35
     9d6:	5e a9       	ldd	r21, Y+54	; 0x36
     9d8:	44 30       	cpi	r20, 0x04	; 4
     9da:	51 05       	cpc	r21, r1
     9dc:	0c f0       	brlt	.+2      	; 0x9e0 <__stack+0xe1>
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	4b a9       	ldd	r20, Y+51	; 0x33
     9e4:	5c a9       	ldd	r21, Y+52	; 0x34
     9e6:	45 2b       	or	r20, r21
     9e8:	09 f0       	breq	.+2      	; 0x9ec <__stack+0xed>
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	89 23       	and	r24, r25
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	49 a9       	ldd	r20, Y+49	; 0x31
     9f2:	5a a9       	ldd	r21, Y+50	; 0x32
     9f4:	45 2b       	or	r20, r21
     9f6:	09 f0       	breq	.+2      	; 0x9fa <__stack+0xfb>
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	88 23       	and	r24, r24
     9fc:	b1 f0       	breq	.+44     	; 0xa2a <__stack+0x12b>
     9fe:	99 23       	and	r25, r25
     a00:	a1 f0       	breq	.+40     	; 0xa2a <__stack+0x12b>
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
			    for (int slot = 0; slot < 5; slot++) {
     a06:	85 30       	cpi	r24, 0x05	; 5
     a08:	91 05       	cpc	r25, r1
     a0a:	7c f4       	brge	.+30     	; 0xa2a <__stack+0x12b>
				    manual_stop[slot] = 1;// renew alarms everyday
     a0c:	fc 01       	movw	r30, r24
     a0e:	ee 0f       	add	r30, r30
     a10:	ff 1f       	adc	r31, r31
     a12:	a1 e0       	ldi	r26, 0x01	; 1
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	ac 0f       	add	r26, r28
     a18:	bd 1f       	adc	r27, r29
     a1a:	ea 0f       	add	r30, r26
     a1c:	fb 1f       	adc	r31, r27
     a1e:	41 e0       	ldi	r20, 0x01	; 1
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	57 8f       	std	Z+31, r21	; 0x1f
     a24:	46 8f       	std	Z+30, r20	; 0x1e
		int decrement = !(PINB & 0b00000100);
		int setButton = !(PINB & 0b00001000);
		int alarmButton = !(PINB & 0b00010000);
		
		if (sec<=3 & min == 0 & hour == 0){
			    for (int slot = 0; slot < 5; slot++) {
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	ee cf       	rjmp	.-36     	; 0xa06 <__stack+0x107>
				    manual_stop[slot] = 1;// renew alarms everyday
			    }
		}
		if (alarmButton == 1 & isalarmblinking == 0)// if there is not blinking alarm, alarm button is assigned to enter the alarm editing mode
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	21 14       	cp	r2, r1
     a2e:	31 04       	cpc	r3, r1
     a30:	09 f0       	breq	.+2      	; 0xa34 <__stack+0x135>
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	88 23       	and	r24, r24
     a36:	51 f0       	breq	.+20     	; 0xa4c <__stack+0x14d>
     a38:	22 23       	and	r18, r18
     a3a:	41 f0       	breq	.+16     	; 0xa4c <__stack+0x14d>
		{ 
			isalarmeditingmode = 1;
			var = 0;
     a3c:	22 96       	adiw	r28, 0x02	; 2
     a3e:	1f ae       	std	Y+63, r1	; 0x3f
     a40:	1e ae       	std	Y+62, r1	; 0x3e
     a42:	22 97       	sbiw	r28, 0x02	; 2
				    manual_stop[slot] = 1;// renew alarms everyday
			    }
		}
		if (alarmButton == 1 & isalarmblinking == 0)// if there is not blinking alarm, alarm button is assigned to enter the alarm editing mode
		{ 
			isalarmeditingmode = 1;
     a44:	e1 e0       	ldi	r30, 0x01	; 1
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	fd af       	std	Y+61, r31	; 0x3d
     a4a:	ec af       	std	Y+60, r30	; 0x3c
			var = 0;
		}
		if (isalarmeditingmode == 1)
     a4c:	4c ad       	ldd	r20, Y+60	; 0x3c
     a4e:	5d ad       	ldd	r21, Y+61	; 0x3d
     a50:	41 30       	cpi	r20, 0x01	; 1
     a52:	51 05       	cpc	r21, r1
     a54:	09 f0       	breq	.+2      	; 0xa58 <__stack+0x159>
     a56:	30 c1       	rjmp	.+608    	; 0xcb8 <__stack+0x3b9>
		{
			if (select_slot == 0)
     a58:	26 96       	adiw	r28, 0x06	; 6
     a5a:	8e ad       	ldd	r24, Y+62	; 0x3e
     a5c:	9f ad       	ldd	r25, Y+63	; 0x3f
     a5e:	26 97       	sbiw	r28, 0x06	; 6
     a60:	89 2b       	or	r24, r25
     a62:	b9 f5       	brne	.+110    	; 0xad2 <__stack+0x1d3>
			{
				if (var ==0)
     a64:	22 96       	adiw	r28, 0x02	; 2
     a66:	ae ad       	ldd	r26, Y+62	; 0x3e
     a68:	bf ad       	ldd	r27, Y+63	; 0x3f
     a6a:	22 97       	sbiw	r28, 0x02	; 2
     a6c:	ab 2b       	or	r26, r27
     a6e:	91 f4       	brne	.+36     	; 0xa94 <__stack+0x195>
				{
					rtc.clear();
     a70:	82 eb       	ldi	r24, 0xB2	; 178
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	0e 94 48 02 	call	0x490	; 0x490 <_ZN3RTC5clearEv>
					var = !var;
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	22 96       	adiw	r28, 0x02	; 2
     a7c:	ee ad       	ldd	r30, Y+62	; 0x3e
     a7e:	ff ad       	ldd	r31, Y+63	; 0x3f
     a80:	22 97       	sbiw	r28, 0x02	; 2
     a82:	ef 2b       	or	r30, r31
     a84:	09 f0       	breq	.+2      	; 0xa88 <__stack+0x189>
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	28 2f       	mov	r18, r24
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	22 96       	adiw	r28, 0x02	; 2
     a8e:	3f af       	std	Y+63, r19	; 0x3f
     a90:	2e af       	std	Y+62, r18	; 0x3e
     a92:	22 97       	sbiw	r28, 0x02	; 2
		    	}
				rtc.slotdisp(alarmslot);
     a94:	24 96       	adiw	r28, 0x04	; 4
     a96:	6e ad       	ldd	r22, Y+62	; 0x3e
     a98:	7f ad       	ldd	r23, Y+63	; 0x3f
     a9a:	24 97       	sbiw	r28, 0x04	; 4
     a9c:	82 eb       	ldi	r24, 0xB2	; 178
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <_ZN3RTC8slotdispEi>
				if(increment ==1)
     aa4:	ef 28       	or	r14, r15
     aa6:	89 f4       	brne	.+34     	; 0xaca <__stack+0x1cb>
				{
					alarmslot += 1;
     aa8:	24 96       	adiw	r28, 0x04	; 4
     aaa:	4e ad       	ldd	r20, Y+62	; 0x3e
     aac:	5f ad       	ldd	r21, Y+63	; 0x3f
     aae:	24 97       	sbiw	r28, 0x04	; 4
     ab0:	4f 5f       	subi	r20, 0xFF	; 255
     ab2:	5f 4f       	sbci	r21, 0xFF	; 255
     ab4:	24 96       	adiw	r28, 0x04	; 4
     ab6:	5f af       	std	Y+63, r21	; 0x3f
     ab8:	4e af       	std	Y+62, r20	; 0x3e
     aba:	24 97       	sbiw	r28, 0x04	; 4
					if (alarmslot>4)
     abc:	45 30       	cpi	r20, 0x05	; 5
     abe:	51 05       	cpc	r21, r1
     ac0:	24 f0       	brlt	.+8      	; 0xaca <__stack+0x1cb>
					{
						alarmslot = 0;
     ac2:	24 96       	adiw	r28, 0x04	; 4
     ac4:	1f ae       	std	Y+63, r1	; 0x3f
     ac6:	1e ae       	std	Y+62, r1	; 0x3e
     ac8:	24 97       	sbiw	r28, 0x04	; 4
					}
				}
				
				if (setButton ==1)//assigned set button to set the slot
     aca:	01 2b       	or	r16, r17
     acc:	09 f4       	brne	.+2      	; 0xad0 <__stack+0x1d1>
     ace:	ef c2       	rjmp	.+1502   	; 0x10ae <__stack+0x7af>
     ad0:	f4 c2       	rjmp	.+1512   	; 0x10ba <__stack+0x7bb>
				}
			}
			
			else
			{
			 rtc.alarmdisp(alarm_min[alarmslot], alarm_hour[alarmslot], alarmmode);//display alarm editing mode
     ad2:	24 96       	adiw	r28, 0x04	; 4
     ad4:	ee ad       	ldd	r30, Y+62	; 0x3e
     ad6:	ff ad       	ldd	r31, Y+63	; 0x3f
     ad8:	24 97       	sbiw	r28, 0x04	; 4
     ada:	ee 0f       	add	r30, r30
     adc:	ff 1f       	adc	r31, r31
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	8c 0f       	add	r24, r28
     ae4:	9d 1f       	adc	r25, r29
     ae6:	e8 0f       	add	r30, r24
     ae8:	f9 1f       	adc	r31, r25
     aea:	82 84       	ldd	r8, Z+10	; 0x0a
     aec:	93 84       	ldd	r9, Z+11	; 0x0b
     aee:	a0 80       	ld	r10, Z
     af0:	b1 80       	ldd	r11, Z+1	; 0x01
     af2:	28 96       	adiw	r28, 0x08	; 8
     af4:	2e ad       	ldd	r18, Y+62	; 0x3e
     af6:	3f ad       	ldd	r19, Y+63	; 0x3f
     af8:	28 97       	sbiw	r28, 0x08	; 8
     afa:	a4 01       	movw	r20, r8
     afc:	b5 01       	movw	r22, r10
     afe:	82 eb       	ldi	r24, 0xB2	; 178
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	0e 94 8c 03 	call	0x718	; 0x718 <_ZN3RTC9alarmdispEiii>
			
			if (modeButton ==1)// in the alarm editing mode, after selected the slot, the mode button assigned to change hour or min
     b06:	aa ad       	ldd	r26, Y+58	; 0x3a
     b08:	bb ad       	ldd	r27, Y+59	; 0x3b
     b0a:	ab 2b       	or	r26, r27
     b0c:	71 f4       	brne	.+28     	; 0xb2a <__stack+0x22b>
			{
				alarmmode = !alarmmode;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	28 96       	adiw	r28, 0x08	; 8
     b12:	ee ad       	ldd	r30, Y+62	; 0x3e
     b14:	ff ad       	ldd	r31, Y+63	; 0x3f
     b16:	28 97       	sbiw	r28, 0x08	; 8
     b18:	ef 2b       	or	r30, r31
     b1a:	09 f0       	breq	.+2      	; 0xb1e <__stack+0x21f>
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	28 2f       	mov	r18, r24
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	28 96       	adiw	r28, 0x08	; 8
     b24:	3f af       	std	Y+63, r19	; 0x3f
     b26:	2e af       	std	Y+62, r18	; 0x3e
     b28:	28 97       	sbiw	r28, 0x08	; 8
			}
			if (increment ==1)
     b2a:	ef 28       	or	r14, r15
     b2c:	09 f0       	breq	.+2      	; 0xb30 <__stack+0x231>
     b2e:	52 c0       	rjmp	.+164    	; 0xbd4 <__stack+0x2d5>
			{
				if (alarmmode ==0)
     b30:	28 96       	adiw	r28, 0x08	; 8
     b32:	4e ad       	ldd	r20, Y+62	; 0x3e
     b34:	5f ad       	ldd	r21, Y+63	; 0x3f
     b36:	28 97       	sbiw	r28, 0x08	; 8
     b38:	45 2b       	or	r20, r21
     b3a:	19 f5       	brne	.+70     	; 0xb82 <__stack+0x283>
				{
					alarm_min[alarmslot] += 1;
     b3c:	5f ef       	ldi	r21, 0xFF	; 255
     b3e:	a5 1a       	sub	r10, r21
     b40:	b5 0a       	sbc	r11, r21
     b42:	24 96       	adiw	r28, 0x04	; 4
     b44:	ee ad       	ldd	r30, Y+62	; 0x3e
     b46:	ff ad       	ldd	r31, Y+63	; 0x3f
     b48:	24 97       	sbiw	r28, 0x04	; 4
     b4a:	ee 0f       	add	r30, r30
     b4c:	ff 1f       	adc	r31, r31
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	8c 0f       	add	r24, r28
     b54:	9d 1f       	adc	r25, r29
     b56:	e8 0f       	add	r30, r24
     b58:	f9 1f       	adc	r31, r25
     b5a:	b1 82       	std	Z+1, r11	; 0x01
     b5c:	a0 82       	st	Z, r10
					if (alarm_min[alarmslot] >59)
     b5e:	9c e3       	ldi	r25, 0x3C	; 60
     b60:	a9 16       	cp	r10, r25
     b62:	b1 04       	cpc	r11, r1
     b64:	74 f0       	brlt	.+28     	; 0xb82 <__stack+0x283>
					{
						alarm_min[alarmslot] = 0;
     b66:	24 96       	adiw	r28, 0x04	; 4
     b68:	ee ad       	ldd	r30, Y+62	; 0x3e
     b6a:	ff ad       	ldd	r31, Y+63	; 0x3f
     b6c:	24 97       	sbiw	r28, 0x04	; 4
     b6e:	ee 0f       	add	r30, r30
     b70:	ff 1f       	adc	r31, r31
     b72:	a1 e0       	ldi	r26, 0x01	; 1
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	ac 0f       	add	r26, r28
     b78:	bd 1f       	adc	r27, r29
     b7a:	ea 0f       	add	r30, r26
     b7c:	fb 1f       	adc	r31, r27
     b7e:	11 82       	std	Z+1, r1	; 0x01
     b80:	10 82       	st	Z, r1
					}
				}
				
				if (alarmmode == 1)
     b82:	28 96       	adiw	r28, 0x08	; 8
     b84:	ee ad       	ldd	r30, Y+62	; 0x3e
     b86:	ff ad       	ldd	r31, Y+63	; 0x3f
     b88:	28 97       	sbiw	r28, 0x08	; 8
     b8a:	31 97       	sbiw	r30, 0x01	; 1
     b8c:	19 f5       	brne	.+70     	; 0xbd4 <__stack+0x2d5>
				{
					alarm_hour[alarmslot] += 1;
     b8e:	ff ef       	ldi	r31, 0xFF	; 255
     b90:	8f 1a       	sub	r8, r31
     b92:	9f 0a       	sbc	r9, r31
     b94:	24 96       	adiw	r28, 0x04	; 4
     b96:	ee ad       	ldd	r30, Y+62	; 0x3e
     b98:	ff ad       	ldd	r31, Y+63	; 0x3f
     b9a:	24 97       	sbiw	r28, 0x04	; 4
     b9c:	ee 0f       	add	r30, r30
     b9e:	ff 1f       	adc	r31, r31
     ba0:	21 e0       	ldi	r18, 0x01	; 1
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	2c 0f       	add	r18, r28
     ba6:	3d 1f       	adc	r19, r29
     ba8:	e2 0f       	add	r30, r18
     baa:	f3 1f       	adc	r31, r19
     bac:	93 86       	std	Z+11, r9	; 0x0b
     bae:	82 86       	std	Z+10, r8	; 0x0a
					if (alarm_hour[alarmslot] >23)
     bb0:	38 e1       	ldi	r19, 0x18	; 24
     bb2:	83 16       	cp	r8, r19
     bb4:	91 04       	cpc	r9, r1
     bb6:	74 f0       	brlt	.+28     	; 0xbd4 <__stack+0x2d5>
					{
						alarm_hour[alarmslot] = 0;
     bb8:	24 96       	adiw	r28, 0x04	; 4
     bba:	ee ad       	ldd	r30, Y+62	; 0x3e
     bbc:	ff ad       	ldd	r31, Y+63	; 0x3f
     bbe:	24 97       	sbiw	r28, 0x04	; 4
     bc0:	ee 0f       	add	r30, r30
     bc2:	ff 1f       	adc	r31, r31
     bc4:	41 e0       	ldi	r20, 0x01	; 1
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	4c 0f       	add	r20, r28
     bca:	5d 1f       	adc	r21, r29
     bcc:	e4 0f       	add	r30, r20
     bce:	f5 1f       	adc	r31, r21
     bd0:	13 86       	std	Z+11, r1	; 0x0b
     bd2:	12 86       	std	Z+10, r1	; 0x0a
					}
				}
			}

			if (decrement ==1)
     bd4:	cd 28       	or	r12, r13
     bd6:	09 f0       	breq	.+2      	; 0xbda <__stack+0x2db>
     bd8:	4a c0       	rjmp	.+148    	; 0xc6e <__stack+0x36f>
			{
				if (alarmmode ==0)
     bda:	28 96       	adiw	r28, 0x08	; 8
     bdc:	8e ad       	ldd	r24, Y+62	; 0x3e
     bde:	9f ad       	ldd	r25, Y+63	; 0x3f
     be0:	28 97       	sbiw	r28, 0x08	; 8
     be2:	89 2b       	or	r24, r25
     be4:	f9 f4       	brne	.+62     	; 0xc24 <__stack+0x325>
				{
					alarm_min[alarmslot] -= 1;
     be6:	24 96       	adiw	r28, 0x04	; 4
     be8:	ee ad       	ldd	r30, Y+62	; 0x3e
     bea:	ff ad       	ldd	r31, Y+63	; 0x3f
     bec:	24 97       	sbiw	r28, 0x04	; 4
     bee:	ee 0f       	add	r30, r30
     bf0:	ff 1f       	adc	r31, r31
     bf2:	a1 e0       	ldi	r26, 0x01	; 1
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	ac 0f       	add	r26, r28
     bf8:	bd 1f       	adc	r27, r29
     bfa:	ea 0f       	add	r30, r26
     bfc:	fb 1f       	adc	r31, r27
     bfe:	80 81       	ld	r24, Z
     c00:	91 81       	ldd	r25, Z+1	; 0x01
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	91 83       	std	Z+1, r25	; 0x01
     c06:	80 83       	st	Z, r24
					if (alarm_min[alarmslot] <0)
     c08:	99 23       	and	r25, r25
     c0a:	64 f4       	brge	.+24     	; 0xc24 <__stack+0x325>
					{
						alarm_min[alarmslot] = 59;
     c0c:	24 96       	adiw	r28, 0x04	; 4
     c0e:	ee ad       	ldd	r30, Y+62	; 0x3e
     c10:	ff ad       	ldd	r31, Y+63	; 0x3f
     c12:	24 97       	sbiw	r28, 0x04	; 4
     c14:	ee 0f       	add	r30, r30
     c16:	ff 1f       	adc	r31, r31
     c18:	ea 0f       	add	r30, r26
     c1a:	fb 1f       	adc	r31, r27
     c1c:	8b e3       	ldi	r24, 0x3B	; 59
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	91 83       	std	Z+1, r25	; 0x01
     c22:	80 83       	st	Z, r24
					}
				}
				
				if (alarmmode == 1)
     c24:	28 96       	adiw	r28, 0x08	; 8
     c26:	ee ad       	ldd	r30, Y+62	; 0x3e
     c28:	ff ad       	ldd	r31, Y+63	; 0x3f
     c2a:	28 97       	sbiw	r28, 0x08	; 8
     c2c:	31 97       	sbiw	r30, 0x01	; 1
     c2e:	f9 f4       	brne	.+62     	; 0xc6e <__stack+0x36f>
				{
					alarm_hour[alarmslot] -= 1;
     c30:	24 96       	adiw	r28, 0x04	; 4
     c32:	ee ad       	ldd	r30, Y+62	; 0x3e
     c34:	ff ad       	ldd	r31, Y+63	; 0x3f
     c36:	24 97       	sbiw	r28, 0x04	; 4
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	21 e0       	ldi	r18, 0x01	; 1
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	2c 0f       	add	r18, r28
     c42:	3d 1f       	adc	r19, r29
     c44:	e2 0f       	add	r30, r18
     c46:	f3 1f       	adc	r31, r19
     c48:	82 85       	ldd	r24, Z+10	; 0x0a
     c4a:	93 85       	ldd	r25, Z+11	; 0x0b
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	93 87       	std	Z+11, r25	; 0x0b
     c50:	82 87       	std	Z+10, r24	; 0x0a
					if (alarm_hour[alarmslot] <0)
     c52:	99 23       	and	r25, r25
     c54:	64 f4       	brge	.+24     	; 0xc6e <__stack+0x36f>
					{
						alarm_hour[alarmslot] = 23;
     c56:	24 96       	adiw	r28, 0x04	; 4
     c58:	ee ad       	ldd	r30, Y+62	; 0x3e
     c5a:	ff ad       	ldd	r31, Y+63	; 0x3f
     c5c:	24 97       	sbiw	r28, 0x04	; 4
     c5e:	ee 0f       	add	r30, r30
     c60:	ff 1f       	adc	r31, r31
     c62:	e2 0f       	add	r30, r18
     c64:	f3 1f       	adc	r31, r19
     c66:	87 e1       	ldi	r24, 0x17	; 23
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	93 87       	std	Z+11, r25	; 0x0b
     c6c:	82 87       	std	Z+10, r24	; 0x0a
					}
				}
			}
			
			if (setButton == 1 )// if slot is selected, set button is assigned to set the current time as the alarm
     c6e:	01 2b       	or	r16, r17
     c70:	09 f0       	breq	.+2      	; 0xc74 <__stack+0x375>
     c72:	23 c2       	rjmp	.+1094   	; 0x10ba <__stack+0x7bb>
			{
				isalarmeditingmode = 0;
				select_slot = 0;
				init_alarm[alarmslot] = 1;
     c74:	24 96       	adiw	r28, 0x04	; 4
     c76:	0e ad       	ldd	r16, Y+62	; 0x3e
     c78:	1f ad       	ldd	r17, Y+63	; 0x3f
     c7a:	24 97       	sbiw	r28, 0x04	; 4
     c7c:	00 0f       	add	r16, r16
     c7e:	11 1f       	adc	r17, r17
     c80:	41 e0       	ldi	r20, 0x01	; 1
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	4c 0f       	add	r20, r28
     c86:	5d 1f       	adc	r21, r29
     c88:	04 0f       	add	r16, r20
     c8a:	15 1f       	adc	r17, r21
     c8c:	ee 24       	eor	r14, r14
     c8e:	e3 94       	inc	r14
     c90:	f1 2c       	mov	r15, r1
     c92:	d8 01       	movw	r26, r16
     c94:	55 96       	adiw	r26, 0x15	; 21
     c96:	fc 92       	st	X, r15
     c98:	ee 92       	st	-X, r14
     c9a:	54 97       	sbiw	r26, 0x14	; 20
				rtc.NoBlink();
     c9c:	82 eb       	ldi	r24, 0xB2	; 178
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_ZN3RTC7NoBlinkEv>
				manual_stop[alarmslot] = 1;
     ca4:	f8 01       	movw	r30, r16
     ca6:	f7 8e       	std	Z+31, r15	; 0x1f
     ca8:	e6 8e       	std	Z+30, r14	; 0x1e
			}
			
			if (setButton == 1 )// if slot is selected, set button is assigned to set the current time as the alarm
			{
				isalarmeditingmode = 0;
				select_slot = 0;
     caa:	26 96       	adiw	r28, 0x06	; 6
     cac:	1f ae       	std	Y+63, r1	; 0x3f
     cae:	1e ae       	std	Y+62, r1	; 0x3e
     cb0:	26 97       	sbiw	r28, 0x06	; 6
				}
			}
			
			if (setButton == 1 )// if slot is selected, set button is assigned to set the current time as the alarm
			{
				isalarmeditingmode = 0;
     cb2:	1d ae       	std	Y+61, r1	; 0x3d
     cb4:	1c ae       	std	Y+60, r1	; 0x3c
     cb6:	01 c2       	rjmp	.+1026   	; 0x10ba <__stack+0x7bb>
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	50 e0       	ldi	r21, 0x00	; 0
		}

			
		}
		else{//if not selected alarm editing mode
			for (int i =0; i<5;i++){
     cbc:	45 30       	cpi	r20, 0x05	; 5
     cbe:	51 05       	cpc	r21, r1
     cc0:	0c f0       	brlt	.+2      	; 0xcc4 <__stack+0x3c5>
     cc2:	55 c0       	rjmp	.+170    	; 0xd6e <__stack+0x46f>
				if ((min == alarm_min[i]) & (hour == alarm_hour[i]) & (init_alarm[i] == 1) & (manual_stop[i] == 1)){
     cc4:	fa 01       	movw	r30, r20
     cc6:	ee 0f       	add	r30, r30
     cc8:	ff 1f       	adc	r31, r31
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	8c 0f       	add	r24, r28
     cd0:	9d 1f       	adc	r25, r29
     cd2:	e8 0f       	add	r30, r24
     cd4:	f9 1f       	adc	r31, r25
     cd6:	a0 81       	ld	r26, Z
     cd8:	b1 81       	ldd	r27, Z+1	; 0x01
     cda:	02 84       	ldd	r0, Z+10	; 0x0a
     cdc:	f3 85       	ldd	r31, Z+11	; 0x0b
     cde:	e0 2d       	mov	r30, r0
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	0b a9       	ldd	r16, Y+51	; 0x33
     ce4:	1c a9       	ldd	r17, Y+52	; 0x34
     ce6:	0a 17       	cp	r16, r26
     ce8:	1b 07       	cpc	r17, r27
     cea:	09 f0       	breq	.+2      	; 0xcee <__stack+0x3ef>
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	a9 a9       	ldd	r26, Y+49	; 0x31
     cf2:	ba a9       	ldd	r27, Y+50	; 0x32
     cf4:	ae 17       	cp	r26, r30
     cf6:	bf 07       	cpc	r27, r31
     cf8:	09 f0       	breq	.+2      	; 0xcfc <__stack+0x3fd>
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	98 23       	and	r25, r24
     cfe:	fa 01       	movw	r30, r20
     d00:	ee 0f       	add	r30, r30
     d02:	ff 1f       	adc	r31, r31
     d04:	a1 e0       	ldi	r26, 0x01	; 1
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	ac 0f       	add	r26, r28
     d0a:	bd 1f       	adc	r27, r29
     d0c:	ea 0f       	add	r30, r26
     d0e:	fb 1f       	adc	r31, r27
     d10:	04 88       	ldd	r0, Z+20	; 0x14
     d12:	f5 89       	ldd	r31, Z+21	; 0x15
     d14:	e0 2d       	mov	r30, r0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	31 97       	sbiw	r30, 0x01	; 1
     d1a:	09 f0       	breq	.+2      	; 0xd1e <__stack+0x41f>
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	fa 01       	movw	r30, r20
     d20:	ee 0f       	add	r30, r30
     d22:	ff 1f       	adc	r31, r31
     d24:	a1 e0       	ldi	r26, 0x01	; 1
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	ac 0f       	add	r26, r28
     d2a:	bd 1f       	adc	r27, r29
     d2c:	ea 0f       	add	r30, r26
     d2e:	fb 1f       	adc	r31, r27
     d30:	06 8c       	ldd	r0, Z+30	; 0x1e
     d32:	f7 8d       	ldd	r31, Z+31	; 0x1f
     d34:	e0 2d       	mov	r30, r0
     d36:	71 e0       	ldi	r23, 0x01	; 1
     d38:	31 97       	sbiw	r30, 0x01	; 1
     d3a:	09 f0       	breq	.+2      	; 0xd3e <__stack+0x43f>
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	89 23       	and	r24, r25
     d40:	99 f0       	breq	.+38     	; 0xd68 <__stack+0x469>
     d42:	77 23       	and	r23, r23
     d44:	89 f0       	breq	.+34     	; 0xd68 <__stack+0x469>
					current_alarm = i;
					isalarmblinking = 1;
					PORTD = (1 << PORTD2);
     d46:	84 e0       	ldi	r24, 0x04	; 4
     d48:	8b b9       	out	0x0b, r24	; 11
     d4a:	bf ef       	ldi	r27, 0xFF	; 255
     d4c:	e1 ee       	ldi	r30, 0xE1	; 225
     d4e:	f4 e0       	ldi	r31, 0x04	; 4
     d50:	b1 50       	subi	r27, 0x01	; 1
     d52:	e0 40       	sbci	r30, 0x00	; 0
     d54:	f0 40       	sbci	r31, 0x00	; 0
     d56:	e1 f7       	brne	.-8      	; 0xd50 <__stack+0x451>
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <__stack+0x45b>
     d5a:	00 00       	nop
					_delay_ms(100);
					PORTD = 0;
     d5c:	1b b8       	out	0x0b, r1	; 11
			
		}
		else{//if not selected alarm editing mode
			for (int i =0; i<5;i++){
				if ((min == alarm_min[i]) & (hour == alarm_hour[i]) & (init_alarm[i] == 1) & (manual_stop[i] == 1)){
					current_alarm = i;
     d5e:	5f af       	std	Y+63, r21	; 0x3f
     d60:	4e af       	std	Y+62, r20	; 0x3e
					isalarmblinking = 1;
     d62:	22 24       	eor	r2, r2
     d64:	23 94       	inc	r2
     d66:	31 2c       	mov	r3, r1
		}

			
		}
		else{//if not selected alarm editing mode
			for (int i =0; i<5;i++){
     d68:	4f 5f       	subi	r20, 0xFF	; 255
     d6a:	5f 4f       	sbci	r21, 0xFF	; 255
     d6c:	a7 cf       	rjmp	.-178    	; 0xcbc <__stack+0x3bd>
					_delay_ms(100);
					PORTD = 0;
					
				}
			}
			if ((alarmButton == 1) & (isalarmblinking == 1)){//manually stopping of current blinking alarm
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	41 e0       	ldi	r20, 0x01	; 1
     d72:	24 16       	cp	r2, r20
     d74:	31 04       	cpc	r3, r1
     d76:	09 f0       	breq	.+2      	; 0xd7a <__stack+0x47b>
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	88 23       	and	r24, r24
     d7c:	c9 f0       	breq	.+50     	; 0xdb0 <__stack+0x4b1>
     d7e:	22 23       	and	r18, r18
     d80:	b9 f0       	breq	.+46     	; 0xdb0 <__stack+0x4b1>
				manual_stop[current_alarm] = 0;
     d82:	ee ad       	ldd	r30, Y+62	; 0x3e
     d84:	ff ad       	ldd	r31, Y+63	; 0x3f
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	8c 0f       	add	r24, r28
     d90:	9d 1f       	adc	r25, r29
     d92:	e8 0f       	add	r30, r24
     d94:	f9 1f       	adc	r31, r25
     d96:	17 8e       	std	Z+31, r1	; 0x1f
     d98:	16 8e       	std	Z+30, r1	; 0x1e
     d9a:	9f ef       	ldi	r25, 0xFF	; 255
     d9c:	a9 e6       	ldi	r26, 0x69	; 105
     d9e:	b8 e1       	ldi	r27, 0x18	; 24
     da0:	91 50       	subi	r25, 0x01	; 1
     da2:	a0 40       	sbci	r26, 0x00	; 0
     da4:	b0 40       	sbci	r27, 0x00	; 0
     da6:	e1 f7       	brne	.-8      	; 0xda0 <__stack+0x4a1>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <__stack+0x4ab>
     daa:	00 00       	nop
				isalarmblinking = 0;
     dac:	21 2c       	mov	r2, r1
     dae:	31 2c       	mov	r3, r1
				_delay_ms(500);
			}
							
			if (modeButton == 1 & IsEditingmode == 0){
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	61 14       	cp	r6, r1
     db4:	71 04       	cpc	r7, r1
     db6:	09 f0       	breq	.+2      	; 0xdba <__stack+0x4bb>
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	88 23       	and	r24, r24
     dbc:	29 f0       	breq	.+10     	; 0xdc8 <__stack+0x4c9>
     dbe:	33 23       	and	r19, r19
     dc0:	19 f0       	breq	.+6      	; 0xdc8 <__stack+0x4c9>
				IsEditingmode = 1;//time editing 
     dc2:	66 24       	eor	r6, r6
     dc4:	63 94       	inc	r6
     dc6:	71 2c       	mov	r7, r1
				//_delay_ms(50);
			}
		
			if (IsEditingmode ==1 & modeButton  == 1)
     dc8:	e1 e0       	ldi	r30, 0x01	; 1
     dca:	ef ab       	std	Y+55, r30	; 0x37
     dcc:	f1 e0       	ldi	r31, 0x01	; 1
     dce:	6f 16       	cp	r6, r31
     dd0:	71 04       	cpc	r7, r1
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <__stack+0x4d7>
     dd4:	1f aa       	std	Y+55, r1	; 0x37
     dd6:	33 23       	and	r19, r19
     dd8:	61 f0       	breq	.+24     	; 0xdf2 <__stack+0x4f3>
     dda:	2f a9       	ldd	r18, Y+55	; 0x37
     ddc:	22 23       	and	r18, r18
     dde:	49 f0       	breq	.+18     	; 0xdf2 <__stack+0x4f3>
			{
				modeStatus += 1;
     de0:	3f ef       	ldi	r19, 0xFF	; 255
     de2:	43 1a       	sub	r4, r19
     de4:	53 0a       	sbc	r5, r19
				if (modeStatus > 4)
     de6:	45 e0       	ldi	r20, 0x05	; 5
     de8:	44 16       	cp	r4, r20
     dea:	51 04       	cpc	r5, r1
     dec:	14 f0       	brlt	.+4      	; 0xdf2 <__stack+0x4f3>
				{
					modeStatus = 0;	
     dee:	41 2c       	mov	r4, r1
     df0:	51 2c       	mov	r5, r1
				}
			}
		
			if (increment == 1 & IsEditingmode ==1)
     df2:	66 23       	and	r22, r22
     df4:	09 f4       	brne	.+2      	; 0xdf8 <__stack+0x4f9>
     df6:	77 c0       	rjmp	.+238    	; 0xee6 <__stack+0x5e7>
     df8:	5f a9       	ldd	r21, Y+55	; 0x37
     dfa:	55 23       	and	r21, r21
     dfc:	09 f4       	brne	.+2      	; 0xe00 <__stack+0x501>
     dfe:	73 c0       	rjmp	.+230    	; 0xee6 <__stack+0x5e7>
			{
				if(modeStatus == 0)
     e00:	41 14       	cp	r4, r1
     e02:	51 04       	cpc	r5, r1
     e04:	49 f4       	brne	.+18     	; 0xe18 <__stack+0x519>
				{
					min += 1;
     e06:	8b a9       	ldd	r24, Y+51	; 0x33
     e08:	9c a9       	ldd	r25, Y+52	; 0x34
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	9c ab       	std	Y+52, r25	; 0x34
     e0e:	8b ab       	std	Y+51, r24	; 0x33
					if (min >=60){
     e10:	cc 97       	sbiw	r24, 0x3c	; 60
     e12:	14 f0       	brlt	.+4      	; 0xe18 <__stack+0x519>
						min = 0;
     e14:	1c aa       	std	Y+52, r1	; 0x34
     e16:	1b aa       	std	Y+51, r1	; 0x33
					}
				}
				if(modeStatus==1)
     e18:	71 e0       	ldi	r23, 0x01	; 1
     e1a:	47 16       	cp	r4, r23
     e1c:	51 04       	cpc	r5, r1
     e1e:	49 f4       	brne	.+18     	; 0xe32 <__stack+0x533>
				{
					hour += 1;
     e20:	89 a9       	ldd	r24, Y+49	; 0x31
     e22:	9a a9       	ldd	r25, Y+50	; 0x32
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	9a ab       	std	Y+50, r25	; 0x32
     e28:	89 ab       	std	Y+49, r24	; 0x31
					if (hour >=24){
     e2a:	48 97       	sbiw	r24, 0x18	; 24
     e2c:	14 f0       	brlt	.+4      	; 0xe32 <__stack+0x533>
						hour = 0;
     e2e:	1a aa       	std	Y+50, r1	; 0x32
     e30:	19 aa       	std	Y+49, r1	; 0x31
					}

				}
				if(modeStatus==2)
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	48 16       	cp	r4, r24
     e36:	51 04       	cpc	r5, r1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <__stack+0x563>
				{
					day += 1;
     e3a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e3c:	98 a9       	ldd	r25, Y+48	; 0x30
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	98 ab       	std	Y+48, r25	; 0x30
     e42:	8f a7       	std	Y+47, r24	; 0x2f
					if (day >=32){
     e44:	80 97       	sbiw	r24, 0x20	; 32
     e46:	24 f0       	brlt	.+8      	; 0xe50 <__stack+0x551>
						day = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	98 ab       	std	Y+48, r25	; 0x30
     e4e:	8f a7       	std	Y+47, r24	; 0x2f
					}
					wday += 1;
     e50:	8d a5       	ldd	r24, Y+45	; 0x2d
     e52:	9e a5       	ldd	r25, Y+46	; 0x2e
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	9e a7       	std	Y+46, r25	; 0x2e
     e58:	8d a7       	std	Y+45, r24	; 0x2d
					if (wday >6){
     e5a:	07 97       	sbiw	r24, 0x07	; 7
     e5c:	14 f0       	brlt	.+4      	; 0xe62 <__stack+0x563>
						wday = 0;
     e5e:	1e a6       	std	Y+46, r1	; 0x2e
     e60:	1d a6       	std	Y+45, r1	; 0x2d
					}

				}
				if(modeStatus==3)
     e62:	93 e0       	ldi	r25, 0x03	; 3
     e64:	49 16       	cp	r4, r25
     e66:	51 04       	cpc	r5, r1
     e68:	59 f4       	brne	.+22     	; 0xe80 <__stack+0x581>
				{
					month += 1;
     e6a:	8b a5       	ldd	r24, Y+43	; 0x2b
     e6c:	9c a5       	ldd	r25, Y+44	; 0x2c
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	9c a7       	std	Y+44, r25	; 0x2c
     e72:	8b a7       	std	Y+43, r24	; 0x2b
					if (month >=13){
     e74:	0d 97       	sbiw	r24, 0x0d	; 13
     e76:	24 f0       	brlt	.+8      	; 0xe80 <__stack+0x581>
						month = 1;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	9c a7       	std	Y+44, r25	; 0x2c
     e7e:	8b a7       	std	Y+43, r24	; 0x2b
					}

				}
				if(modeStatus==4)
     e80:	a4 e0       	ldi	r26, 0x04	; 4
     e82:	4a 16       	cp	r4, r26
     e84:	51 04       	cpc	r5, r1
     e86:	51 f4       	brne	.+20     	; 0xe9c <__stack+0x59d>
				{
					year += 1;
     e88:	89 a5       	ldd	r24, Y+41	; 0x29
     e8a:	9a a5       	ldd	r25, Y+42	; 0x2a
     e8c:	01 96       	adiw	r24, 0x01	; 1
     e8e:	9a a7       	std	Y+42, r25	; 0x2a
     e90:	89 a7       	std	Y+41, r24	; 0x29
					if (year >99){
     e92:	84 36       	cpi	r24, 0x64	; 100
     e94:	91 05       	cpc	r25, r1
     e96:	14 f0       	brlt	.+4      	; 0xe9c <__stack+0x59d>
						year = 0;
     e98:	1a a6       	std	Y+42, r1	; 0x2a
     e9a:	19 a6       	std	Y+41, r1	; 0x29
					}

				}
				rtc.setTime(sec,min,hour,day,month,wday,year);
     e9c:	a9 a4       	ldd	r10, Y+41	; 0x29
     e9e:	ba a4       	ldd	r11, Y+42	; 0x2a
     ea0:	cd a4       	ldd	r12, Y+45	; 0x2d
     ea2:	de a4       	ldd	r13, Y+46	; 0x2e
     ea4:	eb a4       	ldd	r14, Y+43	; 0x2b
     ea6:	fc a4       	ldd	r15, Y+44	; 0x2c
     ea8:	0f a5       	ldd	r16, Y+47	; 0x2f
     eaa:	18 a9       	ldd	r17, Y+48	; 0x30
     eac:	29 a9       	ldd	r18, Y+49	; 0x31
     eae:	3a a9       	ldd	r19, Y+50	; 0x32
     eb0:	4b a9       	ldd	r20, Y+51	; 0x33
     eb2:	5c a9       	ldd	r21, Y+52	; 0x34
     eb4:	6d a9       	ldd	r22, Y+53	; 0x35
     eb6:	7e a9       	ldd	r23, Y+54	; 0x36
     eb8:	82 eb       	ldi	r24, 0xB2	; 178
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN3RTC7setTimeEiiiiiii>
				rtc.DisplayTimeBlink(sec, min, hour, day, wday, month,year,modeStatus);
     ec0:	a9 a4       	ldd	r10, Y+41	; 0x29
     ec2:	ba a4       	ldd	r11, Y+42	; 0x2a
     ec4:	cb a4       	ldd	r12, Y+43	; 0x2b
     ec6:	dc a4       	ldd	r13, Y+44	; 0x2c
     ec8:	ed a4       	ldd	r14, Y+45	; 0x2d
     eca:	fe a4       	ldd	r15, Y+46	; 0x2e
     ecc:	0f a5       	ldd	r16, Y+47	; 0x2f
     ece:	18 a9       	ldd	r17, Y+48	; 0x30
     ed0:	29 a9       	ldd	r18, Y+49	; 0x31
     ed2:	3a a9       	ldd	r19, Y+50	; 0x32
     ed4:	4b a9       	ldd	r20, Y+51	; 0x33
     ed6:	5c a9       	ldd	r21, Y+52	; 0x34
     ed8:	6d a9       	ldd	r22, Y+53	; 0x35
     eda:	7e a9       	ldd	r23, Y+54	; 0x36
     edc:	42 01       	movw	r8, r4
     ede:	82 eb       	ldi	r24, 0xB2	; 178
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN3RTC16DisplayTimeBlinkEiiiiiiii>

			}
		
			if (decrement == 1 & IsEditingmode ==1)
     ee6:	b8 ad       	ldd	r27, Y+56	; 0x38
     ee8:	bb 23       	and	r27, r27
     eea:	09 f4       	brne	.+2      	; 0xeee <__stack+0x5ef>
     eec:	7f c0       	rjmp	.+254    	; 0xfec <__stack+0x6ed>
     eee:	ef a9       	ldd	r30, Y+55	; 0x37
     ef0:	ee 23       	and	r30, r30
     ef2:	09 f4       	brne	.+2      	; 0xef6 <__stack+0x5f7>
     ef4:	7b c0       	rjmp	.+246    	; 0xfec <__stack+0x6ed>
			{
				if(modeStatus == 0)
     ef6:	41 14       	cp	r4, r1
     ef8:	51 04       	cpc	r5, r1
     efa:	59 f4       	brne	.+22     	; 0xf12 <__stack+0x613>
				{
					min -= 1;
     efc:	8b a9       	ldd	r24, Y+51	; 0x33
     efe:	9c a9       	ldd	r25, Y+52	; 0x34
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	9c ab       	std	Y+52, r25	; 0x34
     f04:	8b ab       	std	Y+51, r24	; 0x33
					if (min < 0){
     f06:	99 23       	and	r25, r25
     f08:	24 f4       	brge	.+8      	; 0xf12 <__stack+0x613>
						min = 59;
     f0a:	8b e3       	ldi	r24, 0x3B	; 59
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	9c ab       	std	Y+52, r25	; 0x34
     f10:	8b ab       	std	Y+51, r24	; 0x33
					}
				}
				if(modeStatus==1)
     f12:	f1 e0       	ldi	r31, 0x01	; 1
     f14:	4f 16       	cp	r4, r31
     f16:	51 04       	cpc	r5, r1
     f18:	59 f4       	brne	.+22     	; 0xf30 <__stack+0x631>
				{
					hour -= 1;
     f1a:	89 a9       	ldd	r24, Y+49	; 0x31
     f1c:	9a a9       	ldd	r25, Y+50	; 0x32
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	9a ab       	std	Y+50, r25	; 0x32
     f22:	89 ab       	std	Y+49, r24	; 0x31
					if (hour <0){
     f24:	99 23       	and	r25, r25
     f26:	24 f4       	brge	.+8      	; 0xf30 <__stack+0x631>
						hour = 23;
     f28:	87 e1       	ldi	r24, 0x17	; 23
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	9a ab       	std	Y+50, r25	; 0x32
     f2e:	89 ab       	std	Y+49, r24	; 0x31
					}

				}
				if(modeStatus==2)
     f30:	22 e0       	ldi	r18, 0x02	; 2
     f32:	42 16       	cp	r4, r18
     f34:	51 04       	cpc	r5, r1
     f36:	b9 f4       	brne	.+46     	; 0xf66 <__stack+0x667>
				{
					day -= 1;
     f38:	8f a5       	ldd	r24, Y+47	; 0x2f
     f3a:	98 a9       	ldd	r25, Y+48	; 0x30
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	98 ab       	std	Y+48, r25	; 0x30
     f40:	8f a7       	std	Y+47, r24	; 0x2f
					if (day < 1){
     f42:	18 16       	cp	r1, r24
     f44:	19 06       	cpc	r1, r25
     f46:	24 f0       	brlt	.+8      	; 0xf50 <__stack+0x651>
						day = 31;
     f48:	8f e1       	ldi	r24, 0x1F	; 31
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	98 ab       	std	Y+48, r25	; 0x30
     f4e:	8f a7       	std	Y+47, r24	; 0x2f
					}
					wday -= 1;
     f50:	8d a5       	ldd	r24, Y+45	; 0x2d
     f52:	9e a5       	ldd	r25, Y+46	; 0x2e
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	9e a7       	std	Y+46, r25	; 0x2e
     f58:	8d a7       	std	Y+45, r24	; 0x2d
					if (wday <0){
     f5a:	99 23       	and	r25, r25
     f5c:	24 f4       	brge	.+8      	; 0xf66 <__stack+0x667>
						wday = 6;
     f5e:	86 e0       	ldi	r24, 0x06	; 6
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	9e a7       	std	Y+46, r25	; 0x2e
     f64:	8d a7       	std	Y+45, r24	; 0x2d
					}

				}
				if(modeStatus==3)
     f66:	33 e0       	ldi	r19, 0x03	; 3
     f68:	43 16       	cp	r4, r19
     f6a:	51 04       	cpc	r5, r1
     f6c:	59 f4       	brne	.+22     	; 0xf84 <__stack+0x685>
				{
					month -= 1;
     f6e:	8b a5       	ldd	r24, Y+43	; 0x2b
     f70:	9c a5       	ldd	r25, Y+44	; 0x2c
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	9c a7       	std	Y+44, r25	; 0x2c
     f76:	8b a7       	std	Y+43, r24	; 0x2b
					if (month <0){
     f78:	99 23       	and	r25, r25
     f7a:	24 f4       	brge	.+8      	; 0xf84 <__stack+0x685>
						month = 12;
     f7c:	8c e0       	ldi	r24, 0x0C	; 12
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	9c a7       	std	Y+44, r25	; 0x2c
     f82:	8b a7       	std	Y+43, r24	; 0x2b
					}

				}
				if(modeStatus==4)
     f84:	44 e0       	ldi	r20, 0x04	; 4
     f86:	44 16       	cp	r4, r20
     f88:	51 04       	cpc	r5, r1
     f8a:	59 f4       	brne	.+22     	; 0xfa2 <__stack+0x6a3>
				{
					year -= 1;
     f8c:	89 a5       	ldd	r24, Y+41	; 0x29
     f8e:	9a a5       	ldd	r25, Y+42	; 0x2a
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	9a a7       	std	Y+42, r25	; 0x2a
     f94:	89 a7       	std	Y+41, r24	; 0x29
				
					if (year < 0){
     f96:	99 23       	and	r25, r25
     f98:	24 f4       	brge	.+8      	; 0xfa2 <__stack+0x6a3>
						year = 99;
     f9a:	83 e6       	ldi	r24, 0x63	; 99
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	9a a7       	std	Y+42, r25	; 0x2a
     fa0:	89 a7       	std	Y+41, r24	; 0x29
					}
							
				}
				rtc.setTime(sec,min,hour,day,month,wday,year);
     fa2:	a9 a4       	ldd	r10, Y+41	; 0x29
     fa4:	ba a4       	ldd	r11, Y+42	; 0x2a
     fa6:	cd a4       	ldd	r12, Y+45	; 0x2d
     fa8:	de a4       	ldd	r13, Y+46	; 0x2e
     faa:	eb a4       	ldd	r14, Y+43	; 0x2b
     fac:	fc a4       	ldd	r15, Y+44	; 0x2c
     fae:	0f a5       	ldd	r16, Y+47	; 0x2f
     fb0:	18 a9       	ldd	r17, Y+48	; 0x30
     fb2:	29 a9       	ldd	r18, Y+49	; 0x31
     fb4:	3a a9       	ldd	r19, Y+50	; 0x32
     fb6:	4b a9       	ldd	r20, Y+51	; 0x33
     fb8:	5c a9       	ldd	r21, Y+52	; 0x34
     fba:	6d a9       	ldd	r22, Y+53	; 0x35
     fbc:	7e a9       	ldd	r23, Y+54	; 0x36
     fbe:	82 eb       	ldi	r24, 0xB2	; 178
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN3RTC7setTimeEiiiiiii>
				rtc.DisplayTimeBlink(sec, min, hour, day, wday, month,year,modeStatus);
     fc6:	a9 a4       	ldd	r10, Y+41	; 0x29
     fc8:	ba a4       	ldd	r11, Y+42	; 0x2a
     fca:	cb a4       	ldd	r12, Y+43	; 0x2b
     fcc:	dc a4       	ldd	r13, Y+44	; 0x2c
     fce:	ed a4       	ldd	r14, Y+45	; 0x2d
     fd0:	fe a4       	ldd	r15, Y+46	; 0x2e
     fd2:	0f a5       	ldd	r16, Y+47	; 0x2f
     fd4:	18 a9       	ldd	r17, Y+48	; 0x30
     fd6:	29 a9       	ldd	r18, Y+49	; 0x31
     fd8:	3a a9       	ldd	r19, Y+50	; 0x32
     fda:	4b a9       	ldd	r20, Y+51	; 0x33
     fdc:	5c a9       	ldd	r21, Y+52	; 0x34
     fde:	6d a9       	ldd	r22, Y+53	; 0x35
     fe0:	7e a9       	ldd	r23, Y+54	; 0x36
     fe2:	42 01       	movw	r8, r4
     fe4:	82 eb       	ldi	r24, 0xB2	; 178
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN3RTC16DisplayTimeBlinkEiiiiiiii>

			}
		
			if (setButton ==1 & IsEditingmode ==1)//if on time editing mode, set button is assigned to set the time
     fec:	59 ad       	ldd	r21, Y+57	; 0x39
     fee:	55 23       	and	r21, r21
     ff0:	d9 f0       	breq	.+54     	; 0x1028 <__stack+0x729>
     ff2:	7f a9       	ldd	r23, Y+55	; 0x37
     ff4:	77 23       	and	r23, r23
     ff6:	c1 f0       	breq	.+48     	; 0x1028 <__stack+0x729>
			{
				rtc.setTime(0,min,hour,day,month,wday,year);
     ff8:	a9 a4       	ldd	r10, Y+41	; 0x29
     ffa:	ba a4       	ldd	r11, Y+42	; 0x2a
     ffc:	cd a4       	ldd	r12, Y+45	; 0x2d
     ffe:	de a4       	ldd	r13, Y+46	; 0x2e
    1000:	eb a4       	ldd	r14, Y+43	; 0x2b
    1002:	fc a4       	ldd	r15, Y+44	; 0x2c
    1004:	0f a5       	ldd	r16, Y+47	; 0x2f
    1006:	18 a9       	ldd	r17, Y+48	; 0x30
    1008:	29 a9       	ldd	r18, Y+49	; 0x31
    100a:	3a a9       	ldd	r19, Y+50	; 0x32
    100c:	4b a9       	ldd	r20, Y+51	; 0x33
    100e:	5c a9       	ldd	r21, Y+52	; 0x34
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	82 eb       	ldi	r24, 0xB2	; 178
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN3RTC7setTimeEiiiiiii>
				
				IsEditingmode = 0;
				//mode = 0;
				rtc.NoBlink();
    101c:	82 eb       	ldi	r24, 0xB2	; 178
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_ZN3RTC7NoBlinkEv>
		
			if (setButton ==1 & IsEditingmode ==1)//if on time editing mode, set button is assigned to set the time
			{
				rtc.setTime(0,min,hour,day,month,wday,year);
				
				IsEditingmode = 0;
    1024:	61 2c       	mov	r6, r1
    1026:	71 2c       	mov	r7, r1
				//mode = 0;
				rtc.NoBlink();
			}
			if (IsEditingmode == 0)
    1028:	61 14       	cp	r6, r1
    102a:	71 04       	cpc	r7, r1
    102c:	61 f5       	brne	.+88     	; 0x1086 <__stack+0x787>
			{
				rtc.ReadTime(&sec,&min,&hour,&day,&wday,&month,&year);
    102e:	ce 01       	movw	r24, r28
    1030:	89 96       	adiw	r24, 0x29	; 41
    1032:	5c 01       	movw	r10, r24
    1034:	de 01       	movw	r26, r28
    1036:	9b 96       	adiw	r26, 0x2b	; 43
    1038:	6d 01       	movw	r12, r26
    103a:	fe 01       	movw	r30, r28
    103c:	bd 96       	adiw	r30, 0x2d	; 45
    103e:	7f 01       	movw	r14, r30
    1040:	8e 01       	movw	r16, r28
    1042:	01 5d       	subi	r16, 0xD1	; 209
    1044:	1f 4f       	sbci	r17, 0xFF	; 255
    1046:	9e 01       	movw	r18, r28
    1048:	2f 5c       	subi	r18, 0xCF	; 207
    104a:	3f 4f       	sbci	r19, 0xFF	; 255
    104c:	ae 01       	movw	r20, r28
    104e:	4d 5c       	subi	r20, 0xCD	; 205
    1050:	5f 4f       	sbci	r21, 0xFF	; 255
    1052:	be 01       	movw	r22, r28
    1054:	6b 5c       	subi	r22, 0xCB	; 203
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	82 eb       	ldi	r24, 0xB2	; 178
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	0e 94 24 01 	call	0x248	; 0x248 <_ZN3RTC8ReadTimeEPiS0_S0_S0_S0_S0_S0_>
				rtc.DisplayTime(sec, min, hour, day, wday, month,year);
    1060:	a9 a4       	ldd	r10, Y+41	; 0x29
    1062:	ba a4       	ldd	r11, Y+42	; 0x2a
    1064:	cb a4       	ldd	r12, Y+43	; 0x2b
    1066:	dc a4       	ldd	r13, Y+44	; 0x2c
    1068:	ed a4       	ldd	r14, Y+45	; 0x2d
    106a:	fe a4       	ldd	r15, Y+46	; 0x2e
    106c:	0f a5       	ldd	r16, Y+47	; 0x2f
    106e:	18 a9       	ldd	r17, Y+48	; 0x30
    1070:	29 a9       	ldd	r18, Y+49	; 0x31
    1072:	3a a9       	ldd	r19, Y+50	; 0x32
    1074:	4b a9       	ldd	r20, Y+51	; 0x33
    1076:	5c a9       	ldd	r21, Y+52	; 0x34
    1078:	6d a9       	ldd	r22, Y+53	; 0x35
    107a:	7e a9       	ldd	r23, Y+54	; 0x36
    107c:	82 eb       	ldi	r24, 0xB2	; 178
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN3RTC11DisplayTimeEiiiiiii>
    1084:	1a c0       	rjmp	.+52     	; 0x10ba <__stack+0x7bb>
			}
			else{
				rtc.DisplayTimeBlink(sec, min, hour, day, wday, month,year,modeStatus);
    1086:	a9 a4       	ldd	r10, Y+41	; 0x29
    1088:	ba a4       	ldd	r11, Y+42	; 0x2a
    108a:	cb a4       	ldd	r12, Y+43	; 0x2b
    108c:	dc a4       	ldd	r13, Y+44	; 0x2c
    108e:	ed a4       	ldd	r14, Y+45	; 0x2d
    1090:	fe a4       	ldd	r15, Y+46	; 0x2e
    1092:	0f a5       	ldd	r16, Y+47	; 0x2f
    1094:	18 a9       	ldd	r17, Y+48	; 0x30
    1096:	29 a9       	ldd	r18, Y+49	; 0x31
    1098:	3a a9       	ldd	r19, Y+50	; 0x32
    109a:	4b a9       	ldd	r20, Y+51	; 0x33
    109c:	5c a9       	ldd	r21, Y+52	; 0x34
    109e:	6d a9       	ldd	r22, Y+53	; 0x35
    10a0:	7e a9       	ldd	r23, Y+54	; 0x36
    10a2:	42 01       	movw	r8, r4
    10a4:	82 eb       	ldi	r24, 0xB2	; 178
    10a6:	91 e0       	ldi	r25, 0x01	; 1
    10a8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN3RTC16DisplayTimeBlinkEiiiiiiii>
    10ac:	06 c0       	rjmp	.+12     	; 0x10ba <__stack+0x7bb>
					}
				}
				
				if (setButton ==1)//assigned set button to set the slot
				{
					select_slot = 1;//set the alarm slot and identify a alarm slot was selected
    10ae:	21 e0       	ldi	r18, 0x01	; 1
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	26 96       	adiw	r28, 0x06	; 6
    10b4:	3f af       	std	Y+63, r19	; 0x3f
    10b6:	2e af       	std	Y+62, r18	; 0x3e
    10b8:	26 97       	sbiw	r28, 0x06	; 6
    10ba:	3f ef       	ldi	r19, 0xFF	; 255
    10bc:	49 e6       	ldi	r20, 0x69	; 105
    10be:	58 e1       	ldi	r21, 0x18	; 24
    10c0:	31 50       	subi	r19, 0x01	; 1
    10c2:	40 40       	sbci	r20, 0x00	; 0
    10c4:	50 40       	sbci	r21, 0x00	; 0
    10c6:	e1 f7       	brne	.-8      	; 0x10c0 <__stack+0x7c1>
    10c8:	00 c0       	rjmp	.+0      	; 0x10ca <__stack+0x7cb>
    10ca:	00 00       	nop
		


	
	
	while (1)
    10cc:	37 cc       	rjmp	.-1938   	; 0x93c <__stack+0x3d>

000010ce <_GLOBAL__sub_I_rtc>:
		}
		_delay_ms(500);
	}
	
	
    10ce:	6f ef       	ldi	r22, 0xFF	; 255
    10d0:	7f ef       	ldi	r23, 0xFF	; 255
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 2b 04 	call	0x856	; 0x856 <_Z41__static_initialization_and_destruction_0ii>
    10da:	08 95       	ret

000010dc <__tablejump2__>:
    10dc:	ee 0f       	add	r30, r30
    10de:	ff 1f       	adc	r31, r31
    10e0:	05 90       	lpm	r0, Z+
    10e2:	f4 91       	lpm	r31, Z
    10e4:	e0 2d       	mov	r30, r0
    10e6:	09 94       	ijmp

000010e8 <sprintf>:
    10e8:	ae e0       	ldi	r26, 0x0E	; 14
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	ea e7       	ldi	r30, 0x7A	; 122
    10ee:	f8 e0       	ldi	r31, 0x08	; 8
    10f0:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__prologue_saves__+0x1c>
    10f4:	0d 89       	ldd	r16, Y+21	; 0x15
    10f6:	1e 89       	ldd	r17, Y+22	; 0x16
    10f8:	86 e0       	ldi	r24, 0x06	; 6
    10fa:	8c 83       	std	Y+4, r24	; 0x04
    10fc:	1a 83       	std	Y+2, r17	; 0x02
    10fe:	09 83       	std	Y+1, r16	; 0x01
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	9f e7       	ldi	r25, 0x7F	; 127
    1104:	9e 83       	std	Y+6, r25	; 0x06
    1106:	8d 83       	std	Y+5, r24	; 0x05
    1108:	ae 01       	movw	r20, r28
    110a:	47 5e       	subi	r20, 0xE7	; 231
    110c:	5f 4f       	sbci	r21, 0xFF	; 255
    110e:	6f 89       	ldd	r22, Y+23	; 0x17
    1110:	78 8d       	ldd	r23, Y+24	; 0x18
    1112:	ce 01       	movw	r24, r28
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	0e 94 96 08 	call	0x112c	; 0x112c <vfprintf>
    111a:	ef 81       	ldd	r30, Y+7	; 0x07
    111c:	f8 85       	ldd	r31, Y+8	; 0x08
    111e:	e0 0f       	add	r30, r16
    1120:	f1 1f       	adc	r31, r17
    1122:	10 82       	st	Z, r1
    1124:	2e 96       	adiw	r28, 0x0e	; 14
    1126:	e4 e0       	ldi	r30, 0x04	; 4
    1128:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <__epilogue_restores__+0x1c>

0000112c <vfprintf>:
    112c:	ab e0       	ldi	r26, 0x0B	; 11
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	ec e9       	ldi	r30, 0x9C	; 156
    1132:	f8 e0       	ldi	r31, 0x08	; 8
    1134:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__prologue_saves__>
    1138:	6c 01       	movw	r12, r24
    113a:	7b 01       	movw	r14, r22
    113c:	8a 01       	movw	r16, r20
    113e:	fc 01       	movw	r30, r24
    1140:	17 82       	std	Z+7, r1	; 0x07
    1142:	16 82       	std	Z+6, r1	; 0x06
    1144:	83 81       	ldd	r24, Z+3	; 0x03
    1146:	81 ff       	sbrs	r24, 1
    1148:	cc c1       	rjmp	.+920    	; 0x14e2 <vfprintf+0x3b6>
    114a:	ce 01       	movw	r24, r28
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	3c 01       	movw	r6, r24
    1150:	f6 01       	movw	r30, r12
    1152:	93 81       	ldd	r25, Z+3	; 0x03
    1154:	f7 01       	movw	r30, r14
    1156:	93 fd       	sbrc	r25, 3
    1158:	85 91       	lpm	r24, Z+
    115a:	93 ff       	sbrs	r25, 3
    115c:	81 91       	ld	r24, Z+
    115e:	7f 01       	movw	r14, r30
    1160:	88 23       	and	r24, r24
    1162:	09 f4       	brne	.+2      	; 0x1166 <vfprintf+0x3a>
    1164:	ba c1       	rjmp	.+884    	; 0x14da <vfprintf+0x3ae>
    1166:	85 32       	cpi	r24, 0x25	; 37
    1168:	39 f4       	brne	.+14     	; 0x1178 <vfprintf+0x4c>
    116a:	93 fd       	sbrc	r25, 3
    116c:	85 91       	lpm	r24, Z+
    116e:	93 ff       	sbrs	r25, 3
    1170:	81 91       	ld	r24, Z+
    1172:	7f 01       	movw	r14, r30
    1174:	85 32       	cpi	r24, 0x25	; 37
    1176:	29 f4       	brne	.+10     	; 0x1182 <vfprintf+0x56>
    1178:	b6 01       	movw	r22, r12
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 8d 0a 	call	0x151a	; 0x151a <fputc>
    1180:	e7 cf       	rjmp	.-50     	; 0x1150 <vfprintf+0x24>
    1182:	91 2c       	mov	r9, r1
    1184:	21 2c       	mov	r2, r1
    1186:	31 2c       	mov	r3, r1
    1188:	ff e1       	ldi	r31, 0x1F	; 31
    118a:	f3 15       	cp	r31, r3
    118c:	d8 f0       	brcs	.+54     	; 0x11c4 <vfprintf+0x98>
    118e:	8b 32       	cpi	r24, 0x2B	; 43
    1190:	79 f0       	breq	.+30     	; 0x11b0 <vfprintf+0x84>
    1192:	38 f4       	brcc	.+14     	; 0x11a2 <vfprintf+0x76>
    1194:	80 32       	cpi	r24, 0x20	; 32
    1196:	79 f0       	breq	.+30     	; 0x11b6 <vfprintf+0x8a>
    1198:	83 32       	cpi	r24, 0x23	; 35
    119a:	a1 f4       	brne	.+40     	; 0x11c4 <vfprintf+0x98>
    119c:	23 2d       	mov	r18, r3
    119e:	20 61       	ori	r18, 0x10	; 16
    11a0:	1d c0       	rjmp	.+58     	; 0x11dc <vfprintf+0xb0>
    11a2:	8d 32       	cpi	r24, 0x2D	; 45
    11a4:	61 f0       	breq	.+24     	; 0x11be <vfprintf+0x92>
    11a6:	80 33       	cpi	r24, 0x30	; 48
    11a8:	69 f4       	brne	.+26     	; 0x11c4 <vfprintf+0x98>
    11aa:	23 2d       	mov	r18, r3
    11ac:	21 60       	ori	r18, 0x01	; 1
    11ae:	16 c0       	rjmp	.+44     	; 0x11dc <vfprintf+0xb0>
    11b0:	83 2d       	mov	r24, r3
    11b2:	82 60       	ori	r24, 0x02	; 2
    11b4:	38 2e       	mov	r3, r24
    11b6:	e3 2d       	mov	r30, r3
    11b8:	e4 60       	ori	r30, 0x04	; 4
    11ba:	3e 2e       	mov	r3, r30
    11bc:	2a c0       	rjmp	.+84     	; 0x1212 <vfprintf+0xe6>
    11be:	f3 2d       	mov	r31, r3
    11c0:	f8 60       	ori	r31, 0x08	; 8
    11c2:	1d c0       	rjmp	.+58     	; 0x11fe <vfprintf+0xd2>
    11c4:	37 fc       	sbrc	r3, 7
    11c6:	2d c0       	rjmp	.+90     	; 0x1222 <vfprintf+0xf6>
    11c8:	20 ed       	ldi	r18, 0xD0	; 208
    11ca:	28 0f       	add	r18, r24
    11cc:	2a 30       	cpi	r18, 0x0A	; 10
    11ce:	40 f0       	brcs	.+16     	; 0x11e0 <vfprintf+0xb4>
    11d0:	8e 32       	cpi	r24, 0x2E	; 46
    11d2:	b9 f4       	brne	.+46     	; 0x1202 <vfprintf+0xd6>
    11d4:	36 fc       	sbrc	r3, 6
    11d6:	81 c1       	rjmp	.+770    	; 0x14da <vfprintf+0x3ae>
    11d8:	23 2d       	mov	r18, r3
    11da:	20 64       	ori	r18, 0x40	; 64
    11dc:	32 2e       	mov	r3, r18
    11de:	19 c0       	rjmp	.+50     	; 0x1212 <vfprintf+0xe6>
    11e0:	36 fe       	sbrs	r3, 6
    11e2:	06 c0       	rjmp	.+12     	; 0x11f0 <vfprintf+0xc4>
    11e4:	8a e0       	ldi	r24, 0x0A	; 10
    11e6:	98 9e       	mul	r9, r24
    11e8:	20 0d       	add	r18, r0
    11ea:	11 24       	eor	r1, r1
    11ec:	92 2e       	mov	r9, r18
    11ee:	11 c0       	rjmp	.+34     	; 0x1212 <vfprintf+0xe6>
    11f0:	ea e0       	ldi	r30, 0x0A	; 10
    11f2:	2e 9e       	mul	r2, r30
    11f4:	20 0d       	add	r18, r0
    11f6:	11 24       	eor	r1, r1
    11f8:	22 2e       	mov	r2, r18
    11fa:	f3 2d       	mov	r31, r3
    11fc:	f0 62       	ori	r31, 0x20	; 32
    11fe:	3f 2e       	mov	r3, r31
    1200:	08 c0       	rjmp	.+16     	; 0x1212 <vfprintf+0xe6>
    1202:	8c 36       	cpi	r24, 0x6C	; 108
    1204:	21 f4       	brne	.+8      	; 0x120e <vfprintf+0xe2>
    1206:	83 2d       	mov	r24, r3
    1208:	80 68       	ori	r24, 0x80	; 128
    120a:	38 2e       	mov	r3, r24
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <vfprintf+0xe6>
    120e:	88 36       	cpi	r24, 0x68	; 104
    1210:	41 f4       	brne	.+16     	; 0x1222 <vfprintf+0xf6>
    1212:	f7 01       	movw	r30, r14
    1214:	93 fd       	sbrc	r25, 3
    1216:	85 91       	lpm	r24, Z+
    1218:	93 ff       	sbrs	r25, 3
    121a:	81 91       	ld	r24, Z+
    121c:	7f 01       	movw	r14, r30
    121e:	81 11       	cpse	r24, r1
    1220:	b3 cf       	rjmp	.-154    	; 0x1188 <vfprintf+0x5c>
    1222:	98 2f       	mov	r25, r24
    1224:	9f 7d       	andi	r25, 0xDF	; 223
    1226:	95 54       	subi	r25, 0x45	; 69
    1228:	93 30       	cpi	r25, 0x03	; 3
    122a:	28 f4       	brcc	.+10     	; 0x1236 <vfprintf+0x10a>
    122c:	0c 5f       	subi	r16, 0xFC	; 252
    122e:	1f 4f       	sbci	r17, 0xFF	; 255
    1230:	9f e3       	ldi	r25, 0x3F	; 63
    1232:	99 83       	std	Y+1, r25	; 0x01
    1234:	0d c0       	rjmp	.+26     	; 0x1250 <vfprintf+0x124>
    1236:	83 36       	cpi	r24, 0x63	; 99
    1238:	31 f0       	breq	.+12     	; 0x1246 <vfprintf+0x11a>
    123a:	83 37       	cpi	r24, 0x73	; 115
    123c:	71 f0       	breq	.+28     	; 0x125a <vfprintf+0x12e>
    123e:	83 35       	cpi	r24, 0x53	; 83
    1240:	09 f0       	breq	.+2      	; 0x1244 <vfprintf+0x118>
    1242:	59 c0       	rjmp	.+178    	; 0x12f6 <vfprintf+0x1ca>
    1244:	21 c0       	rjmp	.+66     	; 0x1288 <vfprintf+0x15c>
    1246:	f8 01       	movw	r30, r16
    1248:	80 81       	ld	r24, Z
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	0e 5f       	subi	r16, 0xFE	; 254
    124e:	1f 4f       	sbci	r17, 0xFF	; 255
    1250:	88 24       	eor	r8, r8
    1252:	83 94       	inc	r8
    1254:	91 2c       	mov	r9, r1
    1256:	53 01       	movw	r10, r6
    1258:	13 c0       	rjmp	.+38     	; 0x1280 <vfprintf+0x154>
    125a:	28 01       	movw	r4, r16
    125c:	f2 e0       	ldi	r31, 0x02	; 2
    125e:	4f 0e       	add	r4, r31
    1260:	51 1c       	adc	r5, r1
    1262:	f8 01       	movw	r30, r16
    1264:	a0 80       	ld	r10, Z
    1266:	b1 80       	ldd	r11, Z+1	; 0x01
    1268:	36 fe       	sbrs	r3, 6
    126a:	03 c0       	rjmp	.+6      	; 0x1272 <vfprintf+0x146>
    126c:	69 2d       	mov	r22, r9
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <vfprintf+0x14a>
    1272:	6f ef       	ldi	r22, 0xFF	; 255
    1274:	7f ef       	ldi	r23, 0xFF	; 255
    1276:	c5 01       	movw	r24, r10
    1278:	0e 94 82 0a 	call	0x1504	; 0x1504 <strnlen>
    127c:	4c 01       	movw	r8, r24
    127e:	82 01       	movw	r16, r4
    1280:	f3 2d       	mov	r31, r3
    1282:	ff 77       	andi	r31, 0x7F	; 127
    1284:	3f 2e       	mov	r3, r31
    1286:	16 c0       	rjmp	.+44     	; 0x12b4 <vfprintf+0x188>
    1288:	28 01       	movw	r4, r16
    128a:	22 e0       	ldi	r18, 0x02	; 2
    128c:	42 0e       	add	r4, r18
    128e:	51 1c       	adc	r5, r1
    1290:	f8 01       	movw	r30, r16
    1292:	a0 80       	ld	r10, Z
    1294:	b1 80       	ldd	r11, Z+1	; 0x01
    1296:	36 fe       	sbrs	r3, 6
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <vfprintf+0x174>
    129a:	69 2d       	mov	r22, r9
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <vfprintf+0x178>
    12a0:	6f ef       	ldi	r22, 0xFF	; 255
    12a2:	7f ef       	ldi	r23, 0xFF	; 255
    12a4:	c5 01       	movw	r24, r10
    12a6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <strnlen_P>
    12aa:	4c 01       	movw	r8, r24
    12ac:	f3 2d       	mov	r31, r3
    12ae:	f0 68       	ori	r31, 0x80	; 128
    12b0:	3f 2e       	mov	r3, r31
    12b2:	82 01       	movw	r16, r4
    12b4:	33 fc       	sbrc	r3, 3
    12b6:	1b c0       	rjmp	.+54     	; 0x12ee <vfprintf+0x1c2>
    12b8:	82 2d       	mov	r24, r2
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	88 16       	cp	r8, r24
    12be:	99 06       	cpc	r9, r25
    12c0:	b0 f4       	brcc	.+44     	; 0x12ee <vfprintf+0x1c2>
    12c2:	b6 01       	movw	r22, r12
    12c4:	80 e2       	ldi	r24, 0x20	; 32
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 8d 0a 	call	0x151a	; 0x151a <fputc>
    12cc:	2a 94       	dec	r2
    12ce:	f4 cf       	rjmp	.-24     	; 0x12b8 <vfprintf+0x18c>
    12d0:	f5 01       	movw	r30, r10
    12d2:	37 fc       	sbrc	r3, 7
    12d4:	85 91       	lpm	r24, Z+
    12d6:	37 fe       	sbrs	r3, 7
    12d8:	81 91       	ld	r24, Z+
    12da:	5f 01       	movw	r10, r30
    12dc:	b6 01       	movw	r22, r12
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 94 8d 0a 	call	0x151a	; 0x151a <fputc>
    12e4:	21 10       	cpse	r2, r1
    12e6:	2a 94       	dec	r2
    12e8:	21 e0       	ldi	r18, 0x01	; 1
    12ea:	82 1a       	sub	r8, r18
    12ec:	91 08       	sbc	r9, r1
    12ee:	81 14       	cp	r8, r1
    12f0:	91 04       	cpc	r9, r1
    12f2:	71 f7       	brne	.-36     	; 0x12d0 <vfprintf+0x1a4>
    12f4:	e8 c0       	rjmp	.+464    	; 0x14c6 <vfprintf+0x39a>
    12f6:	84 36       	cpi	r24, 0x64	; 100
    12f8:	11 f0       	breq	.+4      	; 0x12fe <vfprintf+0x1d2>
    12fa:	89 36       	cpi	r24, 0x69	; 105
    12fc:	41 f5       	brne	.+80     	; 0x134e <vfprintf+0x222>
    12fe:	f8 01       	movw	r30, r16
    1300:	37 fe       	sbrs	r3, 7
    1302:	07 c0       	rjmp	.+14     	; 0x1312 <vfprintf+0x1e6>
    1304:	60 81       	ld	r22, Z
    1306:	71 81       	ldd	r23, Z+1	; 0x01
    1308:	82 81       	ldd	r24, Z+2	; 0x02
    130a:	93 81       	ldd	r25, Z+3	; 0x03
    130c:	0c 5f       	subi	r16, 0xFC	; 252
    130e:	1f 4f       	sbci	r17, 0xFF	; 255
    1310:	08 c0       	rjmp	.+16     	; 0x1322 <vfprintf+0x1f6>
    1312:	60 81       	ld	r22, Z
    1314:	71 81       	ldd	r23, Z+1	; 0x01
    1316:	07 2e       	mov	r0, r23
    1318:	00 0c       	add	r0, r0
    131a:	88 0b       	sbc	r24, r24
    131c:	99 0b       	sbc	r25, r25
    131e:	0e 5f       	subi	r16, 0xFE	; 254
    1320:	1f 4f       	sbci	r17, 0xFF	; 255
    1322:	f3 2d       	mov	r31, r3
    1324:	ff 76       	andi	r31, 0x6F	; 111
    1326:	3f 2e       	mov	r3, r31
    1328:	97 ff       	sbrs	r25, 7
    132a:	09 c0       	rjmp	.+18     	; 0x133e <vfprintf+0x212>
    132c:	90 95       	com	r25
    132e:	80 95       	com	r24
    1330:	70 95       	com	r23
    1332:	61 95       	neg	r22
    1334:	7f 4f       	sbci	r23, 0xFF	; 255
    1336:	8f 4f       	sbci	r24, 0xFF	; 255
    1338:	9f 4f       	sbci	r25, 0xFF	; 255
    133a:	f0 68       	ori	r31, 0x80	; 128
    133c:	3f 2e       	mov	r3, r31
    133e:	2a e0       	ldi	r18, 0x0A	; 10
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	a3 01       	movw	r20, r6
    1344:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__ultoa_invert>
    1348:	88 2e       	mov	r8, r24
    134a:	86 18       	sub	r8, r6
    134c:	45 c0       	rjmp	.+138    	; 0x13d8 <vfprintf+0x2ac>
    134e:	85 37       	cpi	r24, 0x75	; 117
    1350:	31 f4       	brne	.+12     	; 0x135e <vfprintf+0x232>
    1352:	23 2d       	mov	r18, r3
    1354:	2f 7e       	andi	r18, 0xEF	; 239
    1356:	b2 2e       	mov	r11, r18
    1358:	2a e0       	ldi	r18, 0x0A	; 10
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	25 c0       	rjmp	.+74     	; 0x13a8 <vfprintf+0x27c>
    135e:	93 2d       	mov	r25, r3
    1360:	99 7f       	andi	r25, 0xF9	; 249
    1362:	b9 2e       	mov	r11, r25
    1364:	8f 36       	cpi	r24, 0x6F	; 111
    1366:	c1 f0       	breq	.+48     	; 0x1398 <vfprintf+0x26c>
    1368:	18 f4       	brcc	.+6      	; 0x1370 <vfprintf+0x244>
    136a:	88 35       	cpi	r24, 0x58	; 88
    136c:	79 f0       	breq	.+30     	; 0x138c <vfprintf+0x260>
    136e:	b5 c0       	rjmp	.+362    	; 0x14da <vfprintf+0x3ae>
    1370:	80 37       	cpi	r24, 0x70	; 112
    1372:	19 f0       	breq	.+6      	; 0x137a <vfprintf+0x24e>
    1374:	88 37       	cpi	r24, 0x78	; 120
    1376:	21 f0       	breq	.+8      	; 0x1380 <vfprintf+0x254>
    1378:	b0 c0       	rjmp	.+352    	; 0x14da <vfprintf+0x3ae>
    137a:	e9 2f       	mov	r30, r25
    137c:	e0 61       	ori	r30, 0x10	; 16
    137e:	be 2e       	mov	r11, r30
    1380:	b4 fe       	sbrs	r11, 4
    1382:	0d c0       	rjmp	.+26     	; 0x139e <vfprintf+0x272>
    1384:	fb 2d       	mov	r31, r11
    1386:	f4 60       	ori	r31, 0x04	; 4
    1388:	bf 2e       	mov	r11, r31
    138a:	09 c0       	rjmp	.+18     	; 0x139e <vfprintf+0x272>
    138c:	34 fe       	sbrs	r3, 4
    138e:	0a c0       	rjmp	.+20     	; 0x13a4 <vfprintf+0x278>
    1390:	29 2f       	mov	r18, r25
    1392:	26 60       	ori	r18, 0x06	; 6
    1394:	b2 2e       	mov	r11, r18
    1396:	06 c0       	rjmp	.+12     	; 0x13a4 <vfprintf+0x278>
    1398:	28 e0       	ldi	r18, 0x08	; 8
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	05 c0       	rjmp	.+10     	; 0x13a8 <vfprintf+0x27c>
    139e:	20 e1       	ldi	r18, 0x10	; 16
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <vfprintf+0x27c>
    13a4:	20 e1       	ldi	r18, 0x10	; 16
    13a6:	32 e0       	ldi	r19, 0x02	; 2
    13a8:	f8 01       	movw	r30, r16
    13aa:	b7 fe       	sbrs	r11, 7
    13ac:	07 c0       	rjmp	.+14     	; 0x13bc <vfprintf+0x290>
    13ae:	60 81       	ld	r22, Z
    13b0:	71 81       	ldd	r23, Z+1	; 0x01
    13b2:	82 81       	ldd	r24, Z+2	; 0x02
    13b4:	93 81       	ldd	r25, Z+3	; 0x03
    13b6:	0c 5f       	subi	r16, 0xFC	; 252
    13b8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ba:	06 c0       	rjmp	.+12     	; 0x13c8 <vfprintf+0x29c>
    13bc:	60 81       	ld	r22, Z
    13be:	71 81       	ldd	r23, Z+1	; 0x01
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 5f       	subi	r16, 0xFE	; 254
    13c6:	1f 4f       	sbci	r17, 0xFF	; 255
    13c8:	a3 01       	movw	r20, r6
    13ca:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__ultoa_invert>
    13ce:	88 2e       	mov	r8, r24
    13d0:	86 18       	sub	r8, r6
    13d2:	fb 2d       	mov	r31, r11
    13d4:	ff 77       	andi	r31, 0x7F	; 127
    13d6:	3f 2e       	mov	r3, r31
    13d8:	36 fe       	sbrs	r3, 6
    13da:	0d c0       	rjmp	.+26     	; 0x13f6 <vfprintf+0x2ca>
    13dc:	23 2d       	mov	r18, r3
    13de:	2e 7f       	andi	r18, 0xFE	; 254
    13e0:	a2 2e       	mov	r10, r18
    13e2:	89 14       	cp	r8, r9
    13e4:	58 f4       	brcc	.+22     	; 0x13fc <vfprintf+0x2d0>
    13e6:	34 fe       	sbrs	r3, 4
    13e8:	0b c0       	rjmp	.+22     	; 0x1400 <vfprintf+0x2d4>
    13ea:	32 fc       	sbrc	r3, 2
    13ec:	09 c0       	rjmp	.+18     	; 0x1400 <vfprintf+0x2d4>
    13ee:	83 2d       	mov	r24, r3
    13f0:	8e 7e       	andi	r24, 0xEE	; 238
    13f2:	a8 2e       	mov	r10, r24
    13f4:	05 c0       	rjmp	.+10     	; 0x1400 <vfprintf+0x2d4>
    13f6:	b8 2c       	mov	r11, r8
    13f8:	a3 2c       	mov	r10, r3
    13fa:	03 c0       	rjmp	.+6      	; 0x1402 <vfprintf+0x2d6>
    13fc:	b8 2c       	mov	r11, r8
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <vfprintf+0x2d6>
    1400:	b9 2c       	mov	r11, r9
    1402:	a4 fe       	sbrs	r10, 4
    1404:	0f c0       	rjmp	.+30     	; 0x1424 <vfprintf+0x2f8>
    1406:	fe 01       	movw	r30, r28
    1408:	e8 0d       	add	r30, r8
    140a:	f1 1d       	adc	r31, r1
    140c:	80 81       	ld	r24, Z
    140e:	80 33       	cpi	r24, 0x30	; 48
    1410:	21 f4       	brne	.+8      	; 0x141a <vfprintf+0x2ee>
    1412:	9a 2d       	mov	r25, r10
    1414:	99 7e       	andi	r25, 0xE9	; 233
    1416:	a9 2e       	mov	r10, r25
    1418:	09 c0       	rjmp	.+18     	; 0x142c <vfprintf+0x300>
    141a:	a2 fe       	sbrs	r10, 2
    141c:	06 c0       	rjmp	.+12     	; 0x142a <vfprintf+0x2fe>
    141e:	b3 94       	inc	r11
    1420:	b3 94       	inc	r11
    1422:	04 c0       	rjmp	.+8      	; 0x142c <vfprintf+0x300>
    1424:	8a 2d       	mov	r24, r10
    1426:	86 78       	andi	r24, 0x86	; 134
    1428:	09 f0       	breq	.+2      	; 0x142c <vfprintf+0x300>
    142a:	b3 94       	inc	r11
    142c:	a3 fc       	sbrc	r10, 3
    142e:	11 c0       	rjmp	.+34     	; 0x1452 <vfprintf+0x326>
    1430:	a0 fe       	sbrs	r10, 0
    1432:	06 c0       	rjmp	.+12     	; 0x1440 <vfprintf+0x314>
    1434:	b2 14       	cp	r11, r2
    1436:	88 f4       	brcc	.+34     	; 0x145a <vfprintf+0x32e>
    1438:	28 0c       	add	r2, r8
    143a:	92 2c       	mov	r9, r2
    143c:	9b 18       	sub	r9, r11
    143e:	0e c0       	rjmp	.+28     	; 0x145c <vfprintf+0x330>
    1440:	b2 14       	cp	r11, r2
    1442:	60 f4       	brcc	.+24     	; 0x145c <vfprintf+0x330>
    1444:	b6 01       	movw	r22, r12
    1446:	80 e2       	ldi	r24, 0x20	; 32
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 8d 0a 	call	0x151a	; 0x151a <fputc>
    144e:	b3 94       	inc	r11
    1450:	f7 cf       	rjmp	.-18     	; 0x1440 <vfprintf+0x314>
    1452:	b2 14       	cp	r11, r2
    1454:	18 f4       	brcc	.+6      	; 0x145c <vfprintf+0x330>
    1456:	2b 18       	sub	r2, r11
    1458:	02 c0       	rjmp	.+4      	; 0x145e <vfprintf+0x332>
    145a:	98 2c       	mov	r9, r8
    145c:	21 2c       	mov	r2, r1
    145e:	a4 fe       	sbrs	r10, 4
    1460:	10 c0       	rjmp	.+32     	; 0x1482 <vfprintf+0x356>
    1462:	b6 01       	movw	r22, r12
    1464:	80 e3       	ldi	r24, 0x30	; 48
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 8d 0a 	call	0x151a	; 0x151a <fputc>
    146c:	a2 fe       	sbrs	r10, 2
    146e:	17 c0       	rjmp	.+46     	; 0x149e <vfprintf+0x372>
    1470:	a1 fc       	sbrc	r10, 1
    1472:	03 c0       	rjmp	.+6      	; 0x147a <vfprintf+0x34e>
    1474:	88 e7       	ldi	r24, 0x78	; 120
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 c0       	rjmp	.+4      	; 0x147e <vfprintf+0x352>
    147a:	88 e5       	ldi	r24, 0x58	; 88
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	b6 01       	movw	r22, r12
    1480:	0c c0       	rjmp	.+24     	; 0x149a <vfprintf+0x36e>
    1482:	8a 2d       	mov	r24, r10
    1484:	86 78       	andi	r24, 0x86	; 134
    1486:	59 f0       	breq	.+22     	; 0x149e <vfprintf+0x372>
    1488:	a1 fe       	sbrs	r10, 1
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <vfprintf+0x364>
    148c:	8b e2       	ldi	r24, 0x2B	; 43
    148e:	01 c0       	rjmp	.+2      	; 0x1492 <vfprintf+0x366>
    1490:	80 e2       	ldi	r24, 0x20	; 32
    1492:	a7 fc       	sbrc	r10, 7
    1494:	8d e2       	ldi	r24, 0x2D	; 45
    1496:	b6 01       	movw	r22, r12
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 8d 0a 	call	0x151a	; 0x151a <fputc>
    149e:	89 14       	cp	r8, r9
    14a0:	38 f4       	brcc	.+14     	; 0x14b0 <vfprintf+0x384>
    14a2:	b6 01       	movw	r22, r12
    14a4:	80 e3       	ldi	r24, 0x30	; 48
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 8d 0a 	call	0x151a	; 0x151a <fputc>
    14ac:	9a 94       	dec	r9
    14ae:	f7 cf       	rjmp	.-18     	; 0x149e <vfprintf+0x372>
    14b0:	8a 94       	dec	r8
    14b2:	f3 01       	movw	r30, r6
    14b4:	e8 0d       	add	r30, r8
    14b6:	f1 1d       	adc	r31, r1
    14b8:	80 81       	ld	r24, Z
    14ba:	b6 01       	movw	r22, r12
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	0e 94 8d 0a 	call	0x151a	; 0x151a <fputc>
    14c2:	81 10       	cpse	r8, r1
    14c4:	f5 cf       	rjmp	.-22     	; 0x14b0 <vfprintf+0x384>
    14c6:	22 20       	and	r2, r2
    14c8:	09 f4       	brne	.+2      	; 0x14cc <vfprintf+0x3a0>
    14ca:	42 ce       	rjmp	.-892    	; 0x1150 <vfprintf+0x24>
    14cc:	b6 01       	movw	r22, r12
    14ce:	80 e2       	ldi	r24, 0x20	; 32
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 8d 0a 	call	0x151a	; 0x151a <fputc>
    14d6:	2a 94       	dec	r2
    14d8:	f6 cf       	rjmp	.-20     	; 0x14c6 <vfprintf+0x39a>
    14da:	f6 01       	movw	r30, r12
    14dc:	86 81       	ldd	r24, Z+6	; 0x06
    14de:	97 81       	ldd	r25, Z+7	; 0x07
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <vfprintf+0x3ba>
    14e2:	8f ef       	ldi	r24, 0xFF	; 255
    14e4:	9f ef       	ldi	r25, 0xFF	; 255
    14e6:	2b 96       	adiw	r28, 0x0b	; 11
    14e8:	e2 e1       	ldi	r30, 0x12	; 18
    14ea:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__epilogue_restores__>

000014ee <strnlen_P>:
    14ee:	fc 01       	movw	r30, r24
    14f0:	05 90       	lpm	r0, Z+
    14f2:	61 50       	subi	r22, 0x01	; 1
    14f4:	70 40       	sbci	r23, 0x00	; 0
    14f6:	01 10       	cpse	r0, r1
    14f8:	d8 f7       	brcc	.-10     	; 0x14f0 <strnlen_P+0x2>
    14fa:	80 95       	com	r24
    14fc:	90 95       	com	r25
    14fe:	8e 0f       	add	r24, r30
    1500:	9f 1f       	adc	r25, r31
    1502:	08 95       	ret

00001504 <strnlen>:
    1504:	fc 01       	movw	r30, r24
    1506:	61 50       	subi	r22, 0x01	; 1
    1508:	70 40       	sbci	r23, 0x00	; 0
    150a:	01 90       	ld	r0, Z+
    150c:	01 10       	cpse	r0, r1
    150e:	d8 f7       	brcc	.-10     	; 0x1506 <strnlen+0x2>
    1510:	80 95       	com	r24
    1512:	90 95       	com	r25
    1514:	8e 0f       	add	r24, r30
    1516:	9f 1f       	adc	r25, r31
    1518:	08 95       	ret

0000151a <fputc>:
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	fb 01       	movw	r30, r22
    1524:	23 81       	ldd	r18, Z+3	; 0x03
    1526:	21 fd       	sbrc	r18, 1
    1528:	03 c0       	rjmp	.+6      	; 0x1530 <fputc+0x16>
    152a:	8f ef       	ldi	r24, 0xFF	; 255
    152c:	9f ef       	ldi	r25, 0xFF	; 255
    152e:	2c c0       	rjmp	.+88     	; 0x1588 <fputc+0x6e>
    1530:	22 ff       	sbrs	r18, 2
    1532:	16 c0       	rjmp	.+44     	; 0x1560 <fputc+0x46>
    1534:	46 81       	ldd	r20, Z+6	; 0x06
    1536:	57 81       	ldd	r21, Z+7	; 0x07
    1538:	24 81       	ldd	r18, Z+4	; 0x04
    153a:	35 81       	ldd	r19, Z+5	; 0x05
    153c:	42 17       	cp	r20, r18
    153e:	53 07       	cpc	r21, r19
    1540:	44 f4       	brge	.+16     	; 0x1552 <fputc+0x38>
    1542:	a0 81       	ld	r26, Z
    1544:	b1 81       	ldd	r27, Z+1	; 0x01
    1546:	9d 01       	movw	r18, r26
    1548:	2f 5f       	subi	r18, 0xFF	; 255
    154a:	3f 4f       	sbci	r19, 0xFF	; 255
    154c:	31 83       	std	Z+1, r19	; 0x01
    154e:	20 83       	st	Z, r18
    1550:	8c 93       	st	X, r24
    1552:	26 81       	ldd	r18, Z+6	; 0x06
    1554:	37 81       	ldd	r19, Z+7	; 0x07
    1556:	2f 5f       	subi	r18, 0xFF	; 255
    1558:	3f 4f       	sbci	r19, 0xFF	; 255
    155a:	37 83       	std	Z+7, r19	; 0x07
    155c:	26 83       	std	Z+6, r18	; 0x06
    155e:	14 c0       	rjmp	.+40     	; 0x1588 <fputc+0x6e>
    1560:	8b 01       	movw	r16, r22
    1562:	ec 01       	movw	r28, r24
    1564:	fb 01       	movw	r30, r22
    1566:	00 84       	ldd	r0, Z+8	; 0x08
    1568:	f1 85       	ldd	r31, Z+9	; 0x09
    156a:	e0 2d       	mov	r30, r0
    156c:	09 95       	icall
    156e:	89 2b       	or	r24, r25
    1570:	e1 f6       	brne	.-72     	; 0x152a <fputc+0x10>
    1572:	d8 01       	movw	r26, r16
    1574:	16 96       	adiw	r26, 0x06	; 6
    1576:	8d 91       	ld	r24, X+
    1578:	9c 91       	ld	r25, X
    157a:	17 97       	sbiw	r26, 0x07	; 7
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	17 96       	adiw	r26, 0x07	; 7
    1580:	9c 93       	st	X, r25
    1582:	8e 93       	st	-X, r24
    1584:	16 97       	sbiw	r26, 0x06	; 6
    1586:	ce 01       	movw	r24, r28
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	08 95       	ret

00001592 <__ultoa_invert>:
    1592:	fa 01       	movw	r30, r20
    1594:	aa 27       	eor	r26, r26
    1596:	28 30       	cpi	r18, 0x08	; 8
    1598:	51 f1       	breq	.+84     	; 0x15ee <__ultoa_invert+0x5c>
    159a:	20 31       	cpi	r18, 0x10	; 16
    159c:	81 f1       	breq	.+96     	; 0x15fe <__ultoa_invert+0x6c>
    159e:	e8 94       	clt
    15a0:	6f 93       	push	r22
    15a2:	6e 7f       	andi	r22, 0xFE	; 254
    15a4:	6e 5f       	subi	r22, 0xFE	; 254
    15a6:	7f 4f       	sbci	r23, 0xFF	; 255
    15a8:	8f 4f       	sbci	r24, 0xFF	; 255
    15aa:	9f 4f       	sbci	r25, 0xFF	; 255
    15ac:	af 4f       	sbci	r26, 0xFF	; 255
    15ae:	b1 e0       	ldi	r27, 0x01	; 1
    15b0:	3e d0       	rcall	.+124    	; 0x162e <__ultoa_invert+0x9c>
    15b2:	b4 e0       	ldi	r27, 0x04	; 4
    15b4:	3c d0       	rcall	.+120    	; 0x162e <__ultoa_invert+0x9c>
    15b6:	67 0f       	add	r22, r23
    15b8:	78 1f       	adc	r23, r24
    15ba:	89 1f       	adc	r24, r25
    15bc:	9a 1f       	adc	r25, r26
    15be:	a1 1d       	adc	r26, r1
    15c0:	68 0f       	add	r22, r24
    15c2:	79 1f       	adc	r23, r25
    15c4:	8a 1f       	adc	r24, r26
    15c6:	91 1d       	adc	r25, r1
    15c8:	a1 1d       	adc	r26, r1
    15ca:	6a 0f       	add	r22, r26
    15cc:	71 1d       	adc	r23, r1
    15ce:	81 1d       	adc	r24, r1
    15d0:	91 1d       	adc	r25, r1
    15d2:	a1 1d       	adc	r26, r1
    15d4:	20 d0       	rcall	.+64     	; 0x1616 <__ultoa_invert+0x84>
    15d6:	09 f4       	brne	.+2      	; 0x15da <__ultoa_invert+0x48>
    15d8:	68 94       	set
    15da:	3f 91       	pop	r19
    15dc:	2a e0       	ldi	r18, 0x0A	; 10
    15de:	26 9f       	mul	r18, r22
    15e0:	11 24       	eor	r1, r1
    15e2:	30 19       	sub	r19, r0
    15e4:	30 5d       	subi	r19, 0xD0	; 208
    15e6:	31 93       	st	Z+, r19
    15e8:	de f6       	brtc	.-74     	; 0x15a0 <__ultoa_invert+0xe>
    15ea:	cf 01       	movw	r24, r30
    15ec:	08 95       	ret
    15ee:	46 2f       	mov	r20, r22
    15f0:	47 70       	andi	r20, 0x07	; 7
    15f2:	40 5d       	subi	r20, 0xD0	; 208
    15f4:	41 93       	st	Z+, r20
    15f6:	b3 e0       	ldi	r27, 0x03	; 3
    15f8:	0f d0       	rcall	.+30     	; 0x1618 <__ultoa_invert+0x86>
    15fa:	c9 f7       	brne	.-14     	; 0x15ee <__ultoa_invert+0x5c>
    15fc:	f6 cf       	rjmp	.-20     	; 0x15ea <__ultoa_invert+0x58>
    15fe:	46 2f       	mov	r20, r22
    1600:	4f 70       	andi	r20, 0x0F	; 15
    1602:	40 5d       	subi	r20, 0xD0	; 208
    1604:	4a 33       	cpi	r20, 0x3A	; 58
    1606:	18 f0       	brcs	.+6      	; 0x160e <__ultoa_invert+0x7c>
    1608:	49 5d       	subi	r20, 0xD9	; 217
    160a:	31 fd       	sbrc	r19, 1
    160c:	40 52       	subi	r20, 0x20	; 32
    160e:	41 93       	st	Z+, r20
    1610:	02 d0       	rcall	.+4      	; 0x1616 <__ultoa_invert+0x84>
    1612:	a9 f7       	brne	.-22     	; 0x15fe <__ultoa_invert+0x6c>
    1614:	ea cf       	rjmp	.-44     	; 0x15ea <__ultoa_invert+0x58>
    1616:	b4 e0       	ldi	r27, 0x04	; 4
    1618:	a6 95       	lsr	r26
    161a:	97 95       	ror	r25
    161c:	87 95       	ror	r24
    161e:	77 95       	ror	r23
    1620:	67 95       	ror	r22
    1622:	ba 95       	dec	r27
    1624:	c9 f7       	brne	.-14     	; 0x1618 <__ultoa_invert+0x86>
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	61 05       	cpc	r22, r1
    162a:	71 05       	cpc	r23, r1
    162c:	08 95       	ret
    162e:	9b 01       	movw	r18, r22
    1630:	ac 01       	movw	r20, r24
    1632:	0a 2e       	mov	r0, r26
    1634:	06 94       	lsr	r0
    1636:	57 95       	ror	r21
    1638:	47 95       	ror	r20
    163a:	37 95       	ror	r19
    163c:	27 95       	ror	r18
    163e:	ba 95       	dec	r27
    1640:	c9 f7       	brne	.-14     	; 0x1634 <__ultoa_invert+0xa2>
    1642:	62 0f       	add	r22, r18
    1644:	73 1f       	adc	r23, r19
    1646:	84 1f       	adc	r24, r20
    1648:	95 1f       	adc	r25, r21
    164a:	a0 1d       	adc	r26, r0
    164c:	08 95       	ret

0000164e <__prologue_saves__>:
    164e:	2f 92       	push	r2
    1650:	3f 92       	push	r3
    1652:	4f 92       	push	r4
    1654:	5f 92       	push	r5
    1656:	6f 92       	push	r6
    1658:	7f 92       	push	r7
    165a:	8f 92       	push	r8
    165c:	9f 92       	push	r9
    165e:	af 92       	push	r10
    1660:	bf 92       	push	r11
    1662:	cf 92       	push	r12
    1664:	df 92       	push	r13
    1666:	ef 92       	push	r14
    1668:	ff 92       	push	r15
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	ca 1b       	sub	r28, r26
    1678:	db 0b       	sbc	r29, r27
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	09 94       	ijmp

00001686 <__epilogue_restores__>:
    1686:	2a 88       	ldd	r2, Y+18	; 0x12
    1688:	39 88       	ldd	r3, Y+17	; 0x11
    168a:	48 88       	ldd	r4, Y+16	; 0x10
    168c:	5f 84       	ldd	r5, Y+15	; 0x0f
    168e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1690:	7d 84       	ldd	r7, Y+13	; 0x0d
    1692:	8c 84       	ldd	r8, Y+12	; 0x0c
    1694:	9b 84       	ldd	r9, Y+11	; 0x0b
    1696:	aa 84       	ldd	r10, Y+10	; 0x0a
    1698:	b9 84       	ldd	r11, Y+9	; 0x09
    169a:	c8 84       	ldd	r12, Y+8	; 0x08
    169c:	df 80       	ldd	r13, Y+7	; 0x07
    169e:	ee 80       	ldd	r14, Y+6	; 0x06
    16a0:	fd 80       	ldd	r15, Y+5	; 0x05
    16a2:	0c 81       	ldd	r16, Y+4	; 0x04
    16a4:	1b 81       	ldd	r17, Y+3	; 0x03
    16a6:	aa 81       	ldd	r26, Y+2	; 0x02
    16a8:	b9 81       	ldd	r27, Y+1	; 0x01
    16aa:	ce 0f       	add	r28, r30
    16ac:	d1 1d       	adc	r29, r1
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	ed 01       	movw	r28, r26
    16ba:	08 95       	ret

000016bc <_exit>:
    16bc:	f8 94       	cli

000016be <__stop_program>:
    16be:	ff cf       	rjmp	.-2      	; 0x16be <__stop_program>
